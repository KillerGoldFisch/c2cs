name: "Build test deploy"

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_SDK_VERSION: 5.0.202
  SOLUTION_PATH: './src/cs/C2CS.sln'

on:
  push:
    branches: [develop]
    tags: [v*]
    paths-ignore: ['**/*.md']
  pull_request_target:
    branches: [develop]

jobs:

  gitversion-job:
    name: "GitVersion"
    runs-on: ubuntu-latest

    steps:
    - name: "Checkout Git repository"
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: "Git fetch all history for all tags and branches"
      run: git fetch --prune --unshallow

    - name: "Install GitVersion"
      uses: gittools/actions/gitversion/setup@v0.9.6
      env: 
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true # workaround for https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ until the execute action is updated
      with:
        versionSpec: '5.x'
          
    - name: "Use GitVersion"
      uses: gittools/actions/gitversion/execute@v0.9.6

    - run: echo "$GitVersion_NuGetVersionV2" >> nuget-version.txt

    - name: 'Upload NuGetVersion version artifact'
      uses: actions/upload-artifact@v2
      with:
        name: nuget-version
        path: nuget-version.txt

  build-test-pack-job:
    name: "Build"
    needs: [gitversion-job]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:

    - name: "Download version artifact"
      uses: actions/download-artifact@v2
      with:
        name: nuget-version

    - name: "Read Version"
      id: version
      shell: bash
      run: |
        echo "VERSION=$(cat nuget-version.txt)" >> $GITHUB_ENV
    - name: "Print Version"
      shell: bash
      run: |
        echo $VERSION
    - name: "Checkout repository"
      uses: actions/checkout@master
      with:
        submodules: true
        lfs: true

    - name: "Install .NET"
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '${{ env.DOTNET_SDK_VERSION }}'

    - name: "Clean solution"
      run: dotnet clean '${{ env.SOLUTION_PATH }}' --configuration Release && dotnet nuget locals all --clear

    - name: "Build solution"
      run: dotnet build '${{ env.SOLUTION_PATH }}' --nologo --verbosity minimal --configuration Release /p:Version='${{ env.VERSION }}'

    - name: "Test solution"
      run: dotnet test '${{ env.SOLUTION_PATH }}' --nologo --verbosity normal --configuration Release --no-build

    - name: "Pack solution"
      if: matrix.os == 'ubuntu-latest'
      run: dotnet pack '${{ env.SOLUTION_PATH }}' --nologo --output './nuget-packages-packed' --verbosity minimal --configuration Release --no-build -p:PackageVersion='${{ env.VERSION }}'

    - name: "Upload packages"
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: nuget-packages-packed
        path: './nuget-packages-packed/*/**'

  deploy-job:
    name: "Deploy"
    needs: [build-test-pack-job]
    runs-on: ubuntu-latest
    steps:

    - name: "Install .NET"
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '${{ env.DOTNET_SDK_VERSION }}'

    - name: "Download Packages: Local"
      uses: actions/download-artifact@v1
      with:
        name: nuget-packages-packed
        path: './nuget-packages-packed'

    - name: "Upload Packages: GitHub"
      run: dotnet nuget push './**/*.nupkg' --api-key '${{ secrets.GITHUB_TOKEN }}' --source 'https://nuget.pkg.github.com/${{ github.repository_owner }}' --skip-duplicate