
//-------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the following tool:
//        https://github.com/lithiumtoast/c2cs
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ReSharper disable All
//-------------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

#nullable enable

public static unsafe partial class sokol
{
    private const string LibraryName = "sokol";
    private static IntPtr _libraryHandle;

    public static void LoadApi(string? libraryFilePath = null)
    {
        UnloadApi();
        if (libraryFilePath == null)
        {
            var libraryFileNamePrefix = NativeTools.LibraryFileNamePrefix;
            var libraryFileNameExtension = NativeTools.LibraryFileNameExtension;
            libraryFilePath = $@"{libraryFileNamePrefix}{LibraryName}{libraryFileNameExtension}";
        }
        _libraryHandle = NativeTools.LibraryLoad(libraryFilePath);
        if (_libraryHandle == IntPtr.Zero)
            throw new Exception($"Failed to load library: {libraryFilePath}");
        LoadExports();
    }

    public static void UnloadApi()
    {
        if (_libraryHandle == IntPtr.Zero)
            return;
        UnloadExports();
        NativeTools.LibraryUnload(_libraryHandle);
    }

    private static void LoadExports()
    {

    }

    private static void UnloadExports()
    {

    }

    // FunctionExtern @ sokol_app.h:1399
    [DllImport(LibraryName, EntryPoint = "sokol_main", CallingConvention = CallingConvention.Cdecl)]
    public static extern sapp_desc sokol_main(int argc, sbyte** argv);

    // FunctionExtern @ sokol_app.h:1402
    [DllImport(LibraryName, EntryPoint = "sapp_isvalid", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool sapp_isvalid();

    // FunctionExtern @ sokol_app.h:1404
    [DllImport(LibraryName, EntryPoint = "sapp_width", CallingConvention = CallingConvention.Cdecl)]
    public static extern int sapp_width();

    // FunctionExtern @ sokol_app.h:1406
    [DllImport(LibraryName, EntryPoint = "sapp_widthf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float sapp_widthf();

    // FunctionExtern @ sokol_app.h:1408
    [DllImport(LibraryName, EntryPoint = "sapp_height", CallingConvention = CallingConvention.Cdecl)]
    public static extern int sapp_height();

    // FunctionExtern @ sokol_app.h:1410
    [DllImport(LibraryName, EntryPoint = "sapp_heightf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float sapp_heightf();

    // FunctionExtern @ sokol_app.h:1412
    [DllImport(LibraryName, EntryPoint = "sapp_color_format", CallingConvention = CallingConvention.Cdecl)]
    public static extern int sapp_color_format();

    // FunctionExtern @ sokol_app.h:1414
    [DllImport(LibraryName, EntryPoint = "sapp_depth_format", CallingConvention = CallingConvention.Cdecl)]
    public static extern int sapp_depth_format();

    // FunctionExtern @ sokol_app.h:1416
    [DllImport(LibraryName, EntryPoint = "sapp_sample_count", CallingConvention = CallingConvention.Cdecl)]
    public static extern int sapp_sample_count();

    // FunctionExtern @ sokol_app.h:1418
    [DllImport(LibraryName, EntryPoint = "sapp_high_dpi", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool sapp_high_dpi();

    // FunctionExtern @ sokol_app.h:1420
    [DllImport(LibraryName, EntryPoint = "sapp_dpi_scale", CallingConvention = CallingConvention.Cdecl)]
    public static extern float sapp_dpi_scale();

    // FunctionExtern @ sokol_app.h:1422
    [DllImport(LibraryName, EntryPoint = "sapp_show_keyboard", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sapp_show_keyboard(CBool show);

    // FunctionExtern @ sokol_app.h:1424
    [DllImport(LibraryName, EntryPoint = "sapp_keyboard_shown", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool sapp_keyboard_shown();

    // FunctionExtern @ sokol_app.h:1426
    [DllImport(LibraryName, EntryPoint = "sapp_is_fullscreen", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool sapp_is_fullscreen();

    // FunctionExtern @ sokol_app.h:1428
    [DllImport(LibraryName, EntryPoint = "sapp_toggle_fullscreen", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sapp_toggle_fullscreen();

    // FunctionExtern @ sokol_app.h:1430
    [DllImport(LibraryName, EntryPoint = "sapp_show_mouse", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sapp_show_mouse(CBool show);

    // FunctionExtern @ sokol_app.h:1432
    [DllImport(LibraryName, EntryPoint = "sapp_mouse_shown", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool sapp_mouse_shown();

    // FunctionExtern @ sokol_app.h:1434
    [DllImport(LibraryName, EntryPoint = "sapp_lock_mouse", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sapp_lock_mouse(CBool @lock);

    // FunctionExtern @ sokol_app.h:1436
    [DllImport(LibraryName, EntryPoint = "sapp_mouse_locked", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool sapp_mouse_locked();

    // FunctionExtern @ sokol_app.h:1438
    [DllImport(LibraryName, EntryPoint = "sapp_userdata", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_userdata();

    // FunctionExtern @ sokol_app.h:1440
    [DllImport(LibraryName, EntryPoint = "sapp_query_desc", CallingConvention = CallingConvention.Cdecl)]
    public static extern sapp_desc sapp_query_desc();

    // FunctionExtern @ sokol_app.h:1442
    [DllImport(LibraryName, EntryPoint = "sapp_request_quit", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sapp_request_quit();

    // FunctionExtern @ sokol_app.h:1444
    [DllImport(LibraryName, EntryPoint = "sapp_cancel_quit", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sapp_cancel_quit();

    // FunctionExtern @ sokol_app.h:1446
    [DllImport(LibraryName, EntryPoint = "sapp_quit", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sapp_quit();

    // FunctionExtern @ sokol_app.h:1448
    [DllImport(LibraryName, EntryPoint = "sapp_consume_event", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sapp_consume_event();

    // FunctionExtern @ sokol_app.h:1450
    [DllImport(LibraryName, EntryPoint = "sapp_frame_count", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong sapp_frame_count();

    // FunctionExtern @ sokol_app.h:1452
    [DllImport(LibraryName, EntryPoint = "sapp_set_clipboard_string", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sapp_set_clipboard_string(sbyte* str);

    // FunctionExtern @ sokol_app.h:1454
    [DllImport(LibraryName, EntryPoint = "sapp_get_clipboard_string", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte* sapp_get_clipboard_string();

    // FunctionExtern @ sokol_app.h:1456
    [DllImport(LibraryName, EntryPoint = "sapp_set_window_title", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sapp_set_window_title(sbyte* str);

    // FunctionExtern @ sokol_app.h:1458
    [DllImport(LibraryName, EntryPoint = "sapp_set_icon", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sapp_set_icon(sapp_icon_desc* icon_desc);

    // FunctionExtern @ sokol_app.h:1460
    [DllImport(LibraryName, EntryPoint = "sapp_get_num_dropped_files", CallingConvention = CallingConvention.Cdecl)]
    public static extern int sapp_get_num_dropped_files();

    // FunctionExtern @ sokol_app.h:1462
    [DllImport(LibraryName, EntryPoint = "sapp_get_dropped_file_path", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte* sapp_get_dropped_file_path(int index);

    // FunctionExtern @ sokol_app.h:1465
    [DllImport(LibraryName, EntryPoint = "sapp_run", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sapp_run(sapp_desc* desc);

    // FunctionExtern @ sokol_app.h:1468
    [DllImport(LibraryName, EntryPoint = "sapp_gles2", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool sapp_gles2();

    // FunctionExtern @ sokol_app.h:1471
    [DllImport(LibraryName, EntryPoint = "sapp_html5_ask_leave_site", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sapp_html5_ask_leave_site(CBool ask);

    // FunctionExtern @ sokol_app.h:1473
    [DllImport(LibraryName, EntryPoint = "sapp_html5_get_dropped_file_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint sapp_html5_get_dropped_file_size(int index);

    // FunctionExtern @ sokol_app.h:1475
    [DllImport(LibraryName, EntryPoint = "sapp_html5_fetch_dropped_file", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sapp_html5_fetch_dropped_file(sapp_html5_fetch_request* request);

    // FunctionExtern @ sokol_app.h:1478
    [DllImport(LibraryName, EntryPoint = "sapp_metal_get_device", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_metal_get_device();

    // FunctionExtern @ sokol_app.h:1480
    [DllImport(LibraryName, EntryPoint = "sapp_metal_get_renderpass_descriptor", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_metal_get_renderpass_descriptor();

    // FunctionExtern @ sokol_app.h:1482
    [DllImport(LibraryName, EntryPoint = "sapp_metal_get_drawable", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_metal_get_drawable();

    // FunctionExtern @ sokol_app.h:1484
    [DllImport(LibraryName, EntryPoint = "sapp_macos_get_window", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_macos_get_window();

    // FunctionExtern @ sokol_app.h:1486
    [DllImport(LibraryName, EntryPoint = "sapp_ios_get_window", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_ios_get_window();

    // FunctionExtern @ sokol_app.h:1489
    [DllImport(LibraryName, EntryPoint = "sapp_d3d11_get_device", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_d3d11_get_device();

    // FunctionExtern @ sokol_app.h:1491
    [DllImport(LibraryName, EntryPoint = "sapp_d3d11_get_device_context", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_d3d11_get_device_context();

    // FunctionExtern @ sokol_app.h:1493
    [DllImport(LibraryName, EntryPoint = "sapp_d3d11_get_swap_chain", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_d3d11_get_swap_chain();

    // FunctionExtern @ sokol_app.h:1495
    [DllImport(LibraryName, EntryPoint = "sapp_d3d11_get_render_target_view", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_d3d11_get_render_target_view();

    // FunctionExtern @ sokol_app.h:1497
    [DllImport(LibraryName, EntryPoint = "sapp_d3d11_get_depth_stencil_view", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_d3d11_get_depth_stencil_view();

    // FunctionExtern @ sokol_app.h:1499
    [DllImport(LibraryName, EntryPoint = "sapp_win32_get_hwnd", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_win32_get_hwnd();

    // FunctionExtern @ sokol_app.h:1502
    [DllImport(LibraryName, EntryPoint = "sapp_wgpu_get_device", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_wgpu_get_device();

    // FunctionExtern @ sokol_app.h:1504
    [DllImport(LibraryName, EntryPoint = "sapp_wgpu_get_render_view", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_wgpu_get_render_view();

    // FunctionExtern @ sokol_app.h:1506
    [DllImport(LibraryName, EntryPoint = "sapp_wgpu_get_resolve_view", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_wgpu_get_resolve_view();

    // FunctionExtern @ sokol_app.h:1508
    [DllImport(LibraryName, EntryPoint = "sapp_wgpu_get_depth_stencil_view", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_wgpu_get_depth_stencil_view();

    // FunctionExtern @ sokol_app.h:1511
    [DllImport(LibraryName, EntryPoint = "sapp_android_get_native_activity", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sapp_android_get_native_activity();

    // FunctionExtern @ sokol_gfx.h:2268
    [DllImport(LibraryName, EntryPoint = "sg_setup", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_setup(sg_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2269
    [DllImport(LibraryName, EntryPoint = "sg_shutdown", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_shutdown();

    // FunctionExtern @ sokol_gfx.h:2270
    [DllImport(LibraryName, EntryPoint = "sg_isvalid", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool sg_isvalid();

    // FunctionExtern @ sokol_gfx.h:2271
    [DllImport(LibraryName, EntryPoint = "sg_reset_state_cache", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_reset_state_cache();

    // FunctionExtern @ sokol_gfx.h:2272
    [DllImport(LibraryName, EntryPoint = "sg_install_trace_hooks", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_trace_hooks sg_install_trace_hooks(sg_trace_hooks* trace_hooks);

    // FunctionExtern @ sokol_gfx.h:2273
    [DllImport(LibraryName, EntryPoint = "sg_push_debug_group", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_push_debug_group(sbyte* name);

    // FunctionExtern @ sokol_gfx.h:2274
    [DllImport(LibraryName, EntryPoint = "sg_pop_debug_group", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_pop_debug_group();

    // FunctionExtern @ sokol_gfx.h:2277
    [DllImport(LibraryName, EntryPoint = "sg_make_buffer", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_buffer sg_make_buffer(sg_buffer_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2278
    [DllImport(LibraryName, EntryPoint = "sg_make_image", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_image sg_make_image(sg_image_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2279
    [DllImport(LibraryName, EntryPoint = "sg_make_shader", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_shader sg_make_shader(sg_shader_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2280
    [DllImport(LibraryName, EntryPoint = "sg_make_pipeline", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_pipeline sg_make_pipeline(sg_pipeline_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2281
    [DllImport(LibraryName, EntryPoint = "sg_make_pass", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_pass sg_make_pass(sg_pass_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2282
    [DllImport(LibraryName, EntryPoint = "sg_destroy_buffer", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_destroy_buffer(sg_buffer buf);

    // FunctionExtern @ sokol_gfx.h:2283
    [DllImport(LibraryName, EntryPoint = "sg_destroy_image", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_destroy_image(sg_image img);

    // FunctionExtern @ sokol_gfx.h:2284
    [DllImport(LibraryName, EntryPoint = "sg_destroy_shader", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_destroy_shader(sg_shader shd);

    // FunctionExtern @ sokol_gfx.h:2285
    [DllImport(LibraryName, EntryPoint = "sg_destroy_pipeline", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_destroy_pipeline(sg_pipeline pip);

    // FunctionExtern @ sokol_gfx.h:2286
    [DllImport(LibraryName, EntryPoint = "sg_destroy_pass", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_destroy_pass(sg_pass pass);

    // FunctionExtern @ sokol_gfx.h:2287
    [DllImport(LibraryName, EntryPoint = "sg_update_buffer", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_update_buffer(sg_buffer buf, sg_range* data);

    // FunctionExtern @ sokol_gfx.h:2288
    [DllImport(LibraryName, EntryPoint = "sg_update_image", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_update_image(sg_image img, sg_image_data* data);

    // FunctionExtern @ sokol_gfx.h:2289
    [DllImport(LibraryName, EntryPoint = "sg_append_buffer", CallingConvention = CallingConvention.Cdecl)]
    public static extern int sg_append_buffer(sg_buffer buf, sg_range* data);

    // FunctionExtern @ sokol_gfx.h:2290
    [DllImport(LibraryName, EntryPoint = "sg_query_buffer_overflow", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool sg_query_buffer_overflow(sg_buffer buf);

    // FunctionExtern @ sokol_gfx.h:2293
    [DllImport(LibraryName, EntryPoint = "sg_begin_default_pass", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_begin_default_pass(sg_pass_action* pass_action, int width, int height);

    // FunctionExtern @ sokol_gfx.h:2294
    [DllImport(LibraryName, EntryPoint = "sg_begin_default_passf", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_begin_default_passf(sg_pass_action* pass_action, float width, float height);

    // FunctionExtern @ sokol_gfx.h:2295
    [DllImport(LibraryName, EntryPoint = "sg_begin_pass", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_begin_pass(sg_pass pass, sg_pass_action* pass_action);

    // FunctionExtern @ sokol_gfx.h:2296
    [DllImport(LibraryName, EntryPoint = "sg_apply_viewport", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_apply_viewport(int x, int y, int width, int height, CBool origin_top_left);

    // FunctionExtern @ sokol_gfx.h:2297
    [DllImport(LibraryName, EntryPoint = "sg_apply_viewportf", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_apply_viewportf(float x, float y, float width, float height, CBool origin_top_left);

    // FunctionExtern @ sokol_gfx.h:2298
    [DllImport(LibraryName, EntryPoint = "sg_apply_scissor_rect", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_apply_scissor_rect(int x, int y, int width, int height, CBool origin_top_left);

    // FunctionExtern @ sokol_gfx.h:2299
    [DllImport(LibraryName, EntryPoint = "sg_apply_scissor_rectf", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_apply_scissor_rectf(float x, float y, float width, float height, CBool origin_top_left);

    // FunctionExtern @ sokol_gfx.h:2300
    [DllImport(LibraryName, EntryPoint = "sg_apply_pipeline", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_apply_pipeline(sg_pipeline pip);

    // FunctionExtern @ sokol_gfx.h:2301
    [DllImport(LibraryName, EntryPoint = "sg_apply_bindings", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_apply_bindings(sg_bindings* bindings);

    // FunctionExtern @ sokol_gfx.h:2302
    [DllImport(LibraryName, EntryPoint = "sg_apply_uniforms", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_apply_uniforms(sg_shader_stage stage, int ub_index, sg_range* data);

    // FunctionExtern @ sokol_gfx.h:2303
    [DllImport(LibraryName, EntryPoint = "sg_draw", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_draw(int base_element, int num_elements, int num_instances);

    // FunctionExtern @ sokol_gfx.h:2304
    [DllImport(LibraryName, EntryPoint = "sg_end_pass", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_end_pass();

    // FunctionExtern @ sokol_gfx.h:2305
    [DllImport(LibraryName, EntryPoint = "sg_commit", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_commit();

    // FunctionExtern @ sokol_gfx.h:2308
    [DllImport(LibraryName, EntryPoint = "sg_query_desc", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_desc sg_query_desc();

    // FunctionExtern @ sokol_gfx.h:2309
    [DllImport(LibraryName, EntryPoint = "sg_query_backend", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_backend sg_query_backend();

    // FunctionExtern @ sokol_gfx.h:2310
    [DllImport(LibraryName, EntryPoint = "sg_query_features", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_features sg_query_features();

    // FunctionExtern @ sokol_gfx.h:2311
    [DllImport(LibraryName, EntryPoint = "sg_query_limits", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_limits sg_query_limits();

    // FunctionExtern @ sokol_gfx.h:2312
    [DllImport(LibraryName, EntryPoint = "sg_query_pixelformat", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_pixelformat_info sg_query_pixelformat(sg_pixel_format fmt);

    // FunctionExtern @ sokol_gfx.h:2314
    [DllImport(LibraryName, EntryPoint = "sg_query_buffer_state", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_resource_state sg_query_buffer_state(sg_buffer buf);

    // FunctionExtern @ sokol_gfx.h:2315
    [DllImport(LibraryName, EntryPoint = "sg_query_image_state", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_resource_state sg_query_image_state(sg_image img);

    // FunctionExtern @ sokol_gfx.h:2316
    [DllImport(LibraryName, EntryPoint = "sg_query_shader_state", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_resource_state sg_query_shader_state(sg_shader shd);

    // FunctionExtern @ sokol_gfx.h:2317
    [DllImport(LibraryName, EntryPoint = "sg_query_pipeline_state", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_resource_state sg_query_pipeline_state(sg_pipeline pip);

    // FunctionExtern @ sokol_gfx.h:2318
    [DllImport(LibraryName, EntryPoint = "sg_query_pass_state", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_resource_state sg_query_pass_state(sg_pass pass);

    // FunctionExtern @ sokol_gfx.h:2320
    [DllImport(LibraryName, EntryPoint = "sg_query_buffer_info", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_buffer_info sg_query_buffer_info(sg_buffer buf);

    // FunctionExtern @ sokol_gfx.h:2321
    [DllImport(LibraryName, EntryPoint = "sg_query_image_info", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_image_info sg_query_image_info(sg_image img);

    // FunctionExtern @ sokol_gfx.h:2322
    [DllImport(LibraryName, EntryPoint = "sg_query_shader_info", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_shader_info sg_query_shader_info(sg_shader shd);

    // FunctionExtern @ sokol_gfx.h:2323
    [DllImport(LibraryName, EntryPoint = "sg_query_pipeline_info", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_pipeline_info sg_query_pipeline_info(sg_pipeline pip);

    // FunctionExtern @ sokol_gfx.h:2324
    [DllImport(LibraryName, EntryPoint = "sg_query_pass_info", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_pass_info sg_query_pass_info(sg_pass pass);

    // FunctionExtern @ sokol_gfx.h:2326
    [DllImport(LibraryName, EntryPoint = "sg_query_buffer_defaults", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_buffer_desc sg_query_buffer_defaults(sg_buffer_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2327
    [DllImport(LibraryName, EntryPoint = "sg_query_image_defaults", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_image_desc sg_query_image_defaults(sg_image_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2328
    [DllImport(LibraryName, EntryPoint = "sg_query_shader_defaults", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_shader_desc sg_query_shader_defaults(sg_shader_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2329
    [DllImport(LibraryName, EntryPoint = "sg_query_pipeline_defaults", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_pipeline_desc sg_query_pipeline_defaults(sg_pipeline_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2330
    [DllImport(LibraryName, EntryPoint = "sg_query_pass_defaults", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_pass_desc sg_query_pass_defaults(sg_pass_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2333
    [DllImport(LibraryName, EntryPoint = "sg_alloc_buffer", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_buffer sg_alloc_buffer();

    // FunctionExtern @ sokol_gfx.h:2334
    [DllImport(LibraryName, EntryPoint = "sg_alloc_image", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_image sg_alloc_image();

    // FunctionExtern @ sokol_gfx.h:2335
    [DllImport(LibraryName, EntryPoint = "sg_alloc_shader", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_shader sg_alloc_shader();

    // FunctionExtern @ sokol_gfx.h:2336
    [DllImport(LibraryName, EntryPoint = "sg_alloc_pipeline", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_pipeline sg_alloc_pipeline();

    // FunctionExtern @ sokol_gfx.h:2337
    [DllImport(LibraryName, EntryPoint = "sg_alloc_pass", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_pass sg_alloc_pass();

    // FunctionExtern @ sokol_gfx.h:2338
    [DllImport(LibraryName, EntryPoint = "sg_dealloc_buffer", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_dealloc_buffer(sg_buffer buf_id);

    // FunctionExtern @ sokol_gfx.h:2339
    [DllImport(LibraryName, EntryPoint = "sg_dealloc_image", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_dealloc_image(sg_image img_id);

    // FunctionExtern @ sokol_gfx.h:2340
    [DllImport(LibraryName, EntryPoint = "sg_dealloc_shader", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_dealloc_shader(sg_shader shd_id);

    // FunctionExtern @ sokol_gfx.h:2341
    [DllImport(LibraryName, EntryPoint = "sg_dealloc_pipeline", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_dealloc_pipeline(sg_pipeline pip_id);

    // FunctionExtern @ sokol_gfx.h:2342
    [DllImport(LibraryName, EntryPoint = "sg_dealloc_pass", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_dealloc_pass(sg_pass pass_id);

    // FunctionExtern @ sokol_gfx.h:2343
    [DllImport(LibraryName, EntryPoint = "sg_init_buffer", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_init_buffer(sg_buffer buf_id, sg_buffer_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2344
    [DllImport(LibraryName, EntryPoint = "sg_init_image", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_init_image(sg_image img_id, sg_image_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2345
    [DllImport(LibraryName, EntryPoint = "sg_init_shader", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_init_shader(sg_shader shd_id, sg_shader_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2346
    [DllImport(LibraryName, EntryPoint = "sg_init_pipeline", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_init_pipeline(sg_pipeline pip_id, sg_pipeline_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2347
    [DllImport(LibraryName, EntryPoint = "sg_init_pass", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_init_pass(sg_pass pass_id, sg_pass_desc* desc);

    // FunctionExtern @ sokol_gfx.h:2348
    [DllImport(LibraryName, EntryPoint = "sg_uninit_buffer", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool sg_uninit_buffer(sg_buffer buf_id);

    // FunctionExtern @ sokol_gfx.h:2349
    [DllImport(LibraryName, EntryPoint = "sg_uninit_image", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool sg_uninit_image(sg_image img_id);

    // FunctionExtern @ sokol_gfx.h:2350
    [DllImport(LibraryName, EntryPoint = "sg_uninit_shader", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool sg_uninit_shader(sg_shader shd_id);

    // FunctionExtern @ sokol_gfx.h:2351
    [DllImport(LibraryName, EntryPoint = "sg_uninit_pipeline", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool sg_uninit_pipeline(sg_pipeline pip_id);

    // FunctionExtern @ sokol_gfx.h:2352
    [DllImport(LibraryName, EntryPoint = "sg_uninit_pass", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool sg_uninit_pass(sg_pass pass_id);

    // FunctionExtern @ sokol_gfx.h:2353
    [DllImport(LibraryName, EntryPoint = "sg_fail_buffer", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_fail_buffer(sg_buffer buf_id);

    // FunctionExtern @ sokol_gfx.h:2354
    [DllImport(LibraryName, EntryPoint = "sg_fail_image", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_fail_image(sg_image img_id);

    // FunctionExtern @ sokol_gfx.h:2355
    [DllImport(LibraryName, EntryPoint = "sg_fail_shader", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_fail_shader(sg_shader shd_id);

    // FunctionExtern @ sokol_gfx.h:2356
    [DllImport(LibraryName, EntryPoint = "sg_fail_pipeline", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_fail_pipeline(sg_pipeline pip_id);

    // FunctionExtern @ sokol_gfx.h:2357
    [DllImport(LibraryName, EntryPoint = "sg_fail_pass", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_fail_pass(sg_pass pass_id);

    // FunctionExtern @ sokol_gfx.h:2360
    [DllImport(LibraryName, EntryPoint = "sg_setup_context", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_context sg_setup_context();

    // FunctionExtern @ sokol_gfx.h:2361
    [DllImport(LibraryName, EntryPoint = "sg_activate_context", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_activate_context(sg_context ctx_id);

    // FunctionExtern @ sokol_gfx.h:2362
    [DllImport(LibraryName, EntryPoint = "sg_discard_context", CallingConvention = CallingConvention.Cdecl)]
    public static extern void sg_discard_context(sg_context ctx_id);

    // FunctionExtern @ sokol_gfx.h:2371
    [DllImport(LibraryName, EntryPoint = "sg_d3d11_device", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sg_d3d11_device();

    // FunctionExtern @ sokol_gfx.h:2374
    [DllImport(LibraryName, EntryPoint = "sg_mtl_device", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sg_mtl_device();

    // FunctionExtern @ sokol_gfx.h:2377
    [DllImport(LibraryName, EntryPoint = "sg_mtl_render_command_encoder", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* sg_mtl_render_command_encoder();

    // FunctionExtern @ sokol_glue.h:97
    [DllImport(LibraryName, EntryPoint = "sapp_sgcontext", CallingConvention = CallingConvention.Cdecl)]
    public static extern sg_context_desc sapp_sgcontext();

    // FunctionPointer @ sokol_app.h:1329
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sapp_desc_init_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void> Pointer;
    }

    // FunctionPointer @ sokol_app.h:1330
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sapp_desc_frame_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void> Pointer;
    }

    // FunctionPointer @ sokol_app.h:1331
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sapp_desc_cleanup_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void> Pointer;
    }

    // FunctionPointer @ sokol_app.h:1332
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sapp_desc_event_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sapp_event*, void> Pointer;
    }

    // FunctionPointer @ sokol_app.h:1333
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sapp_desc_fail_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sbyte*, void> Pointer;
    }

    // FunctionPointer @ sokol_app.h:1336
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sapp_desc_init_userdata_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_app.h:1337
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sapp_desc_frame_userdata_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_app.h:1338
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sapp_desc_cleanup_userdata_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_app.h:1339
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sapp_desc_event_userdata_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sapp_event*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_app.h:1340
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sapp_desc_fail_userdata_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sbyte*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_app.h:1392
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sapp_html5_fetch_request_callback
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sapp_html5_fetch_response*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1977
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_reset_state_cache
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1978
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_make_buffer
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_buffer_desc*, sg_buffer, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1979
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_make_image
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_image_desc*, sg_image, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1980
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_make_shader
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_shader_desc*, sg_shader, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1981
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_make_pipeline
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pipeline_desc*, sg_pipeline, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1982
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_make_pass
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pass_desc*, sg_pass, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1983
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_destroy_buffer
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_buffer, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1984
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_destroy_image
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_image, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1985
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_destroy_shader
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_shader, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1986
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_destroy_pipeline
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pipeline, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1987
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_destroy_pass
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pass, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1988
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_update_buffer
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_buffer, sg_range*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1989
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_update_image
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_image, sg_image_data*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1990
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_append_buffer
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_buffer, sg_range*, int, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1991
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_begin_default_pass
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pass_action*, int, int, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1992
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_begin_pass
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pass, sg_pass_action*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1993
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_apply_viewport
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<int, int, int, int, CBool, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1994
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_apply_scissor_rect
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<int, int, int, int, CBool, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1995
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_apply_pipeline
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pipeline, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1996
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_apply_bindings
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_bindings*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1997
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_apply_uniforms
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_shader_stage, int, sg_range*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1998
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_draw
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<int, int, int, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:1999
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_end_pass
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2000
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_commit
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2001
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_alloc_buffer
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_buffer, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2002
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_alloc_image
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_image, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2003
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_alloc_shader
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_shader, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2004
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_alloc_pipeline
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pipeline, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2005
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_alloc_pass
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pass, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2006
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_dealloc_buffer
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_buffer, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2007
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_dealloc_image
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_image, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2008
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_dealloc_shader
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_shader, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2009
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_dealloc_pipeline
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pipeline, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2010
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_dealloc_pass
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pass, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2011
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_init_buffer
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_buffer, sg_buffer_desc*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2012
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_init_image
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_image, sg_image_desc*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2013
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_init_shader
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_shader, sg_shader_desc*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2014
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_init_pipeline
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pipeline, sg_pipeline_desc*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2015
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_init_pass
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pass, sg_pass_desc*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2016
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_uninit_buffer
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_buffer, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2017
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_uninit_image
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_image, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2018
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_uninit_shader
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_shader, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2019
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_uninit_pipeline
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pipeline, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2020
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_uninit_pass
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pass, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2021
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_fail_buffer
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_buffer, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2022
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_fail_image
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_image, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2023
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_fail_shader
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_shader, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2024
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_fail_pipeline
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pipeline, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2025
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_fail_pass
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_pass, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2026
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_push_debug_group
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sbyte*, void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2027
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_pop_debug_group
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2028
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_err_buffer_pool_exhausted
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2029
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_err_image_pool_exhausted
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2030
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_err_shader_pool_exhausted
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2031
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_err_pipeline_pool_exhausted
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2032
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_err_pass_pool_exhausted
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2033
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_err_context_mismatch
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2034
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_err_pass_invalid
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2035
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_err_draw_invalid
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2036
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_trace_hooks_err_bindings_invalid
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2214
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_metal_context_desc_renderpass_descriptor_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_metal_context_desc_renderpass_descriptor_cb> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2215
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_metal_context_desc_renderpass_descriptor_userdata_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, sg_metal_context_desc_renderpass_descriptor_userdata_cb> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2216
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_metal_context_desc_drawable_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_metal_context_desc_drawable_cb> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2217
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_metal_context_desc_drawable_userdata_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, sg_metal_context_desc_drawable_userdata_cb> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2224
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_d3d11_context_desc_render_target_view_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_d3d11_context_desc_render_target_view_cb> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2225
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_d3d11_context_desc_render_target_view_userdata_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, sg_d3d11_context_desc_render_target_view_userdata_cb> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2226
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_d3d11_context_desc_depth_stencil_view_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_d3d11_context_desc_depth_stencil_view_cb> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2227
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_d3d11_context_desc_depth_stencil_view_userdata_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, sg_d3d11_context_desc_depth_stencil_view_userdata_cb> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2233
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_wgpu_context_desc_render_view_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_wgpu_context_desc_render_view_cb> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2234
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_wgpu_context_desc_render_view_userdata_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, sg_wgpu_context_desc_render_view_userdata_cb> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2235
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_wgpu_context_desc_resolve_view_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_wgpu_context_desc_resolve_view_cb> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2236
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_wgpu_context_desc_resolve_view_userdata_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, sg_wgpu_context_desc_resolve_view_userdata_cb> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2237
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_wgpu_context_desc_depth_stencil_view_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sg_wgpu_context_desc_depth_stencil_view_cb> Pointer;
    }

    // FunctionPointer @ sokol_gfx.h:2238
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct sg_wgpu_context_desc_depth_stencil_view_userdata_cb
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, sg_wgpu_context_desc_depth_stencil_view_userdata_cb> Pointer;
    }

    // Record @ sokol_app.h:1206
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct sapp_touchpoint
    {
        [FieldOffset(0)] // size = 8, padding = 8
        public ulong identifier;

        [FieldOffset(8)] // size = 4, padding = 4
        public float pos_x;

        [FieldOffset(12)] // size = 4, padding = 4
        public float pos_y;

        [FieldOffset(16)] // size = 1, padding = 1
        public CBool changed;
    }

    // Record @ sokol_app.h:1264
    [StructLayout(LayoutKind.Explicit, Size = 272, Pack = 8)]
    public struct sapp_event
    {
        [FieldOffset(0)] // size = 8, padding = 8
        public ulong frame_count;

        [FieldOffset(8)] // size = 4, padding = 4
        public sapp_event_type type;

        [FieldOffset(12)] // size = 4, padding = 4
        public sapp_keycode key_code;

        [FieldOffset(16)] // size = 4, padding = 4
        public uint char_code;

        [FieldOffset(20)] // size = 1, padding = 1
        public CBool key_repeat;

        [FieldOffset(24)] // size = 4, padding = 4
        public uint modifiers;

        [FieldOffset(28)] // size = 4, padding = 4
        public sapp_mousebutton mouse_button;

        [FieldOffset(32)] // size = 4, padding = 4
        public float mouse_x;

        [FieldOffset(36)] // size = 4, padding = 4
        public float mouse_y;

        [FieldOffset(40)] // size = 4, padding = 4
        public float mouse_dx;

        [FieldOffset(44)] // size = 4, padding = 4
        public float mouse_dy;

        [FieldOffset(48)] // size = 4, padding = 4
        public float scroll_x;

        [FieldOffset(52)] // size = 4, padding = 4
        public float scroll_y;

        [FieldOffset(56)] // size = 4, padding = 4
        public int num_touches;

        [FieldOffset(64)] // size = 192, padding = 0
        public fixed ulong _touches[192 / 8]; // original type is `sapp_touchpoint [8]`

        public ref sapp_touchpoint touches(int index = 0)
        {
            fixed (sapp_event* @this = &this)
            {
                var pointer = (sapp_touchpoint*)&@this->_touches[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(256)] // size = 4, padding = 4
        public int window_width;

        [FieldOffset(260)] // size = 4, padding = 4
        public int window_height;

        [FieldOffset(264)] // size = 4, padding = 4
        public int framebuffer_width;

        [FieldOffset(268)] // size = 4, padding = 4
        public int framebuffer_height;
    }

    // Record @ sokol_app.h:1275
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct sapp_range
    {
        [FieldOffset(0)] // size = 8, padding = 8
        public void* ptr;

        [FieldOffset(8)] // size = 8, padding = 8
        public ulong size;
    }

    // Record @ sokol_app.h:1302
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct sapp_image_desc
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public int width;

        [FieldOffset(4)] // size = 4, padding = 4
        public int height;

        [FieldOffset(8)] // size = 16, padding = 8
        public sapp_range pixels;
    }

    // Record @ sokol_app.h:1325
    [StructLayout(LayoutKind.Explicit, Size = 200, Pack = 8)]
    public struct sapp_icon_desc
    {
        [FieldOffset(0)] // size = 1, padding = 1
        public CBool sokol_default;

        [FieldOffset(8)] // size = 192, padding = 0
        public fixed ulong _images[192 / 8]; // original type is `sapp_image_desc [8]`

        public ref sapp_image_desc images(int index = 0)
        {
            fixed (sapp_icon_desc* @this = &this)
            {
                var pointer = (sapp_image_desc*)&@this->_images[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }
    }

    // Record @ sokol_app.h:1369
    [StructLayout(LayoutKind.Explicit, Size = 368, Pack = 8)]
    public struct sapp_desc
    {
        [FieldOffset(0)] // size = 8, padding = 8
        public sapp_desc_init_cb init_cb;

        [FieldOffset(8)] // size = 8, padding = 8
        public sapp_desc_frame_cb frame_cb;

        [FieldOffset(16)] // size = 8, padding = 8
        public sapp_desc_cleanup_cb cleanup_cb;

        [FieldOffset(24)] // size = 8, padding = 8
        public sapp_desc_event_cb event_cb;

        [FieldOffset(32)] // size = 8, padding = 8
        public sapp_desc_fail_cb fail_cb;

        [FieldOffset(40)] // size = 8, padding = 8
        public void* user_data;

        [FieldOffset(48)] // size = 8, padding = 8
        public sapp_desc_init_userdata_cb init_userdata_cb;

        [FieldOffset(56)] // size = 8, padding = 8
        public sapp_desc_frame_userdata_cb frame_userdata_cb;

        [FieldOffset(64)] // size = 8, padding = 8
        public sapp_desc_cleanup_userdata_cb cleanup_userdata_cb;

        [FieldOffset(72)] // size = 8, padding = 8
        public sapp_desc_event_userdata_cb event_userdata_cb;

        [FieldOffset(80)] // size = 8, padding = 8
        public sapp_desc_fail_userdata_cb fail_userdata_cb;

        [FieldOffset(88)] // size = 4, padding = 4
        public int width;

        [FieldOffset(92)] // size = 4, padding = 4
        public int height;

        [FieldOffset(96)] // size = 4, padding = 4
        public int sample_count;

        [FieldOffset(100)] // size = 4, padding = 4
        public int swap_interval;

        [FieldOffset(104)] // size = 1, padding = 1
        public CBool high_dpi;

        [FieldOffset(105)] // size = 1, padding = 1
        public CBool fullscreen;

        [FieldOffset(106)] // size = 1, padding = 1
        public CBool alpha;

        [FieldOffset(112)] // size = 8, padding = 8
        public sbyte* window_title;

        [FieldOffset(120)] // size = 1, padding = 1
        public CBool user_cursor;

        [FieldOffset(121)] // size = 1, padding = 1
        public CBool enable_clipboard;

        [FieldOffset(124)] // size = 4, padding = 4
        public int clipboard_size;

        [FieldOffset(128)] // size = 1, padding = 1
        public CBool enable_dragndrop;

        [FieldOffset(132)] // size = 4, padding = 4
        public int max_dropped_files;

        [FieldOffset(136)] // size = 4, padding = 4
        public int max_dropped_file_path_length;

        [FieldOffset(144)] // size = 200, padding = 8
        public sapp_icon_desc icon;

        [FieldOffset(344)] // size = 1, padding = 1
        public CBool gl_force_gles2;

        [FieldOffset(345)] // size = 1, padding = 1
        public CBool win32_console_utf8;

        [FieldOffset(346)] // size = 1, padding = 1
        public CBool win32_console_create;

        [FieldOffset(347)] // size = 1, padding = 1
        public CBool win32_console_attach;

        [FieldOffset(352)] // size = 8, padding = 8
        public sbyte* html5_canvas_name;

        [FieldOffset(360)] // size = 1, padding = 1
        public CBool html5_canvas_resize;

        [FieldOffset(361)] // size = 1, padding = 1
        public CBool html5_preserve_drawing_buffer;

        [FieldOffset(362)] // size = 1, padding = 1
        public CBool html5_premultiplied_alpha;

        [FieldOffset(363)] // size = 1, padding = 1
        public CBool html5_ask_leave_site;

        [FieldOffset(364)] // size = 1, padding = 1
        public CBool ios_keyboard_resizes_canvas;
    }

    // Record @ sokol_app.h:1388
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct sapp_html5_fetch_response
    {
        [FieldOffset(0)] // size = 1, padding = 1
        public CBool succeeded;

        [FieldOffset(4)] // size = 4, padding = 4
        public sapp_html5_fetch_error error_code;

        [FieldOffset(8)] // size = 4, padding = 4
        public int file_index;

        [FieldOffset(12)] // size = 4, padding = 4
        public uint fetched_size;

        [FieldOffset(16)] // size = 8, padding = 8
        public void* buffer_ptr;

        [FieldOffset(24)] // size = 4, padding = 4
        public uint buffer_size;

        [FieldOffset(32)] // size = 8, padding = 8
        public void* user_data;
    }

    // Record @ sokol_app.h:1396
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct sapp_html5_fetch_request
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public int dropped_file_index;

        [FieldOffset(8)] // size = 8, padding = 8
        public sapp_html5_fetch_request_callback callback;

        [FieldOffset(16)] // size = 8, padding = 8
        public void* buffer_ptr;

        [FieldOffset(24)] // size = 4, padding = 4
        public uint buffer_size;

        [FieldOffset(32)] // size = 8, padding = 8
        public void* user_data;
    }

    // Record @ sokol_gfx.h:628
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct sg_buffer
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint id;
    }

    // Record @ sokol_gfx.h:629
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct sg_image
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint id;
    }

    // Record @ sokol_gfx.h:630
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct sg_shader
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint id;
    }

    // Record @ sokol_gfx.h:631
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct sg_pipeline
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint id;
    }

    // Record @ sokol_gfx.h:632
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct sg_pass
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint id;
    }

    // Record @ sokol_gfx.h:633
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct sg_context
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint id;
    }

    // Record @ sokol_gfx.h:645
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct sg_range
    {
        [FieldOffset(0)] // size = 8, padding = 8
        public void* ptr;

        [FieldOffset(8)] // size = 8, padding = 8
        public ulong size;
    }

    // Record @ sokol_gfx.h:680
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct sg_color
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public float r;

        [FieldOffset(4)] // size = 4, padding = 4
        public float g;

        [FieldOffset(8)] // size = 4, padding = 4
        public float b;

        [FieldOffset(12)] // size = 4, padding = 4
        public float a;
    }

    // Record @ sokol_gfx.h:844
    [StructLayout(LayoutKind.Explicit, Size = 6, Pack = 1)]
    public struct sg_pixelformat_info
    {
        [FieldOffset(0)] // size = 1, padding = 1
        public CBool sample;

        [FieldOffset(1)] // size = 1, padding = 1
        public CBool filter;

        [FieldOffset(2)] // size = 1, padding = 1
        public CBool render;

        [FieldOffset(3)] // size = 1, padding = 1
        public CBool blend;

        [FieldOffset(4)] // size = 1, padding = 1
        public CBool msaa;

        [FieldOffset(5)] // size = 1, padding = 1
        public CBool depth;
    }

    // Record @ sokol_gfx.h:863
    [StructLayout(LayoutKind.Explicit, Size = 9, Pack = 1)]
    public struct sg_features
    {
        [FieldOffset(0)] // size = 1, padding = 1
        public CBool instancing;

        [FieldOffset(1)] // size = 1, padding = 1
        public CBool origin_top_left;

        [FieldOffset(2)] // size = 1, padding = 1
        public CBool multiple_render_targets;

        [FieldOffset(3)] // size = 1, padding = 1
        public CBool msaa_render_targets;

        [FieldOffset(4)] // size = 1, padding = 1
        public CBool imagetype_3d;

        [FieldOffset(5)] // size = 1, padding = 1
        public CBool imagetype_array;

        [FieldOffset(6)] // size = 1, padding = 1
        public CBool image_clamp_to_border;

        [FieldOffset(7)] // size = 1, padding = 1
        public CBool mrt_independent_blend_state;

        [FieldOffset(8)] // size = 1, padding = 1
        public CBool mrt_independent_write_mask;
    }

    // Record @ sokol_gfx.h:875
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
    public struct sg_limits
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public int max_image_size_2d;

        [FieldOffset(4)] // size = 4, padding = 4
        public int max_image_size_cube;

        [FieldOffset(8)] // size = 4, padding = 4
        public int max_image_size_3d;

        [FieldOffset(12)] // size = 4, padding = 4
        public int max_image_size_array;

        [FieldOffset(16)] // size = 4, padding = 4
        public int max_image_array_layers;

        [FieldOffset(20)] // size = 4, padding = 4
        public int max_vertex_attrs;
    }

    // Record @ sokol_gfx.h:1459
    [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
    public struct sg_color_attachment_action
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public sg_action action;

        [FieldOffset(4)] // size = 16, padding = 4
        public sg_color value;
    }

    // Record @ sokol_gfx.h:1464
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct sg_depth_attachment_action
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public sg_action action;

        [FieldOffset(4)] // size = 4, padding = 4
        public float value;
    }

    // Record @ sokol_gfx.h:1469
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct sg_stencil_attachment_action
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public sg_action action;

        [FieldOffset(4)] // size = 1, padding = 1
        public byte value;
    }

    // Record @ sokol_gfx.h:1477
    [StructLayout(LayoutKind.Explicit, Size = 104, Pack = 4)]
    public struct sg_pass_action
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint _start_canary;

        [FieldOffset(4)] // size = 80, padding = 0
        public fixed uint _colors[80 / 4]; // original type is `sg_color_attachment_action [4]`

        public ref sg_color_attachment_action colors(int index = 0)
        {
            fixed (sg_pass_action* @this = &this)
            {
                var pointer = (sg_color_attachment_action*)&@this->_colors[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(84)] // size = 8, padding = 4
        public sg_depth_attachment_action depth;

        [FieldOffset(92)] // size = 8, padding = 4
        public sg_stencil_attachment_action stencil;

        [FieldOffset(100)] // size = 4, padding = 4
        public uint _end_canary;
    }

    // Record @ sokol_gfx.h:1511
    [StructLayout(LayoutKind.Explicit, Size = 176, Pack = 4)]
    public struct sg_bindings
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint _start_canary;

        [FieldOffset(4)] // size = 32, padding = 0
        public fixed uint _vertex_buffers[32 / 4]; // original type is `sg_buffer [8]`

        public ref sg_buffer vertex_buffers(int index = 0)
        {
            fixed (sg_bindings* @this = &this)
            {
                var pointer = (sg_buffer*)&@this->_vertex_buffers[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(36)] // size = 32, padding = 0
        public fixed int _vertex_buffer_offsets[32 / 4]; // original type is `int [8]`

        [FieldOffset(68)] // size = 4, padding = 4
        public sg_buffer index_buffer;

        [FieldOffset(72)] // size = 4, padding = 4
        public int index_buffer_offset;

        [FieldOffset(76)] // size = 48, padding = 0
        public fixed uint _vs_images[48 / 4]; // original type is `sg_image [12]`

        public ref sg_image vs_images(int index = 0)
        {
            fixed (sg_bindings* @this = &this)
            {
                var pointer = (sg_image*)&@this->_vs_images[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(124)] // size = 48, padding = 0
        public fixed uint _fs_images[48 / 4]; // original type is `sg_image [12]`

        public ref sg_image fs_images(int index = 0)
        {
            fixed (sg_bindings* @this = &this)
            {
                var pointer = (sg_image*)&@this->_fs_images[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(172)] // size = 4, padding = 4
        public uint _end_canary;
    }

    // Record @ sokol_gfx.h:1582
    [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
    public struct sg_buffer_desc
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint _start_canary;

        [FieldOffset(8)] // size = 8, padding = 8
        public ulong size;

        [FieldOffset(16)] // size = 4, padding = 4
        public sg_buffer_type type;

        [FieldOffset(20)] // size = 4, padding = 4
        public sg_usage usage;

        [FieldOffset(24)] // size = 16, padding = 8
        public sg_range data;

        [FieldOffset(40)] // size = 8, padding = 8
        public sbyte* label;

        [FieldOffset(48)] // size = 8, padding = 0
        public fixed uint _gl_buffers[8 / 4]; // original type is `uint32_t [2]`

        [FieldOffset(56)] // size = 16, padding = 0
        public fixed ulong _mtl_buffers[16 / 8]; // original type is `const void *[2]`

        public ref void* mtl_buffers(int index = 0)
        {
            fixed (sg_buffer_desc* @this = &this)
            {
                var pointer = (void**)&@this->_mtl_buffers[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(72)] // size = 8, padding = 8
        public void* d3d11_buffer;

        [FieldOffset(80)] // size = 8, padding = 8
        public void* wgpu_buffer;

        [FieldOffset(88)] // size = 4, padding = 4
        public uint _end_canary;
    }

    // Record @ sokol_gfx.h:1593
    [StructLayout(LayoutKind.Explicit, Size = 1536, Pack = 8)]
    public struct sg_image_data
    {
        [FieldOffset(0)] // size = 1536, padding = 0
        public fixed ulong _subimage[1536 / 8]; // original type is `sg_range [6][16]`

        public ref sg_range subimage(int index = 0)
        {
            fixed (sg_image_data* @this = &this)
            {
                var pointer = (sg_range*)&@this->_subimage[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }
    }

    // Record @ sokol_gfx.h:1698
    [StructLayout(LayoutKind.Explicit, Size = 1688, Pack = 8)]
    public struct sg_image_desc
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint _start_canary;

        [FieldOffset(4)] // size = 4, padding = 4
        public sg_image_type type;

        [FieldOffset(8)] // size = 1, padding = 1
        public CBool render_target;

        [FieldOffset(12)] // size = 4, padding = 4
        public int width;

        [FieldOffset(16)] // size = 4, padding = 4
        public int height;

        [FieldOffset(20)] // size = 4, padding = 4
        public int num_slices;

        [FieldOffset(24)] // size = 4, padding = 4
        public int num_mipmaps;

        [FieldOffset(28)] // size = 4, padding = 4
        public sg_usage usage;

        [FieldOffset(32)] // size = 4, padding = 4
        public sg_pixel_format pixel_format;

        [FieldOffset(36)] // size = 4, padding = 4
        public int sample_count;

        [FieldOffset(40)] // size = 4, padding = 4
        public sg_filter min_filter;

        [FieldOffset(44)] // size = 4, padding = 4
        public sg_filter mag_filter;

        [FieldOffset(48)] // size = 4, padding = 4
        public sg_wrap wrap_u;

        [FieldOffset(52)] // size = 4, padding = 4
        public sg_wrap wrap_v;

        [FieldOffset(56)] // size = 4, padding = 4
        public sg_wrap wrap_w;

        [FieldOffset(60)] // size = 4, padding = 4
        public sg_border_color border_color;

        [FieldOffset(64)] // size = 4, padding = 4
        public uint max_anisotropy;

        [FieldOffset(68)] // size = 4, padding = 4
        public float min_lod;

        [FieldOffset(72)] // size = 4, padding = 4
        public float max_lod;

        [FieldOffset(80)] // size = 1536, padding = 8
        public sg_image_data data;

        [FieldOffset(1616)] // size = 8, padding = 8
        public sbyte* label;

        [FieldOffset(1624)] // size = 8, padding = 0
        public fixed uint _gl_textures[8 / 4]; // original type is `uint32_t [2]`

        [FieldOffset(1632)] // size = 4, padding = 4
        public uint gl_texture_target;

        [FieldOffset(1640)] // size = 16, padding = 0
        public fixed ulong _mtl_textures[16 / 8]; // original type is `const void *[2]`

        public ref void* mtl_textures(int index = 0)
        {
            fixed (sg_image_desc* @this = &this)
            {
                var pointer = (void**)&@this->_mtl_textures[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(1656)] // size = 8, padding = 8
        public void* d3d11_texture;

        [FieldOffset(1664)] // size = 8, padding = 8
        public void* d3d11_shader_resource_view;

        [FieldOffset(1672)] // size = 8, padding = 8
        public void* wgpu_texture;

        [FieldOffset(1680)] // size = 4, padding = 4
        public uint _end_canary;
    }

    // Record @ sokol_gfx.h:1738
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct sg_shader_attr_desc
    {
        [FieldOffset(0)] // size = 8, padding = 8
        public sbyte* name;

        [FieldOffset(8)] // size = 8, padding = 8
        public sbyte* sem_name;

        [FieldOffset(16)] // size = 4, padding = 4
        public int sem_index;
    }

    // Record @ sokol_gfx.h:1744
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct sg_shader_uniform_desc
    {
        [FieldOffset(0)] // size = 8, padding = 8
        public sbyte* name;

        [FieldOffset(8)] // size = 4, padding = 4
        public sg_uniform_type type;

        [FieldOffset(12)] // size = 4, padding = 4
        public int array_count;
    }

    // Record @ sokol_gfx.h:1749
    [StructLayout(LayoutKind.Explicit, Size = 264, Pack = 8)]
    public struct sg_shader_uniform_block_desc
    {
        [FieldOffset(0)] // size = 8, padding = 8
        public ulong size;

        [FieldOffset(8)] // size = 256, padding = 0
        public fixed ulong _uniforms[256 / 8]; // original type is `sg_shader_uniform_desc [16]`

        public ref sg_shader_uniform_desc uniforms(int index = 0)
        {
            fixed (sg_shader_uniform_block_desc* @this = &this)
            {
                var pointer = (sg_shader_uniform_desc*)&@this->_uniforms[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }
    }

    // Record @ sokol_gfx.h:1755
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct sg_shader_image_desc
    {
        [FieldOffset(0)] // size = 8, padding = 8
        public sbyte* name;

        [FieldOffset(8)] // size = 4, padding = 4
        public sg_image_type image_type;

        [FieldOffset(12)] // size = 4, padding = 4
        public sg_sampler_type sampler_type;
    }

    // Record @ sokol_gfx.h:1764
    [StructLayout(LayoutKind.Explicit, Size = 1288, Pack = 8)]
    public struct sg_shader_stage_desc
    {
        [FieldOffset(0)] // size = 8, padding = 8
        public sbyte* source;

        [FieldOffset(8)] // size = 16, padding = 8
        public sg_range bytecode;

        [FieldOffset(24)] // size = 8, padding = 8
        public sbyte* entry;

        [FieldOffset(32)] // size = 8, padding = 8
        public sbyte* d3d11_target;

        [FieldOffset(40)] // size = 1056, padding = 0
        public fixed ulong _uniform_blocks[1056 / 8]; // original type is `sg_shader_uniform_block_desc [4]`

        public ref sg_shader_uniform_block_desc uniform_blocks(int index = 0)
        {
            fixed (sg_shader_stage_desc* @this = &this)
            {
                var pointer = (sg_shader_uniform_block_desc*)&@this->_uniform_blocks[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(1096)] // size = 192, padding = 0
        public fixed ulong _images[192 / 8]; // original type is `sg_shader_image_desc [12]`

        public ref sg_shader_image_desc images(int index = 0)
        {
            fixed (sg_shader_stage_desc* @this = &this)
            {
                var pointer = (sg_shader_image_desc*)&@this->_images[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }
    }

    // Record @ sokol_gfx.h:1773
    [StructLayout(LayoutKind.Explicit, Size = 2984, Pack = 8)]
    public struct sg_shader_desc
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint _start_canary;

        [FieldOffset(8)] // size = 384, padding = 0
        public fixed ulong _attrs[384 / 8]; // original type is `sg_shader_attr_desc [16]`

        public ref sg_shader_attr_desc attrs(int index = 0)
        {
            fixed (sg_shader_desc* @this = &this)
            {
                var pointer = (sg_shader_attr_desc*)&@this->_attrs[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(392)] // size = 1288, padding = 8
        public sg_shader_stage_desc vs;

        [FieldOffset(1680)] // size = 1288, padding = 8
        public sg_shader_stage_desc fs;

        [FieldOffset(2968)] // size = 8, padding = 8
        public sbyte* label;

        [FieldOffset(2976)] // size = 4, padding = 4
        public uint _end_canary;
    }

    // Record @ sokol_gfx.h:1851
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct sg_buffer_layout_desc
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public int stride;

        [FieldOffset(4)] // size = 4, padding = 4
        public sg_vertex_step step_func;

        [FieldOffset(8)] // size = 4, padding = 4
        public int step_rate;
    }

    // Record @ sokol_gfx.h:1860
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct sg_vertex_attr_desc
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public int buffer_index;

        [FieldOffset(4)] // size = 4, padding = 4
        public int offset;

        [FieldOffset(8)] // size = 4, padding = 4
        public sg_vertex_format format;
    }

    // Record @ sokol_gfx.h:1865
    [StructLayout(LayoutKind.Explicit, Size = 288, Pack = 4)]
    public struct sg_layout_desc
    {
        [FieldOffset(0)] // size = 96, padding = 0
        public fixed uint _buffers[96 / 4]; // original type is `sg_buffer_layout_desc [8]`

        public ref sg_buffer_layout_desc buffers(int index = 0)
        {
            fixed (sg_layout_desc* @this = &this)
            {
                var pointer = (sg_buffer_layout_desc*)&@this->_buffers[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(96)] // size = 192, padding = 0
        public fixed uint _attrs[192 / 4]; // original type is `sg_vertex_attr_desc [16]`

        public ref sg_vertex_attr_desc attrs(int index = 0)
        {
            fixed (sg_layout_desc* @this = &this)
            {
                var pointer = (sg_vertex_attr_desc*)&@this->_attrs[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }
    }

    // Record @ sokol_gfx.h:1872
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct sg_stencil_face_state
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public sg_compare_func compare;

        [FieldOffset(4)] // size = 4, padding = 4
        public sg_stencil_op fail_op;

        [FieldOffset(8)] // size = 4, padding = 4
        public sg_stencil_op depth_fail_op;

        [FieldOffset(12)] // size = 4, padding = 4
        public sg_stencil_op pass_op;
    }

    // Record @ sokol_gfx.h:1881
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 4)]
    public struct sg_stencil_state
    {
        [FieldOffset(0)] // size = 1, padding = 1
        public CBool enabled;

        [FieldOffset(4)] // size = 16, padding = 4
        public sg_stencil_face_state front;

        [FieldOffset(20)] // size = 16, padding = 4
        public sg_stencil_face_state back;

        [FieldOffset(36)] // size = 1, padding = 1
        public byte read_mask;

        [FieldOffset(37)] // size = 1, padding = 1
        public byte write_mask;

        [FieldOffset(38)] // size = 1, padding = 1
        public byte @ref;
    }

    // Record @ sokol_gfx.h:1890
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
    public struct sg_depth_state
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public sg_pixel_format pixel_format;

        [FieldOffset(4)] // size = 4, padding = 4
        public sg_compare_func compare;

        [FieldOffset(8)] // size = 1, padding = 1
        public CBool write_enabled;

        [FieldOffset(12)] // size = 4, padding = 4
        public float bias;

        [FieldOffset(16)] // size = 4, padding = 4
        public float bias_slope_scale;

        [FieldOffset(20)] // size = 4, padding = 4
        public float bias_clamp;
    }

    // Record @ sokol_gfx.h:1900
    [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
    public struct sg_blend_state
    {
        [FieldOffset(0)] // size = 1, padding = 1
        public CBool enabled;

        [FieldOffset(4)] // size = 4, padding = 4
        public sg_blend_factor src_factor_rgb;

        [FieldOffset(8)] // size = 4, padding = 4
        public sg_blend_factor dst_factor_rgb;

        [FieldOffset(12)] // size = 4, padding = 4
        public sg_blend_op op_rgb;

        [FieldOffset(16)] // size = 4, padding = 4
        public sg_blend_factor src_factor_alpha;

        [FieldOffset(20)] // size = 4, padding = 4
        public sg_blend_factor dst_factor_alpha;

        [FieldOffset(24)] // size = 4, padding = 4
        public sg_blend_op op_alpha;
    }

    // Record @ sokol_gfx.h:1906
    [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
    public struct sg_color_state
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public sg_pixel_format pixel_format;

        [FieldOffset(4)] // size = 4, padding = 4
        public sg_color_mask write_mask;

        [FieldOffset(8)] // size = 28, padding = 4
        public sg_blend_state blend;
    }

    // Record @ sokol_gfx.h:1925
    [StructLayout(LayoutKind.Explicit, Size = 568, Pack = 8)]
    public struct sg_pipeline_desc
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint _start_canary;

        [FieldOffset(4)] // size = 4, padding = 4
        public sg_shader shader;

        [FieldOffset(8)] // size = 288, padding = 4
        public sg_layout_desc layout;

        [FieldOffset(296)] // size = 24, padding = 4
        public sg_depth_state depth;

        [FieldOffset(320)] // size = 40, padding = 4
        public sg_stencil_state stencil;

        [FieldOffset(360)] // size = 4, padding = 4
        public int color_count;

        [FieldOffset(364)] // size = 144, padding = 0
        public fixed uint _colors[144 / 4]; // original type is `sg_color_state [4]`

        public ref sg_color_state colors(int index = 0)
        {
            fixed (sg_pipeline_desc* @this = &this)
            {
                var pointer = (sg_color_state*)&@this->_colors[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(508)] // size = 4, padding = 4
        public sg_primitive_type primitive_type;

        [FieldOffset(512)] // size = 4, padding = 4
        public sg_index_type index_type;

        [FieldOffset(516)] // size = 4, padding = 4
        public sg_cull_mode cull_mode;

        [FieldOffset(520)] // size = 4, padding = 4
        public sg_face_winding face_winding;

        [FieldOffset(524)] // size = 4, padding = 4
        public int sample_count;

        [FieldOffset(528)] // size = 16, padding = 4
        public sg_color blend_color;

        [FieldOffset(544)] // size = 1, padding = 1
        public CBool alpha_to_coverage_enabled;

        [FieldOffset(552)] // size = 8, padding = 8
        public sbyte* label;

        [FieldOffset(560)] // size = 4, padding = 4
        public uint _end_canary;
    }

    // Record @ sokol_gfx.h:1953
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct sg_pass_attachment_desc
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public sg_image image;

        [FieldOffset(4)] // size = 4, padding = 4
        public int mip_level;

        [FieldOffset(8)] // size = 4, padding = 4
        public int slice;
    }

    // Record @ sokol_gfx.h:1961
    [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
    public struct sg_pass_desc
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint _start_canary;

        [FieldOffset(4)] // size = 48, padding = 0
        public fixed uint _color_attachments[48 / 4]; // original type is `sg_pass_attachment_desc [4]`

        public ref sg_pass_attachment_desc color_attachments(int index = 0)
        {
            fixed (sg_pass_desc* @this = &this)
            {
                var pointer = (sg_pass_attachment_desc*)&@this->_color_attachments[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(52)] // size = 12, padding = 4
        public sg_pass_attachment_desc depth_stencil_attachment;

        [FieldOffset(64)] // size = 8, padding = 8
        public sbyte* label;

        [FieldOffset(72)] // size = 4, padding = 4
        public uint _end_canary;
    }

    // Record @ sokol_gfx.h:2037
    [StructLayout(LayoutKind.Explicit, Size = 488, Pack = 8)]
    public struct sg_trace_hooks
    {
        [FieldOffset(0)] // size = 8, padding = 8
        public void* user_data;

        [FieldOffset(8)] // size = 8, padding = 8
        public sg_trace_hooks_reset_state_cache reset_state_cache;

        [FieldOffset(16)] // size = 8, padding = 8
        public sg_trace_hooks_make_buffer make_buffer;

        [FieldOffset(24)] // size = 8, padding = 8
        public sg_trace_hooks_make_image make_image;

        [FieldOffset(32)] // size = 8, padding = 8
        public sg_trace_hooks_make_shader make_shader;

        [FieldOffset(40)] // size = 8, padding = 8
        public sg_trace_hooks_make_pipeline make_pipeline;

        [FieldOffset(48)] // size = 8, padding = 8
        public sg_trace_hooks_make_pass make_pass;

        [FieldOffset(56)] // size = 8, padding = 8
        public sg_trace_hooks_destroy_buffer destroy_buffer;

        [FieldOffset(64)] // size = 8, padding = 8
        public sg_trace_hooks_destroy_image destroy_image;

        [FieldOffset(72)] // size = 8, padding = 8
        public sg_trace_hooks_destroy_shader destroy_shader;

        [FieldOffset(80)] // size = 8, padding = 8
        public sg_trace_hooks_destroy_pipeline destroy_pipeline;

        [FieldOffset(88)] // size = 8, padding = 8
        public sg_trace_hooks_destroy_pass destroy_pass;

        [FieldOffset(96)] // size = 8, padding = 8
        public sg_trace_hooks_update_buffer update_buffer;

        [FieldOffset(104)] // size = 8, padding = 8
        public sg_trace_hooks_update_image update_image;

        [FieldOffset(112)] // size = 8, padding = 8
        public sg_trace_hooks_append_buffer append_buffer;

        [FieldOffset(120)] // size = 8, padding = 8
        public sg_trace_hooks_begin_default_pass begin_default_pass;

        [FieldOffset(128)] // size = 8, padding = 8
        public sg_trace_hooks_begin_pass begin_pass;

        [FieldOffset(136)] // size = 8, padding = 8
        public sg_trace_hooks_apply_viewport apply_viewport;

        [FieldOffset(144)] // size = 8, padding = 8
        public sg_trace_hooks_apply_scissor_rect apply_scissor_rect;

        [FieldOffset(152)] // size = 8, padding = 8
        public sg_trace_hooks_apply_pipeline apply_pipeline;

        [FieldOffset(160)] // size = 8, padding = 8
        public sg_trace_hooks_apply_bindings apply_bindings;

        [FieldOffset(168)] // size = 8, padding = 8
        public sg_trace_hooks_apply_uniforms apply_uniforms;

        [FieldOffset(176)] // size = 8, padding = 8
        public sg_trace_hooks_draw draw;

        [FieldOffset(184)] // size = 8, padding = 8
        public sg_trace_hooks_end_pass end_pass;

        [FieldOffset(192)] // size = 8, padding = 8
        public sg_trace_hooks_commit commit;

        [FieldOffset(200)] // size = 8, padding = 8
        public sg_trace_hooks_alloc_buffer alloc_buffer;

        [FieldOffset(208)] // size = 8, padding = 8
        public sg_trace_hooks_alloc_image alloc_image;

        [FieldOffset(216)] // size = 8, padding = 8
        public sg_trace_hooks_alloc_shader alloc_shader;

        [FieldOffset(224)] // size = 8, padding = 8
        public sg_trace_hooks_alloc_pipeline alloc_pipeline;

        [FieldOffset(232)] // size = 8, padding = 8
        public sg_trace_hooks_alloc_pass alloc_pass;

        [FieldOffset(240)] // size = 8, padding = 8
        public sg_trace_hooks_dealloc_buffer dealloc_buffer;

        [FieldOffset(248)] // size = 8, padding = 8
        public sg_trace_hooks_dealloc_image dealloc_image;

        [FieldOffset(256)] // size = 8, padding = 8
        public sg_trace_hooks_dealloc_shader dealloc_shader;

        [FieldOffset(264)] // size = 8, padding = 8
        public sg_trace_hooks_dealloc_pipeline dealloc_pipeline;

        [FieldOffset(272)] // size = 8, padding = 8
        public sg_trace_hooks_dealloc_pass dealloc_pass;

        [FieldOffset(280)] // size = 8, padding = 8
        public sg_trace_hooks_init_buffer init_buffer;

        [FieldOffset(288)] // size = 8, padding = 8
        public sg_trace_hooks_init_image init_image;

        [FieldOffset(296)] // size = 8, padding = 8
        public sg_trace_hooks_init_shader init_shader;

        [FieldOffset(304)] // size = 8, padding = 8
        public sg_trace_hooks_init_pipeline init_pipeline;

        [FieldOffset(312)] // size = 8, padding = 8
        public sg_trace_hooks_init_pass init_pass;

        [FieldOffset(320)] // size = 8, padding = 8
        public sg_trace_hooks_uninit_buffer uninit_buffer;

        [FieldOffset(328)] // size = 8, padding = 8
        public sg_trace_hooks_uninit_image uninit_image;

        [FieldOffset(336)] // size = 8, padding = 8
        public sg_trace_hooks_uninit_shader uninit_shader;

        [FieldOffset(344)] // size = 8, padding = 8
        public sg_trace_hooks_uninit_pipeline uninit_pipeline;

        [FieldOffset(352)] // size = 8, padding = 8
        public sg_trace_hooks_uninit_pass uninit_pass;

        [FieldOffset(360)] // size = 8, padding = 8
        public sg_trace_hooks_fail_buffer fail_buffer;

        [FieldOffset(368)] // size = 8, padding = 8
        public sg_trace_hooks_fail_image fail_image;

        [FieldOffset(376)] // size = 8, padding = 8
        public sg_trace_hooks_fail_shader fail_shader;

        [FieldOffset(384)] // size = 8, padding = 8
        public sg_trace_hooks_fail_pipeline fail_pipeline;

        [FieldOffset(392)] // size = 8, padding = 8
        public sg_trace_hooks_fail_pass fail_pass;

        [FieldOffset(400)] // size = 8, padding = 8
        public sg_trace_hooks_push_debug_group push_debug_group;

        [FieldOffset(408)] // size = 8, padding = 8
        public sg_trace_hooks_pop_debug_group pop_debug_group;

        [FieldOffset(416)] // size = 8, padding = 8
        public sg_trace_hooks_err_buffer_pool_exhausted err_buffer_pool_exhausted;

        [FieldOffset(424)] // size = 8, padding = 8
        public sg_trace_hooks_err_image_pool_exhausted err_image_pool_exhausted;

        [FieldOffset(432)] // size = 8, padding = 8
        public sg_trace_hooks_err_shader_pool_exhausted err_shader_pool_exhausted;

        [FieldOffset(440)] // size = 8, padding = 8
        public sg_trace_hooks_err_pipeline_pool_exhausted err_pipeline_pool_exhausted;

        [FieldOffset(448)] // size = 8, padding = 8
        public sg_trace_hooks_err_pass_pool_exhausted err_pass_pool_exhausted;

        [FieldOffset(456)] // size = 8, padding = 8
        public sg_trace_hooks_err_context_mismatch err_context_mismatch;

        [FieldOffset(464)] // size = 8, padding = 8
        public sg_trace_hooks_err_pass_invalid err_pass_invalid;

        [FieldOffset(472)] // size = 8, padding = 8
        public sg_trace_hooks_err_draw_invalid err_draw_invalid;

        [FieldOffset(480)] // size = 8, padding = 8
        public sg_trace_hooks_err_bindings_invalid err_bindings_invalid;
    }

    // Record @ sokol_gfx.h:2064
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct sg_slot_info
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public sg_resource_state state;

        [FieldOffset(4)] // size = 4, padding = 4
        public uint res_id;

        [FieldOffset(8)] // size = 4, padding = 4
        public uint ctx_id;
    }

    // Record @ sokol_gfx.h:2074
    [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
    public struct sg_buffer_info
    {
        [FieldOffset(0)] // size = 12, padding = 4
        public sg_slot_info slot;

        [FieldOffset(12)] // size = 4, padding = 4
        public uint update_frame_index;

        [FieldOffset(16)] // size = 4, padding = 4
        public uint append_frame_index;

        [FieldOffset(20)] // size = 4, padding = 4
        public int append_pos;

        [FieldOffset(24)] // size = 1, padding = 1
        public CBool append_overflow;

        [FieldOffset(28)] // size = 4, padding = 4
        public int num_slots;

        [FieldOffset(32)] // size = 4, padding = 4
        public int active_slot;
    }

    // Record @ sokol_gfx.h:2083
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
    public struct sg_image_info
    {
        [FieldOffset(0)] // size = 12, padding = 4
        public sg_slot_info slot;

        [FieldOffset(12)] // size = 4, padding = 4
        public uint upd_frame_index;

        [FieldOffset(16)] // size = 4, padding = 4
        public int num_slots;

        [FieldOffset(20)] // size = 4, padding = 4
        public int active_slot;

        [FieldOffset(24)] // size = 4, padding = 4
        public int width;

        [FieldOffset(28)] // size = 4, padding = 4
        public int height;
    }

    // Record @ sokol_gfx.h:2087
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct sg_shader_info
    {
        [FieldOffset(0)] // size = 12, padding = 4
        public sg_slot_info slot;
    }

    // Record @ sokol_gfx.h:2091
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct sg_pipeline_info
    {
        [FieldOffset(0)] // size = 12, padding = 4
        public sg_slot_info slot;
    }

    // Record @ sokol_gfx.h:2095
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct sg_pass_info
    {
        [FieldOffset(0)] // size = 12, padding = 4
        public sg_slot_info slot;
    }

    // Record @ sokol_gfx.h:2210
    [StructLayout(LayoutKind.Explicit, Size = 1, Pack = 1)]
    public struct sg_gl_context_desc
    {
        [FieldOffset(0)] // size = 1, padding = 1
        public CBool force_gles2;
    }

    // Record @ sokol_gfx.h:2219
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct sg_metal_context_desc
    {
        [FieldOffset(0)] // size = 8, padding = 8
        public void* device;

        [FieldOffset(8)] // size = 8, padding = 8
        public sg_metal_context_desc_renderpass_descriptor_cb renderpass_descriptor_cb;

        [FieldOffset(16)] // size = 8, padding = 8
        public sg_metal_context_desc_renderpass_descriptor_userdata_cb renderpass_descriptor_userdata_cb;

        [FieldOffset(24)] // size = 8, padding = 8
        public sg_metal_context_desc_drawable_cb drawable_cb;

        [FieldOffset(32)] // size = 8, padding = 8
        public sg_metal_context_desc_drawable_userdata_cb drawable_userdata_cb;

        [FieldOffset(40)] // size = 8, padding = 8
        public void* user_data;
    }

    // Record @ sokol_gfx.h:2229
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct sg_d3d11_context_desc
    {
        [FieldOffset(0)] // size = 8, padding = 8
        public void* device;

        [FieldOffset(8)] // size = 8, padding = 8
        public void* device_context;

        [FieldOffset(16)] // size = 8, padding = 8
        public sg_d3d11_context_desc_render_target_view_cb render_target_view_cb;

        [FieldOffset(24)] // size = 8, padding = 8
        public sg_d3d11_context_desc_render_target_view_userdata_cb render_target_view_userdata_cb;

        [FieldOffset(32)] // size = 8, padding = 8
        public sg_d3d11_context_desc_depth_stencil_view_cb depth_stencil_view_cb;

        [FieldOffset(40)] // size = 8, padding = 8
        public sg_d3d11_context_desc_depth_stencil_view_userdata_cb depth_stencil_view_userdata_cb;

        [FieldOffset(48)] // size = 8, padding = 8
        public void* user_data;
    }

    // Record @ sokol_gfx.h:2240
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct sg_wgpu_context_desc
    {
        [FieldOffset(0)] // size = 8, padding = 8
        public void* device;

        [FieldOffset(8)] // size = 8, padding = 8
        public sg_wgpu_context_desc_render_view_cb render_view_cb;

        [FieldOffset(16)] // size = 8, padding = 8
        public sg_wgpu_context_desc_render_view_userdata_cb render_view_userdata_cb;

        [FieldOffset(24)] // size = 8, padding = 8
        public sg_wgpu_context_desc_resolve_view_cb resolve_view_cb;

        [FieldOffset(32)] // size = 8, padding = 8
        public sg_wgpu_context_desc_resolve_view_userdata_cb resolve_view_userdata_cb;

        [FieldOffset(40)] // size = 8, padding = 8
        public sg_wgpu_context_desc_depth_stencil_view_cb depth_stencil_view_cb;

        [FieldOffset(48)] // size = 8, padding = 8
        public sg_wgpu_context_desc_depth_stencil_view_userdata_cb depth_stencil_view_userdata_cb;

        [FieldOffset(56)] // size = 8, padding = 8
        public void* user_data;
    }

    // Record @ sokol_gfx.h:2250
    [StructLayout(LayoutKind.Explicit, Size = 184, Pack = 8)]
    public struct sg_context_desc
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public sg_pixel_format color_format;

        [FieldOffset(4)] // size = 4, padding = 4
        public sg_pixel_format depth_format;

        [FieldOffset(8)] // size = 4, padding = 4
        public int sample_count;

        [FieldOffset(12)] // size = 1, padding = 1
        public sg_gl_context_desc gl;

        [FieldOffset(16)] // size = 48, padding = 8
        public sg_metal_context_desc metal;

        [FieldOffset(64)] // size = 56, padding = 8
        public sg_d3d11_context_desc d3d11;

        [FieldOffset(120)] // size = 64, padding = 8
        public sg_wgpu_context_desc wgpu;
    }

    // Record @ sokol_gfx.h:2265
    [StructLayout(LayoutKind.Explicit, Size = 232, Pack = 8)]
    public struct sg_desc
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint _start_canary;

        [FieldOffset(4)] // size = 4, padding = 4
        public int buffer_pool_size;

        [FieldOffset(8)] // size = 4, padding = 4
        public int image_pool_size;

        [FieldOffset(12)] // size = 4, padding = 4
        public int shader_pool_size;

        [FieldOffset(16)] // size = 4, padding = 4
        public int pipeline_pool_size;

        [FieldOffset(20)] // size = 4, padding = 4
        public int pass_pool_size;

        [FieldOffset(24)] // size = 4, padding = 4
        public int context_pool_size;

        [FieldOffset(28)] // size = 4, padding = 4
        public int uniform_buffer_size;

        [FieldOffset(32)] // size = 4, padding = 4
        public int staging_buffer_size;

        [FieldOffset(36)] // size = 4, padding = 4
        public int sampler_cache_size;

        [FieldOffset(40)] // size = 184, padding = 8
        public sg_context_desc context;

        [FieldOffset(224)] // size = 4, padding = 4
        public uint _end_canary;
    }

    // OpaqueDataType @ sokol_app.h:1399
    [StructLayout(LayoutKind.Sequential)]
    public struct argv
    {
    }

    // Enum @ sokol_app.h:1058
    public enum sapp_event_type : uint
    {
        SAPP_EVENTTYPE_INVALID = 0U,
        SAPP_EVENTTYPE_KEY_DOWN = 1U,
        SAPP_EVENTTYPE_KEY_UP = 2U,
        SAPP_EVENTTYPE_CHAR = 3U,
        SAPP_EVENTTYPE_MOUSE_DOWN = 4U,
        SAPP_EVENTTYPE_MOUSE_UP = 5U,
        SAPP_EVENTTYPE_MOUSE_SCROLL = 6U,
        SAPP_EVENTTYPE_MOUSE_MOVE = 7U,
        SAPP_EVENTTYPE_MOUSE_ENTER = 8U,
        SAPP_EVENTTYPE_MOUSE_LEAVE = 9U,
        SAPP_EVENTTYPE_TOUCHES_BEGAN = 10U,
        SAPP_EVENTTYPE_TOUCHES_MOVED = 11U,
        SAPP_EVENTTYPE_TOUCHES_ENDED = 12U,
        SAPP_EVENTTYPE_TOUCHES_CANCELLED = 13U,
        SAPP_EVENTTYPE_RESIZED = 14U,
        SAPP_EVENTTYPE_ICONIFIED = 15U,
        SAPP_EVENTTYPE_RESTORED = 16U,
        SAPP_EVENTTYPE_SUSPENDED = 17U,
        SAPP_EVENTTYPE_RESUMED = 18U,
        SAPP_EVENTTYPE_UPDATE_CURSOR = 19U,
        SAPP_EVENTTYPE_QUIT_REQUESTED = 20U,
        SAPP_EVENTTYPE_CLIPBOARD_PASTED = 21U,
        SAPP_EVENTTYPE_FILES_DROPPED = 22U,
        _SAPP_EVENTTYPE_NUM = 23U,
        _SAPP_EVENTTYPE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_app.h:1190
    public enum sapp_keycode : uint
    {
        SAPP_KEYCODE_INVALID = 0U,
        SAPP_KEYCODE_SPACE = 32U,
        SAPP_KEYCODE_APOSTROPHE = 39U,
        SAPP_KEYCODE_COMMA = 44U,
        SAPP_KEYCODE_MINUS = 45U,
        SAPP_KEYCODE_PERIOD = 46U,
        SAPP_KEYCODE_SLASH = 47U,
        SAPP_KEYCODE_0 = 48U,
        SAPP_KEYCODE_1 = 49U,
        SAPP_KEYCODE_2 = 50U,
        SAPP_KEYCODE_3 = 51U,
        SAPP_KEYCODE_4 = 52U,
        SAPP_KEYCODE_5 = 53U,
        SAPP_KEYCODE_6 = 54U,
        SAPP_KEYCODE_7 = 55U,
        SAPP_KEYCODE_8 = 56U,
        SAPP_KEYCODE_9 = 57U,
        SAPP_KEYCODE_SEMICOLON = 59U,
        SAPP_KEYCODE_EQUAL = 61U,
        SAPP_KEYCODE_A = 65U,
        SAPP_KEYCODE_B = 66U,
        SAPP_KEYCODE_C = 67U,
        SAPP_KEYCODE_D = 68U,
        SAPP_KEYCODE_E = 69U,
        SAPP_KEYCODE_F = 70U,
        SAPP_KEYCODE_G = 71U,
        SAPP_KEYCODE_H = 72U,
        SAPP_KEYCODE_I = 73U,
        SAPP_KEYCODE_J = 74U,
        SAPP_KEYCODE_K = 75U,
        SAPP_KEYCODE_L = 76U,
        SAPP_KEYCODE_M = 77U,
        SAPP_KEYCODE_N = 78U,
        SAPP_KEYCODE_O = 79U,
        SAPP_KEYCODE_P = 80U,
        SAPP_KEYCODE_Q = 81U,
        SAPP_KEYCODE_R = 82U,
        SAPP_KEYCODE_S = 83U,
        SAPP_KEYCODE_T = 84U,
        SAPP_KEYCODE_U = 85U,
        SAPP_KEYCODE_V = 86U,
        SAPP_KEYCODE_W = 87U,
        SAPP_KEYCODE_X = 88U,
        SAPP_KEYCODE_Y = 89U,
        SAPP_KEYCODE_Z = 90U,
        SAPP_KEYCODE_LEFT_BRACKET = 91U,
        SAPP_KEYCODE_BACKSLASH = 92U,
        SAPP_KEYCODE_RIGHT_BRACKET = 93U,
        SAPP_KEYCODE_GRAVE_ACCENT = 96U,
        SAPP_KEYCODE_WORLD_1 = 161U,
        SAPP_KEYCODE_WORLD_2 = 162U,
        SAPP_KEYCODE_ESCAPE = 256U,
        SAPP_KEYCODE_ENTER = 257U,
        SAPP_KEYCODE_TAB = 258U,
        SAPP_KEYCODE_BACKSPACE = 259U,
        SAPP_KEYCODE_INSERT = 260U,
        SAPP_KEYCODE_DELETE = 261U,
        SAPP_KEYCODE_RIGHT = 262U,
        SAPP_KEYCODE_LEFT = 263U,
        SAPP_KEYCODE_DOWN = 264U,
        SAPP_KEYCODE_UP = 265U,
        SAPP_KEYCODE_PAGE_UP = 266U,
        SAPP_KEYCODE_PAGE_DOWN = 267U,
        SAPP_KEYCODE_HOME = 268U,
        SAPP_KEYCODE_END = 269U,
        SAPP_KEYCODE_CAPS_LOCK = 280U,
        SAPP_KEYCODE_SCROLL_LOCK = 281U,
        SAPP_KEYCODE_NUM_LOCK = 282U,
        SAPP_KEYCODE_PRINT_SCREEN = 283U,
        SAPP_KEYCODE_PAUSE = 284U,
        SAPP_KEYCODE_F1 = 290U,
        SAPP_KEYCODE_F2 = 291U,
        SAPP_KEYCODE_F3 = 292U,
        SAPP_KEYCODE_F4 = 293U,
        SAPP_KEYCODE_F5 = 294U,
        SAPP_KEYCODE_F6 = 295U,
        SAPP_KEYCODE_F7 = 296U,
        SAPP_KEYCODE_F8 = 297U,
        SAPP_KEYCODE_F9 = 298U,
        SAPP_KEYCODE_F10 = 299U,
        SAPP_KEYCODE_F11 = 300U,
        SAPP_KEYCODE_F12 = 301U,
        SAPP_KEYCODE_F13 = 302U,
        SAPP_KEYCODE_F14 = 303U,
        SAPP_KEYCODE_F15 = 304U,
        SAPP_KEYCODE_F16 = 305U,
        SAPP_KEYCODE_F17 = 306U,
        SAPP_KEYCODE_F18 = 307U,
        SAPP_KEYCODE_F19 = 308U,
        SAPP_KEYCODE_F20 = 309U,
        SAPP_KEYCODE_F21 = 310U,
        SAPP_KEYCODE_F22 = 311U,
        SAPP_KEYCODE_F23 = 312U,
        SAPP_KEYCODE_F24 = 313U,
        SAPP_KEYCODE_F25 = 314U,
        SAPP_KEYCODE_KP_0 = 320U,
        SAPP_KEYCODE_KP_1 = 321U,
        SAPP_KEYCODE_KP_2 = 322U,
        SAPP_KEYCODE_KP_3 = 323U,
        SAPP_KEYCODE_KP_4 = 324U,
        SAPP_KEYCODE_KP_5 = 325U,
        SAPP_KEYCODE_KP_6 = 326U,
        SAPP_KEYCODE_KP_7 = 327U,
        SAPP_KEYCODE_KP_8 = 328U,
        SAPP_KEYCODE_KP_9 = 329U,
        SAPP_KEYCODE_KP_DECIMAL = 330U,
        SAPP_KEYCODE_KP_DIVIDE = 331U,
        SAPP_KEYCODE_KP_MULTIPLY = 332U,
        SAPP_KEYCODE_KP_SUBTRACT = 333U,
        SAPP_KEYCODE_KP_ADD = 334U,
        SAPP_KEYCODE_KP_ENTER = 335U,
        SAPP_KEYCODE_KP_EQUAL = 336U,
        SAPP_KEYCODE_LEFT_SHIFT = 340U,
        SAPP_KEYCODE_LEFT_CONTROL = 341U,
        SAPP_KEYCODE_LEFT_ALT = 342U,
        SAPP_KEYCODE_LEFT_SUPER = 343U,
        SAPP_KEYCODE_RIGHT_SHIFT = 344U,
        SAPP_KEYCODE_RIGHT_CONTROL = 345U,
        SAPP_KEYCODE_RIGHT_ALT = 346U,
        SAPP_KEYCODE_RIGHT_SUPER = 347U,
        SAPP_KEYCODE_MENU = 348U
    }

    // Enum @ sokol_app.h:1219
    public enum sapp_mousebutton : uint
    {
        SAPP_MOUSEBUTTON_LEFT = 0U,
        SAPP_MOUSEBUTTON_RIGHT = 1U,
        SAPP_MOUSEBUTTON_MIDDLE = 2U,
        SAPP_MOUSEBUTTON_INVALID = 256U
    }

    // Enum @ sokol_app.h:1378
    public enum sapp_html5_fetch_error : uint
    {
        SAPP_HTML5_FETCH_ERROR_NO_ERROR = 0U,
        SAPP_HTML5_FETCH_ERROR_BUFFER_TOO_SMALL = 1U,
        SAPP_HTML5_FETCH_ERROR_OTHER = 2U
    }

    // Enum @ sokol_gfx.h:702
    public enum sg_backend : uint
    {
        SG_BACKEND_GLCORE33 = 0U,
        SG_BACKEND_GLES2 = 1U,
        SG_BACKEND_GLES3 = 2U,
        SG_BACKEND_D3D11 = 3U,
        SG_BACKEND_METAL_IOS = 4U,
        SG_BACKEND_METAL_MACOS = 5U,
        SG_BACKEND_METAL_SIMULATOR = 6U,
        SG_BACKEND_WGPU = 7U,
        SG_BACKEND_DUMMY = 8U
    }

    // Enum @ sokol_gfx.h:828
    public enum sg_pixel_format : uint
    {
        _SG_PIXELFORMAT_DEFAULT = 0U,
        SG_PIXELFORMAT_NONE = 1U,
        SG_PIXELFORMAT_R8 = 2U,
        SG_PIXELFORMAT_R8SN = 3U,
        SG_PIXELFORMAT_R8UI = 4U,
        SG_PIXELFORMAT_R8SI = 5U,
        SG_PIXELFORMAT_R16 = 6U,
        SG_PIXELFORMAT_R16SN = 7U,
        SG_PIXELFORMAT_R16UI = 8U,
        SG_PIXELFORMAT_R16SI = 9U,
        SG_PIXELFORMAT_R16F = 10U,
        SG_PIXELFORMAT_RG8 = 11U,
        SG_PIXELFORMAT_RG8SN = 12U,
        SG_PIXELFORMAT_RG8UI = 13U,
        SG_PIXELFORMAT_RG8SI = 14U,
        SG_PIXELFORMAT_R32UI = 15U,
        SG_PIXELFORMAT_R32SI = 16U,
        SG_PIXELFORMAT_R32F = 17U,
        SG_PIXELFORMAT_RG16 = 18U,
        SG_PIXELFORMAT_RG16SN = 19U,
        SG_PIXELFORMAT_RG16UI = 20U,
        SG_PIXELFORMAT_RG16SI = 21U,
        SG_PIXELFORMAT_RG16F = 22U,
        SG_PIXELFORMAT_RGBA8 = 23U,
        SG_PIXELFORMAT_RGBA8SN = 24U,
        SG_PIXELFORMAT_RGBA8UI = 25U,
        SG_PIXELFORMAT_RGBA8SI = 26U,
        SG_PIXELFORMAT_BGRA8 = 27U,
        SG_PIXELFORMAT_RGB10A2 = 28U,
        SG_PIXELFORMAT_RG11B10F = 29U,
        SG_PIXELFORMAT_RG32UI = 30U,
        SG_PIXELFORMAT_RG32SI = 31U,
        SG_PIXELFORMAT_RG32F = 32U,
        SG_PIXELFORMAT_RGBA16 = 33U,
        SG_PIXELFORMAT_RGBA16SN = 34U,
        SG_PIXELFORMAT_RGBA16UI = 35U,
        SG_PIXELFORMAT_RGBA16SI = 36U,
        SG_PIXELFORMAT_RGBA16F = 37U,
        SG_PIXELFORMAT_RGBA32UI = 38U,
        SG_PIXELFORMAT_RGBA32SI = 39U,
        SG_PIXELFORMAT_RGBA32F = 40U,
        SG_PIXELFORMAT_DEPTH = 41U,
        SG_PIXELFORMAT_DEPTH_STENCIL = 42U,
        SG_PIXELFORMAT_BC1_RGBA = 43U,
        SG_PIXELFORMAT_BC2_RGBA = 44U,
        SG_PIXELFORMAT_BC3_RGBA = 45U,
        SG_PIXELFORMAT_BC4_R = 46U,
        SG_PIXELFORMAT_BC4_RSN = 47U,
        SG_PIXELFORMAT_BC5_RG = 48U,
        SG_PIXELFORMAT_BC5_RGSN = 49U,
        SG_PIXELFORMAT_BC6H_RGBF = 50U,
        SG_PIXELFORMAT_BC6H_RGBUF = 51U,
        SG_PIXELFORMAT_BC7_RGBA = 52U,
        SG_PIXELFORMAT_PVRTC_RGB_2BPP = 53U,
        SG_PIXELFORMAT_PVRTC_RGB_4BPP = 54U,
        SG_PIXELFORMAT_PVRTC_RGBA_2BPP = 55U,
        SG_PIXELFORMAT_PVRTC_RGBA_4BPP = 56U,
        SG_PIXELFORMAT_ETC2_RGB8 = 57U,
        SG_PIXELFORMAT_ETC2_RGB8A1 = 58U,
        SG_PIXELFORMAT_ETC2_RGBA8 = 59U,
        SG_PIXELFORMAT_ETC2_RG11 = 60U,
        SG_PIXELFORMAT_ETC2_RG11SN = 61U,
        _SG_PIXELFORMAT_NUM = 62U,
        _SG_PIXELFORMAT_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:902
    public enum sg_resource_state : uint
    {
        SG_RESOURCESTATE_INITIAL = 0U,
        SG_RESOURCESTATE_ALLOC = 1U,
        SG_RESOURCESTATE_VALID = 2U,
        SG_RESOURCESTATE_FAILED = 3U,
        SG_RESOURCESTATE_INVALID = 4U,
        _SG_RESOURCESTATE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:945
    public enum sg_usage : uint
    {
        _SG_USAGE_DEFAULT = 0U,
        SG_USAGE_IMMUTABLE = 1U,
        SG_USAGE_DYNAMIC = 2U,
        SG_USAGE_STREAM = 3U,
        _SG_USAGE_NUM = 4U,
        _SG_USAGE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:961
    public enum sg_buffer_type : uint
    {
        _SG_BUFFERTYPE_DEFAULT = 0U,
        SG_BUFFERTYPE_VERTEXBUFFER = 1U,
        SG_BUFFERTYPE_INDEXBUFFER = 2U,
        _SG_BUFFERTYPE_NUM = 3U,
        _SG_BUFFERTYPE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:980
    public enum sg_index_type : uint
    {
        _SG_INDEXTYPE_DEFAULT = 0U,
        SG_INDEXTYPE_NONE = 1U,
        SG_INDEXTYPE_UINT16 = 2U,
        SG_INDEXTYPE_UINT32 = 3U,
        _SG_INDEXTYPE_NUM = 4U,
        _SG_INDEXTYPE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1002
    public enum sg_image_type : uint
    {
        _SG_IMAGETYPE_DEFAULT = 0U,
        SG_IMAGETYPE_2D = 1U,
        SG_IMAGETYPE_CUBE = 2U,
        SG_IMAGETYPE_3D = 3U,
        SG_IMAGETYPE_ARRAY = 4U,
        _SG_IMAGETYPE_NUM = 5U,
        _SG_IMAGETYPE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1019
    public enum sg_sampler_type : uint
    {
        _SG_SAMPLERTYPE_DEFAULT = 0U,
        SG_SAMPLERTYPE_FLOAT = 1U,
        SG_SAMPLERTYPE_SINT = 2U,
        SG_SAMPLERTYPE_UINT = 3U
    }

    // Enum @ sokol_gfx.h:1053
    public enum sg_shader_stage : uint
    {
        SG_SHADERSTAGE_VS = 0U,
        SG_SHADERSTAGE_FS = 1U,
        _SG_SHADERSTAGE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1073
    public enum sg_primitive_type : uint
    {
        _SG_PRIMITIVETYPE_DEFAULT = 0U,
        SG_PRIMITIVETYPE_POINTS = 1U,
        SG_PRIMITIVETYPE_LINES = 2U,
        SG_PRIMITIVETYPE_LINE_STRIP = 3U,
        SG_PRIMITIVETYPE_TRIANGLES = 4U,
        SG_PRIMITIVETYPE_TRIANGLE_STRIP = 5U,
        _SG_PRIMITIVETYPE_NUM = 6U,
        _SG_PRIMITIVETYPE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1094
    public enum sg_filter : uint
    {
        _SG_FILTER_DEFAULT = 0U,
        SG_FILTER_NEAREST = 1U,
        SG_FILTER_LINEAR = 2U,
        SG_FILTER_NEAREST_MIPMAP_NEAREST = 3U,
        SG_FILTER_NEAREST_MIPMAP_LINEAR = 4U,
        SG_FILTER_LINEAR_MIPMAP_NEAREST = 5U,
        SG_FILTER_LINEAR_MIPMAP_LINEAR = 6U,
        _SG_FILTER_NUM = 7U,
        _SG_FILTER_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1132
    public enum sg_wrap : uint
    {
        _SG_WRAP_DEFAULT = 0U,
        SG_WRAP_REPEAT = 1U,
        SG_WRAP_CLAMP_TO_EDGE = 2U,
        SG_WRAP_CLAMP_TO_BORDER = 3U,
        SG_WRAP_MIRRORED_REPEAT = 4U,
        _SG_WRAP_NUM = 5U,
        _SG_WRAP_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1149
    public enum sg_border_color : uint
    {
        _SG_BORDERCOLOR_DEFAULT = 0U,
        SG_BORDERCOLOR_TRANSPARENT_BLACK = 1U,
        SG_BORDERCOLOR_OPAQUE_BLACK = 2U,
        SG_BORDERCOLOR_OPAQUE_WHITE = 3U,
        _SG_BORDERCOLOR_NUM = 4U,
        _SG_BORDERCOLOR_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1176
    public enum sg_vertex_format : uint
    {
        SG_VERTEXFORMAT_INVALID = 0U,
        SG_VERTEXFORMAT_FLOAT = 1U,
        SG_VERTEXFORMAT_FLOAT2 = 2U,
        SG_VERTEXFORMAT_FLOAT3 = 3U,
        SG_VERTEXFORMAT_FLOAT4 = 4U,
        SG_VERTEXFORMAT_BYTE4 = 5U,
        SG_VERTEXFORMAT_BYTE4N = 6U,
        SG_VERTEXFORMAT_UBYTE4 = 7U,
        SG_VERTEXFORMAT_UBYTE4N = 8U,
        SG_VERTEXFORMAT_SHORT2 = 9U,
        SG_VERTEXFORMAT_SHORT2N = 10U,
        SG_VERTEXFORMAT_USHORT2N = 11U,
        SG_VERTEXFORMAT_SHORT4 = 12U,
        SG_VERTEXFORMAT_SHORT4N = 13U,
        SG_VERTEXFORMAT_USHORT4N = 14U,
        SG_VERTEXFORMAT_UINT10_N2 = 15U,
        _SG_VERTEXFORMAT_NUM = 16U,
        _SG_VERTEXFORMAT_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1195
    public enum sg_vertex_step : uint
    {
        _SG_VERTEXSTEP_DEFAULT = 0U,
        SG_VERTEXSTEP_PER_VERTEX = 1U,
        SG_VERTEXSTEP_PER_INSTANCE = 2U,
        _SG_VERTEXSTEP_NUM = 3U,
        _SG_VERTEXSTEP_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1213
    public enum sg_uniform_type : uint
    {
        SG_UNIFORMTYPE_INVALID = 0U,
        SG_UNIFORMTYPE_FLOAT = 1U,
        SG_UNIFORMTYPE_FLOAT2 = 2U,
        SG_UNIFORMTYPE_FLOAT3 = 3U,
        SG_UNIFORMTYPE_FLOAT4 = 4U,
        SG_UNIFORMTYPE_MAT4 = 5U,
        _SG_UNIFORMTYPE_NUM = 6U,
        _SG_UNIFORMTYPE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1231
    public enum sg_cull_mode : uint
    {
        _SG_CULLMODE_DEFAULT = 0U,
        SG_CULLMODE_NONE = 1U,
        SG_CULLMODE_FRONT = 2U,
        SG_CULLMODE_BACK = 3U,
        _SG_CULLMODE_NUM = 4U,
        _SG_CULLMODE_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1248
    public enum sg_face_winding : uint
    {
        _SG_FACEWINDING_DEFAULT = 0U,
        SG_FACEWINDING_CCW = 1U,
        SG_FACEWINDING_CW = 2U,
        _SG_FACEWINDING_NUM = 3U,
        _SG_FACEWINDING_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1278
    public enum sg_compare_func : uint
    {
        _SG_COMPAREFUNC_DEFAULT = 0U,
        SG_COMPAREFUNC_NEVER = 1U,
        SG_COMPAREFUNC_LESS = 2U,
        SG_COMPAREFUNC_EQUAL = 3U,
        SG_COMPAREFUNC_LESS_EQUAL = 4U,
        SG_COMPAREFUNC_GREATER = 5U,
        SG_COMPAREFUNC_NOT_EQUAL = 6U,
        SG_COMPAREFUNC_GREATER_EQUAL = 7U,
        SG_COMPAREFUNC_ALWAYS = 8U,
        _SG_COMPAREFUNC_NUM = 9U,
        _SG_COMPAREFUNC_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1312
    public enum sg_stencil_op : uint
    {
        _SG_STENCILOP_DEFAULT = 0U,
        SG_STENCILOP_KEEP = 1U,
        SG_STENCILOP_ZERO = 2U,
        SG_STENCILOP_REPLACE = 3U,
        SG_STENCILOP_INCR_CLAMP = 4U,
        SG_STENCILOP_DECR_CLAMP = 5U,
        SG_STENCILOP_INVERT = 6U,
        SG_STENCILOP_INCR_WRAP = 7U,
        SG_STENCILOP_DECR_WRAP = 8U,
        _SG_STENCILOP_NUM = 9U,
        _SG_STENCILOP_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1350
    public enum sg_blend_factor : uint
    {
        _SG_BLENDFACTOR_DEFAULT = 0U,
        SG_BLENDFACTOR_ZERO = 1U,
        SG_BLENDFACTOR_ONE = 2U,
        SG_BLENDFACTOR_SRC_COLOR = 3U,
        SG_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4U,
        SG_BLENDFACTOR_SRC_ALPHA = 5U,
        SG_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6U,
        SG_BLENDFACTOR_DST_COLOR = 7U,
        SG_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8U,
        SG_BLENDFACTOR_DST_ALPHA = 9U,
        SG_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10U,
        SG_BLENDFACTOR_SRC_ALPHA_SATURATED = 11U,
        SG_BLENDFACTOR_BLEND_COLOR = 12U,
        SG_BLENDFACTOR_ONE_MINUS_BLEND_COLOR = 13U,
        SG_BLENDFACTOR_BLEND_ALPHA = 14U,
        SG_BLENDFACTOR_ONE_MINUS_BLEND_ALPHA = 15U,
        _SG_BLENDFACTOR_NUM = 16U,
        _SG_BLENDFACTOR_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1374
    public enum sg_blend_op : uint
    {
        _SG_BLENDOP_DEFAULT = 0U,
        SG_BLENDOP_ADD = 1U,
        SG_BLENDOP_SUBTRACT = 2U,
        SG_BLENDOP_REVERSE_SUBTRACT = 3U,
        _SG_BLENDOP_NUM = 4U,
        _SG_BLENDOP_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1408
    public enum sg_color_mask : uint
    {
        _SG_COLORMASK_DEFAULT = 0U,
        SG_COLORMASK_NONE = 16U,
        SG_COLORMASK_R = 1U,
        SG_COLORMASK_G = 2U,
        SG_COLORMASK_RG = 3U,
        SG_COLORMASK_B = 4U,
        SG_COLORMASK_RB = 5U,
        SG_COLORMASK_GB = 6U,
        SG_COLORMASK_RGB = 7U,
        SG_COLORMASK_A = 8U,
        SG_COLORMASK_RA = 9U,
        SG_COLORMASK_GA = 10U,
        SG_COLORMASK_RGA = 11U,
        SG_COLORMASK_BA = 12U,
        SG_COLORMASK_RBA = 13U,
        SG_COLORMASK_GBA = 14U,
        SG_COLORMASK_RGBA = 15U,
        _SG_COLORMASK_FORCE_U32 = 2147483647U
    }

    // Enum @ sokol_gfx.h:1435
    public enum sg_action : uint
    {
        _SG_ACTION_DEFAULT = 0U,
        SG_ACTION_CLEAR = 1U,
        SG_ACTION_LOAD = 2U,
        SG_ACTION_DONTCARE = 3U,
        _SG_ACTION_NUM = 4U,
        _SG_ACTION_FORCE_U32 = 2147483647U
    }
}
