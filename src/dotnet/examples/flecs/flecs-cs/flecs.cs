
//-------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the following tool:
//        https://github.com/lithiumtoast/c2cs
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ReSharper disable All
//-------------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

#nullable enable

public static unsafe partial class flecs
{
    private const string LibraryName = "flecs";
    private static IntPtr _libraryHandle;

    public static void LoadApi(string? libraryFilePath = null)
    {
        UnloadApi();
        if (libraryFilePath == null)
        {
            var libraryFileNamePrefix = NativeTools.LibraryFileNamePrefix;
            var libraryFileNameExtension = NativeTools.LibraryFileNameExtension;
            libraryFilePath = $@"{libraryFileNamePrefix}{LibraryName}{libraryFileNameExtension}";
        }
        _libraryHandle = NativeTools.LibraryLoad(libraryFilePath);
        if (_libraryHandle == IntPtr.Zero)
            throw new Exception($"Failed to load library: {libraryFilePath}");
        LoadExports();
    }

    public static void UnloadApi()
    {
        if (_libraryHandle == IntPtr.Zero)
            return;
        UnloadExports();
        NativeTools.LibraryUnload(_libraryHandle);
    }

    private static void LoadExports()
    {
        _ecs_os_api_malloc_count = NativeTools.LibraryGetExport(_libraryHandle, "ecs_os_api_malloc_count");
        _ecs_os_api_realloc_count = NativeTools.LibraryGetExport(_libraryHandle, "ecs_os_api_realloc_count");
        _ecs_os_api_calloc_count = NativeTools.LibraryGetExport(_libraryHandle, "ecs_os_api_calloc_count");
        _ecs_os_api_free_count = NativeTools.LibraryGetExport(_libraryHandle, "ecs_os_api_free_count");
        _ecs_os_api = NativeTools.LibraryGetExport(_libraryHandle, "ecs_os_api");
        _FLECS__TEcsComponent = NativeTools.LibraryGetExport(_libraryHandle, "FLECS__TEcsComponent");
        _FLECS__TEcsComponentLifecycle = NativeTools.LibraryGetExport(_libraryHandle, "FLECS__TEcsComponentLifecycle");
        _FLECS__TEcsType = NativeTools.LibraryGetExport(_libraryHandle, "FLECS__TEcsType");
        _FLECS__TEcsName = NativeTools.LibraryGetExport(_libraryHandle, "FLECS__TEcsName");
        _ECS_CASE = NativeTools.LibraryGetExport(_libraryHandle, "ECS_CASE");
        _ECS_SWITCH = NativeTools.LibraryGetExport(_libraryHandle, "ECS_SWITCH");
        _ECS_PAIR = NativeTools.LibraryGetExport(_libraryHandle, "ECS_PAIR");
        _ECS_OWNED = NativeTools.LibraryGetExport(_libraryHandle, "ECS_OWNED");
        _ECS_DISABLED = NativeTools.LibraryGetExport(_libraryHandle, "ECS_DISABLED");
        _EcsFlecs = NativeTools.LibraryGetExport(_libraryHandle, "EcsFlecs");
        _EcsFlecsCore = NativeTools.LibraryGetExport(_libraryHandle, "EcsFlecsCore");
        _EcsWorld = NativeTools.LibraryGetExport(_libraryHandle, "EcsWorld");
        _EcsWildcard = NativeTools.LibraryGetExport(_libraryHandle, "EcsWildcard");
        _EcsThis = NativeTools.LibraryGetExport(_libraryHandle, "EcsThis");
        _EcsTransitive = NativeTools.LibraryGetExport(_libraryHandle, "EcsTransitive");
        _EcsFinal = NativeTools.LibraryGetExport(_libraryHandle, "EcsFinal");
        _EcsChildOf = NativeTools.LibraryGetExport(_libraryHandle, "EcsChildOf");
        _EcsIsA = NativeTools.LibraryGetExport(_libraryHandle, "EcsIsA");
        _EcsModule = NativeTools.LibraryGetExport(_libraryHandle, "EcsModule");
        _EcsPrefab = NativeTools.LibraryGetExport(_libraryHandle, "EcsPrefab");
        _EcsDisabled = NativeTools.LibraryGetExport(_libraryHandle, "EcsDisabled");
        _EcsHidden = NativeTools.LibraryGetExport(_libraryHandle, "EcsHidden");
        _EcsOnAdd = NativeTools.LibraryGetExport(_libraryHandle, "EcsOnAdd");
        _EcsOnRemove = NativeTools.LibraryGetExport(_libraryHandle, "EcsOnRemove");
        _EcsOnSet = NativeTools.LibraryGetExport(_libraryHandle, "EcsOnSet");
        _EcsUnSet = NativeTools.LibraryGetExport(_libraryHandle, "EcsUnSet");
        _EcsOnDelete = NativeTools.LibraryGetExport(_libraryHandle, "EcsOnDelete");
        _EcsOnDeleteObject = NativeTools.LibraryGetExport(_libraryHandle, "EcsOnDeleteObject");
        _EcsRemove = NativeTools.LibraryGetExport(_libraryHandle, "EcsRemove");
        _EcsDelete = NativeTools.LibraryGetExport(_libraryHandle, "EcsDelete");
        _EcsThrow = NativeTools.LibraryGetExport(_libraryHandle, "EcsThrow");
        _EcsOnDemand = NativeTools.LibraryGetExport(_libraryHandle, "EcsOnDemand");
        _EcsMonitor = NativeTools.LibraryGetExport(_libraryHandle, "EcsMonitor");
        _EcsDisabledIntern = NativeTools.LibraryGetExport(_libraryHandle, "EcsDisabledIntern");
        _EcsInactive = NativeTools.LibraryGetExport(_libraryHandle, "EcsInactive");
        _EcsPipeline = NativeTools.LibraryGetExport(_libraryHandle, "EcsPipeline");
        _EcsPreFrame = NativeTools.LibraryGetExport(_libraryHandle, "EcsPreFrame");
        _EcsOnLoad = NativeTools.LibraryGetExport(_libraryHandle, "EcsOnLoad");
        _EcsPostLoad = NativeTools.LibraryGetExport(_libraryHandle, "EcsPostLoad");
        _EcsPreUpdate = NativeTools.LibraryGetExport(_libraryHandle, "EcsPreUpdate");
        _EcsOnUpdate = NativeTools.LibraryGetExport(_libraryHandle, "EcsOnUpdate");
        _EcsOnValidate = NativeTools.LibraryGetExport(_libraryHandle, "EcsOnValidate");
        _EcsPostUpdate = NativeTools.LibraryGetExport(_libraryHandle, "EcsPostUpdate");
        _EcsPreStore = NativeTools.LibraryGetExport(_libraryHandle, "EcsPreStore");
        _EcsOnStore = NativeTools.LibraryGetExport(_libraryHandle, "EcsOnStore");
        _EcsPostFrame = NativeTools.LibraryGetExport(_libraryHandle, "EcsPostFrame");
        _FLECS__TEcsSystem = NativeTools.LibraryGetExport(_libraryHandle, "FLECS__TEcsSystem");
        _FLECS__TEcsTickSource = NativeTools.LibraryGetExport(_libraryHandle, "FLECS__TEcsTickSource");
        _FLECS__TEcsTimer = NativeTools.LibraryGetExport(_libraryHandle, "FLECS__TEcsTimer");
        _FLECS__TEcsRateFilter = NativeTools.LibraryGetExport(_libraryHandle, "FLECS__TEcsRateFilter");
    }

    private static void UnloadExports()
    {
        _ecs_os_api_malloc_count = IntPtr.Zero;
        _ecs_os_api_realloc_count = IntPtr.Zero;
        _ecs_os_api_calloc_count = IntPtr.Zero;
        _ecs_os_api_free_count = IntPtr.Zero;
        _ecs_os_api = IntPtr.Zero;
        _FLECS__TEcsComponent = IntPtr.Zero;
        _FLECS__TEcsComponentLifecycle = IntPtr.Zero;
        _FLECS__TEcsType = IntPtr.Zero;
        _FLECS__TEcsName = IntPtr.Zero;
        _ECS_CASE = IntPtr.Zero;
        _ECS_SWITCH = IntPtr.Zero;
        _ECS_PAIR = IntPtr.Zero;
        _ECS_OWNED = IntPtr.Zero;
        _ECS_DISABLED = IntPtr.Zero;
        _EcsFlecs = IntPtr.Zero;
        _EcsFlecsCore = IntPtr.Zero;
        _EcsWorld = IntPtr.Zero;
        _EcsWildcard = IntPtr.Zero;
        _EcsThis = IntPtr.Zero;
        _EcsTransitive = IntPtr.Zero;
        _EcsFinal = IntPtr.Zero;
        _EcsChildOf = IntPtr.Zero;
        _EcsIsA = IntPtr.Zero;
        _EcsModule = IntPtr.Zero;
        _EcsPrefab = IntPtr.Zero;
        _EcsDisabled = IntPtr.Zero;
        _EcsHidden = IntPtr.Zero;
        _EcsOnAdd = IntPtr.Zero;
        _EcsOnRemove = IntPtr.Zero;
        _EcsOnSet = IntPtr.Zero;
        _EcsUnSet = IntPtr.Zero;
        _EcsOnDelete = IntPtr.Zero;
        _EcsOnDeleteObject = IntPtr.Zero;
        _EcsRemove = IntPtr.Zero;
        _EcsDelete = IntPtr.Zero;
        _EcsThrow = IntPtr.Zero;
        _EcsOnDemand = IntPtr.Zero;
        _EcsMonitor = IntPtr.Zero;
        _EcsDisabledIntern = IntPtr.Zero;
        _EcsInactive = IntPtr.Zero;
        _EcsPipeline = IntPtr.Zero;
        _EcsPreFrame = IntPtr.Zero;
        _EcsOnLoad = IntPtr.Zero;
        _EcsPostLoad = IntPtr.Zero;
        _EcsPreUpdate = IntPtr.Zero;
        _EcsOnUpdate = IntPtr.Zero;
        _EcsOnValidate = IntPtr.Zero;
        _EcsPostUpdate = IntPtr.Zero;
        _EcsPreStore = IntPtr.Zero;
        _EcsOnStore = IntPtr.Zero;
        _EcsPostFrame = IntPtr.Zero;
        _FLECS__TEcsSystem = IntPtr.Zero;
        _FLECS__TEcsTickSource = IntPtr.Zero;
        _FLECS__TEcsTimer = IntPtr.Zero;
        _FLECS__TEcsRateFilter = IntPtr.Zero;
    }

    // FunctionExtern @ api_support.h:52
    [DllImport(LibraryName, EntryPoint = "ecs_new_module", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_new_module(ecs_world_t* world, ecs_entity_t e, sbyte* name, ulong size, ulong alignment);

    // FunctionExtern @ api_support.h:60
    [DllImport(LibraryName, EntryPoint = "ecs_module_path_from_c", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte* ecs_module_path_from_c(sbyte* c_name);

    // FunctionExtern @ api_support.h:64
    [DllImport(LibraryName, EntryPoint = "ecs_component_has_actions", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_component_has_actions(ecs_world_t* world, ecs_entity_t component);

    // FunctionExtern @ api_support.h:72
    [DllImport(LibraryName, EntryPoint = "ecs_identifier_is_0", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_identifier_is_0(sbyte* id);

    // FunctionExtern @ api_support.h:75
    [DllImport(LibraryName, EntryPoint = "ecs_identifier_is_var", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_identifier_is_var(sbyte* id);

    // FunctionExtern @ api_support.h:80
    [DllImport(LibraryName, EntryPoint = "ecs_query_get_filter", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_filter_t* ecs_query_get_filter(ecs_query_t* query);

    // FunctionExtern @ bulk.h:24
    [DllImport(LibraryName, EntryPoint = "ecs_bulk_add_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_bulk_add_entity(ecs_world_t* world, ecs_entity_t entity_add, ecs_filter_t* filter);

    // FunctionExtern @ bulk.h:38
    [DllImport(LibraryName, EntryPoint = "ecs_bulk_add_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_bulk_add_type(ecs_world_t* world, ecs_type_t type, ecs_filter_t* filter);

    // FunctionExtern @ bulk.h:63
    [DllImport(LibraryName, EntryPoint = "ecs_bulk_remove_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_bulk_remove_entity(ecs_world_t* world, ecs_entity_t entity_remove, ecs_filter_t* filter);

    // FunctionExtern @ bulk.h:77
    [DllImport(LibraryName, EntryPoint = "ecs_bulk_remove_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_bulk_remove_type(ecs_world_t* world, ecs_type_t type, ecs_filter_t* filter);

    // FunctionExtern @ bulk.h:102
    [DllImport(LibraryName, EntryPoint = "ecs_bulk_add_remove_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_bulk_add_remove_type(ecs_world_t* world, ecs_type_t to_add, ecs_type_t to_remove, ecs_filter_t* filter);

    // FunctionExtern @ bulk.h:127
    [DllImport(LibraryName, EntryPoint = "ecs_bulk_delete", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_bulk_delete(ecs_world_t* world, ecs_filter_t* filter);

    // FunctionExtern @ dbg.h:38
    [DllImport(LibraryName, EntryPoint = "ecs_dbg_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_dbg_entity(ecs_world_t* world, ecs_entity_t entity, ecs_dbg_entity_t* dbg_out);

    // FunctionExtern @ dbg.h:44
    [DllImport(LibraryName, EntryPoint = "ecs_dbg_find_table", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_table_t* ecs_dbg_find_table(ecs_world_t* world, ecs_type_t type);

    // FunctionExtern @ dbg.h:49
    [DllImport(LibraryName, EntryPoint = "ecs_dbg_get_table", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_table_t* ecs_dbg_get_table(ecs_world_t* world, int index);

    // FunctionExtern @ dbg.h:54
    [DllImport(LibraryName, EntryPoint = "ecs_dbg_filter_table", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_dbg_filter_table(ecs_world_t* world, ecs_table_t* table, ecs_filter_t* filter);

    // FunctionExtern @ dbg.h:60
    [DllImport(LibraryName, EntryPoint = "ecs_dbg_table", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_dbg_table(ecs_world_t* world, ecs_table_t* table, ecs_dbg_table_t* dbg_out);

    // FunctionExtern @ deprecated.h:208
    [DllImport(LibraryName, EntryPoint = "ecs_dim_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_dim_type(ecs_world_t* world, ecs_type_t type, int entity_count);

    // FunctionExtern @ deprecated.h:215
    [DllImport(LibraryName, EntryPoint = "ecs_new_w_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_new_w_type(ecs_world_t* world, ecs_type_t type);

    // FunctionExtern @ deprecated.h:221
    [DllImport(LibraryName, EntryPoint = "ecs_bulk_new_w_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t* ecs_bulk_new_w_type(ecs_world_t* world, ecs_type_t type, int count);

    // FunctionExtern @ deprecated.h:228
    [DllImport(LibraryName, EntryPoint = "ecs_add_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_add_type(ecs_world_t* world, ecs_entity_t entity, ecs_type_t type);

    // FunctionExtern @ deprecated.h:235
    [DllImport(LibraryName, EntryPoint = "ecs_remove_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_remove_type(ecs_world_t* world, ecs_entity_t entity, ecs_type_t type);

    // FunctionExtern @ deprecated.h:242
    [DllImport(LibraryName, EntryPoint = "ecs_add_remove_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_add_remove_type(ecs_world_t* world, ecs_entity_t entity, ecs_type_t to_add, ecs_type_t to_remove);

    // FunctionExtern @ deprecated.h:250
    [DllImport(LibraryName, EntryPoint = "ecs_has_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_has_type(ecs_world_t* world, ecs_entity_t entity, ecs_type_t type);

    // FunctionExtern @ deprecated.h:257
    [DllImport(LibraryName, EntryPoint = "ecs_count_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_count_type(ecs_world_t* world, ecs_type_t type);

    // FunctionExtern @ deprecated.h:263
    [DllImport(LibraryName, EntryPoint = "ecs_count_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_count_entity(ecs_world_t* world, ecs_id_t entity);

    // FunctionExtern @ deprecated.h:269
    [DllImport(LibraryName, EntryPoint = "ecs_count_w_filter", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_count_w_filter(ecs_world_t* world, ecs_filter_t* filter);

    // FunctionExtern @ deprecated.h:275
    [DllImport(LibraryName, EntryPoint = "ecs_set_component_actions_w_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_set_component_actions_w_entity(ecs_world_t* world, ecs_id_t id, EcsComponentLifecycle* actions);

    // FunctionExtern @ deprecated.h:282
    [DllImport(LibraryName, EntryPoint = "ecs_new_w_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_new_w_entity(ecs_world_t* world, ecs_id_t id);

    // FunctionExtern @ deprecated.h:288
    [DllImport(LibraryName, EntryPoint = "ecs_bulk_new_w_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t* ecs_bulk_new_w_entity(ecs_world_t* world, ecs_id_t id, int count);

    // FunctionExtern @ deprecated.h:295
    [DllImport(LibraryName, EntryPoint = "ecs_enable_component_w_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_enable_component_w_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, CBool enable);

    // FunctionExtern @ deprecated.h:303
    [DllImport(LibraryName, EntryPoint = "ecs_is_component_enabled_w_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_is_component_enabled_w_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // FunctionExtern @ deprecated.h:310
    [DllImport(LibraryName, EntryPoint = "ecs_get_w_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_get_w_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // FunctionExtern @ deprecated.h:317
    [DllImport(LibraryName, EntryPoint = "ecs_get_w_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_get_w_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // FunctionExtern @ deprecated.h:324
    [DllImport(LibraryName, EntryPoint = "ecs_get_ref_w_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_get_ref_w_entity(ecs_world_t* world, ecs_ref_t* @ref, ecs_entity_t entity, ecs_id_t id);

    // FunctionExtern @ deprecated.h:332
    [DllImport(LibraryName, EntryPoint = "ecs_get_mut_w_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_get_mut_w_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, bool* is_added);

    // FunctionExtern @ deprecated.h:340
    [DllImport(LibraryName, EntryPoint = "ecs_modified_w_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_modified_w_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // FunctionExtern @ deprecated.h:347
    [DllImport(LibraryName, EntryPoint = "ecs_set_ptr_w_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_set_ptr_w_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, ulong size, void* ptr);

    // FunctionExtern @ deprecated.h:356
    [DllImport(LibraryName, EntryPoint = "ecs_has_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_has_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // FunctionExtern @ deprecated.h:363
    [DllImport(LibraryName, EntryPoint = "ecs_entity_str", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong ecs_entity_str(ecs_world_t* world, ecs_id_t entity, sbyte* buffer, ulong buffer_len);

    // FunctionExtern @ deprecated.h:371
    [DllImport(LibraryName, EntryPoint = "ecs_get_parent_w_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_get_parent_w_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // FunctionExtern @ deprecated.h:381
    [DllImport(LibraryName, EntryPoint = "ecs_get_thread_index", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_get_thread_index(ecs_world_t* world);

    // FunctionExtern @ deprecated.h:386
    [DllImport(LibraryName, EntryPoint = "ecs_add_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_add_entity(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t entity_add);

    // FunctionExtern @ deprecated.h:393
    [DllImport(LibraryName, EntryPoint = "ecs_remove_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_remove_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // FunctionExtern @ deprecated.h:400
    [DllImport(LibraryName, EntryPoint = "ecs_add_remove_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_add_remove_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id_add, ecs_id_t id_remove);

    // FunctionExtern @ deprecated.h:408
    [DllImport(LibraryName, EntryPoint = "ecs_type_from_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_type_t ecs_type_from_entity(ecs_world_t* world, ecs_entity_t entity);

    // FunctionExtern @ deprecated.h:414
    [DllImport(LibraryName, EntryPoint = "ecs_type_to_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_type_to_entity(ecs_world_t* world, ecs_type_t type);

    // FunctionExtern @ deprecated.h:420
    [DllImport(LibraryName, EntryPoint = "ecs_type_has_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_type_has_entity(ecs_world_t* world, ecs_type_t type, ecs_entity_t entity);

    // FunctionExtern @ deprecated.h:427
    [DllImport(LibraryName, EntryPoint = "ecs_type_owns_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_type_owns_entity(ecs_world_t* world, ecs_type_t type, ecs_entity_t entity, CBool owned);

    // FunctionExtern @ deprecated.h:435
    [DllImport(LibraryName, EntryPoint = "ecs_column_w_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_column_w_size(ecs_iter_t* it, ulong size, int column);

    // FunctionExtern @ deprecated.h:445
    [DllImport(LibraryName, EntryPoint = "ecs_column_index_from_name", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_column_index_from_name(ecs_iter_t* it, sbyte* name);

    // FunctionExtern @ deprecated.h:451
    [DllImport(LibraryName, EntryPoint = "ecs_element_w_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_element_w_size(ecs_iter_t* it, ulong size, int column, int row);

    // FunctionExtern @ deprecated.h:462
    [DllImport(LibraryName, EntryPoint = "ecs_column_source", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_column_source(ecs_iter_t* it, int column);

    // FunctionExtern @ deprecated.h:468
    [DllImport(LibraryName, EntryPoint = "ecs_column_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_column_entity(ecs_iter_t* it, int column);

    // FunctionExtern @ deprecated.h:474
    [DllImport(LibraryName, EntryPoint = "ecs_column_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_type_t ecs_column_type(ecs_iter_t* it, int column);

    // FunctionExtern @ deprecated.h:480
    [DllImport(LibraryName, EntryPoint = "ecs_column_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong ecs_column_size(ecs_iter_t* it, int column);

    // FunctionExtern @ deprecated.h:486
    [DllImport(LibraryName, EntryPoint = "ecs_is_readonly", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_is_readonly(ecs_iter_t* it, int column);

    // FunctionExtern @ deprecated.h:492
    [DllImport(LibraryName, EntryPoint = "ecs_is_owned", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_is_owned(ecs_iter_t* it, int column);

    // FunctionExtern @ deprecated.h:498
    [DllImport(LibraryName, EntryPoint = "ecs_table_column", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_table_column(ecs_iter_t* it, int column);

    // FunctionExtern @ deprecated.h:504
    [DllImport(LibraryName, EntryPoint = "ecs_table_column_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong ecs_table_column_size(ecs_iter_t* it, int column);

    // FunctionExtern @ deprecated.h:510
    [DllImport(LibraryName, EntryPoint = "ecs_table_component_index", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_table_component_index(ecs_iter_t* it, ecs_entity_t component);

    // FunctionExtern @ deprecated.h:516
    [DllImport(LibraryName, EntryPoint = "ecs_set_rate_filter", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_set_rate_filter(ecs_world_t* world, ecs_entity_t filter, int rate, ecs_entity_t source);

    // FunctionExtern @ deprecated.h:524
    [DllImport(LibraryName, EntryPoint = "ecs_query_new", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_query_t* ecs_query_new(ecs_world_t* world, sbyte* sig);

    // FunctionExtern @ deprecated.h:530
    [DllImport(LibraryName, EntryPoint = "ecs_subquery_new", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_query_t* ecs_subquery_new(ecs_world_t* world, ecs_query_t* parent, sbyte* sig);

    // FunctionExtern @ deprecated.h:537
    [DllImport(LibraryName, EntryPoint = "ecs_query_free", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_query_free(ecs_query_t* query);

    // FunctionExtern @ deprecated.h:542
    [DllImport(LibraryName, EntryPoint = "ecs_query_order_by", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_query_order_by(ecs_world_t* world, ecs_query_t* query, ecs_entity_t component, ecs_compare_action_t compare);

    // FunctionExtern @ deprecated.h:550
    [DllImport(LibraryName, EntryPoint = "ecs_query_group_by", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_query_group_by(ecs_world_t* world, ecs_query_t* query, ecs_entity_t component, ecs_rank_type_action_t rank_action);

    // FunctionExtern @ direct_access.h:34
    [DllImport(LibraryName, EntryPoint = "ecs_table_find_column", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_table_find_column(ecs_table_t* table, ecs_entity_t component);

    // FunctionExtern @ direct_access.h:50
    [DllImport(LibraryName, EntryPoint = "ecs_table_get_column", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_vector_t* ecs_table_get_column(ecs_table_t* table, int column);

    // FunctionExtern @ direct_access.h:83
    [DllImport(LibraryName, EntryPoint = "ecs_table_set_column", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_vector_t* ecs_table_set_column(ecs_world_t* world, ecs_table_t* table, int column, ecs_vector_t* vector);

    // FunctionExtern @ direct_access.h:98
    [DllImport(LibraryName, EntryPoint = "ecs_table_get_entities", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_vector_t* ecs_table_get_entities(ecs_table_t* table);

    // FunctionExtern @ direct_access.h:110
    [DllImport(LibraryName, EntryPoint = "ecs_table_get_records", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_vector_t* ecs_table_get_records(ecs_table_t* table);

    // FunctionExtern @ direct_access.h:121
    [DllImport(LibraryName, EntryPoint = "ecs_records_clear", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_records_clear(ecs_vector_t* records);

    // FunctionExtern @ direct_access.h:133
    [DllImport(LibraryName, EntryPoint = "ecs_records_update", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_records_update(ecs_world_t* world, ecs_vector_t* entities, ecs_vector_t* records, ecs_table_t* table);

    // FunctionExtern @ direct_access.h:158
    [DllImport(LibraryName, EntryPoint = "ecs_table_set_entities", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_table_set_entities(ecs_table_t* table, ecs_vector_t* entities, ecs_vector_t* records);

    // FunctionExtern @ direct_access.h:197
    [DllImport(LibraryName, EntryPoint = "ecs_table_delete_column", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_table_delete_column(ecs_world_t* world, ecs_table_t* table, int column, ecs_vector_t* vector);

    // FunctionExtern @ direct_access.h:223
    [DllImport(LibraryName, EntryPoint = "ecs_record_find", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_record_t* ecs_record_find(ecs_world_t* world, ecs_entity_t entity);

    // FunctionExtern @ direct_access.h:237
    [DllImport(LibraryName, EntryPoint = "ecs_record_ensure", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_record_t* ecs_record_ensure(ecs_world_t* world, ecs_entity_t entity);

    // FunctionExtern @ direct_access.h:249
    [DllImport(LibraryName, EntryPoint = "ecs_record_get_column", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_record_get_column(ecs_record_t* r, int column, ulong size);

    // FunctionExtern @ direct_access.h:271
    [DllImport(LibraryName, EntryPoint = "ecs_record_copy_to", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_record_copy_to(ecs_world_t* world, ecs_record_t* r, int column, ulong size, void* value, int count);

    // FunctionExtern @ direct_access.h:292
    [DllImport(LibraryName, EntryPoint = "ecs_record_copy_pod_to", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_record_copy_pod_to(ecs_world_t* world, ecs_record_t* r, int column, ulong size, void* value, int count);

    // FunctionExtern @ direct_access.h:313
    [DllImport(LibraryName, EntryPoint = "ecs_record_move_to", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_record_move_to(ecs_world_t* world, ecs_record_t* r, int column, ulong size, void* value, int count);

    // FunctionExtern @ flecs.h:886
    [DllImport(LibraryName, EntryPoint = "ecs_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_world_t* ecs_init();

    // FunctionExtern @ flecs.h:893
    [DllImport(LibraryName, EntryPoint = "ecs_mini", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_world_t* ecs_mini();

    // FunctionExtern @ flecs.h:903
    [DllImport(LibraryName, EntryPoint = "ecs_init_w_args", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_world_t* ecs_init_w_args(int argc, sbyte** argv);

    // FunctionExtern @ flecs.h:914
    [DllImport(LibraryName, EntryPoint = "ecs_fini", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_fini(ecs_world_t* world);

    // FunctionExtern @ flecs.h:925
    [DllImport(LibraryName, EntryPoint = "ecs_atfini", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_atfini(ecs_world_t* world, ecs_fini_action_t action, void* ctx);

    // FunctionExtern @ flecs.h:938
    [DllImport(LibraryName, EntryPoint = "ecs_run_post_frame", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_run_post_frame(ecs_world_t* world, ecs_fini_action_t action, void* ctx);

    // FunctionExtern @ flecs.h:950
    [DllImport(LibraryName, EntryPoint = "ecs_quit", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_quit(ecs_world_t* world);

    // FunctionExtern @ flecs.h:958
    [DllImport(LibraryName, EntryPoint = "ecs_should_quit", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_should_quit(ecs_world_t* world);

    // FunctionExtern @ flecs.h:968
    [DllImport(LibraryName, EntryPoint = "ecs_set_component_actions_w_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_set_component_actions_w_id(ecs_world_t* world, ecs_id_t id, EcsComponentLifecycle* actions);

    // FunctionExtern @ flecs.h:986
    [DllImport(LibraryName, EntryPoint = "ecs_set_context", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_set_context(ecs_world_t* world, void* ctx);

    // FunctionExtern @ flecs.h:998
    [DllImport(LibraryName, EntryPoint = "ecs_get_context", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_get_context(ecs_world_t* world);

    // FunctionExtern @ flecs.h:1008
    [DllImport(LibraryName, EntryPoint = "ecs_get_world_info", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_world_info_t* ecs_get_world_info(ecs_world_t* world);

    // FunctionExtern @ flecs.h:1021
    [DllImport(LibraryName, EntryPoint = "ecs_dim", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_dim(ecs_world_t* world, int entity_count);

    // FunctionExtern @ flecs.h:1041
    [DllImport(LibraryName, EntryPoint = "ecs_set_entity_range", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_set_entity_range(ecs_world_t* world, ecs_entity_t id_start, ecs_entity_t id_end);

    // FunctionExtern @ flecs.h:1057
    [DllImport(LibraryName, EntryPoint = "ecs_enable_range_check", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_enable_range_check(ecs_world_t* world, CBool enable);

    // FunctionExtern @ flecs.h:1078
    [DllImport(LibraryName, EntryPoint = "ecs_enable_locking", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_enable_locking(ecs_world_t* world, CBool enable);

    // FunctionExtern @ flecs.h:1088
    [DllImport(LibraryName, EntryPoint = "ecs_lock", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_lock(ecs_world_t* world);

    // FunctionExtern @ flecs.h:1097
    [DllImport(LibraryName, EntryPoint = "ecs_unlock", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_unlock(ecs_world_t* world);

    // FunctionExtern @ flecs.h:1111
    [DllImport(LibraryName, EntryPoint = "ecs_begin_wait", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_begin_wait(ecs_world_t* world);

    // FunctionExtern @ flecs.h:1121
    [DllImport(LibraryName, EntryPoint = "ecs_end_wait", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_end_wait(ecs_world_t* world);

    // FunctionExtern @ flecs.h:1142
    [DllImport(LibraryName, EntryPoint = "ecs_tracing_enable", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_tracing_enable(int level);

    // FunctionExtern @ flecs.h:1156
    [DllImport(LibraryName, EntryPoint = "ecs_measure_frame_time", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_measure_frame_time(ecs_world_t* world, CBool enable);

    // FunctionExtern @ flecs.h:1170
    [DllImport(LibraryName, EntryPoint = "ecs_measure_system_time", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_measure_system_time(ecs_world_t* world, CBool enable);

    // FunctionExtern @ flecs.h:1190
    [DllImport(LibraryName, EntryPoint = "ecs_set_target_fps", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_set_target_fps(ecs_world_t* world, float fps);

    // FunctionExtern @ flecs.h:1196
    [DllImport(LibraryName, EntryPoint = "ecs_get_threads", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_get_threads(ecs_world_t* world);

    // FunctionExtern @ flecs.h:1213
    [DllImport(LibraryName, EntryPoint = "ecs_new_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_new_id(ecs_world_t* world);

    // FunctionExtern @ flecs.h:1226
    [DllImport(LibraryName, EntryPoint = "ecs_new_component_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_new_component_id(ecs_world_t* world);

    // FunctionExtern @ flecs.h:1238
    [DllImport(LibraryName, EntryPoint = "ecs_new_w_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_new_w_id(ecs_world_t* world, ecs_id_t id);

    // FunctionExtern @ flecs.h:1274
    [DllImport(LibraryName, EntryPoint = "ecs_entity_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_entity_init(ecs_world_t* world, ecs_entity_desc_t* desc);

    // FunctionExtern @ flecs.h:1292
    [DllImport(LibraryName, EntryPoint = "ecs_component_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_component_init(ecs_world_t* world, ecs_component_desc_t* desc);

    // FunctionExtern @ flecs.h:1315
    [DllImport(LibraryName, EntryPoint = "ecs_type_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_type_init(ecs_world_t* world, ecs_type_desc_t* desc);

    // FunctionExtern @ flecs.h:1329
    [DllImport(LibraryName, EntryPoint = "ecs_bulk_new_w_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t* ecs_bulk_new_w_id(ecs_world_t* world, ecs_id_t id, int count);

    // FunctionExtern @ flecs.h:1347
    [DllImport(LibraryName, EntryPoint = "ecs_bulk_new_w_data", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t* ecs_bulk_new_w_data(ecs_world_t* world, int count, ecs_entities_t* component_ids, void* data);

    // FunctionExtern @ flecs.h:1379
    [DllImport(LibraryName, EntryPoint = "ecs_clone", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_clone(ecs_world_t* world, ecs_entity_t dst, ecs_entity_t src, CBool copy_value);

    // FunctionExtern @ flecs.h:1402
    [DllImport(LibraryName, EntryPoint = "ecs_add_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_add_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // FunctionExtern @ flecs.h:1434
    [DllImport(LibraryName, EntryPoint = "ecs_remove_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_remove_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // FunctionExtern @ flecs.h:1478
    [DllImport(LibraryName, EntryPoint = "ecs_enable_component_w_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_enable_component_w_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, CBool enable);

    // FunctionExtern @ flecs.h:1498
    [DllImport(LibraryName, EntryPoint = "ecs_is_component_enabled_w_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_is_component_enabled_w_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // FunctionExtern @ flecs.h:1522
    [DllImport(LibraryName, EntryPoint = "ecs_make_pair", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_id_t ecs_make_pair(ecs_entity_t relation, ecs_entity_t @object);

    // FunctionExtern @ flecs.h:1721
    [DllImport(LibraryName, EntryPoint = "ecs_clear", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_clear(ecs_world_t* world, ecs_entity_t entity);

    // FunctionExtern @ flecs.h:1735
    [DllImport(LibraryName, EntryPoint = "ecs_delete", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_delete(ecs_world_t* world, ecs_entity_t entity);

    // FunctionExtern @ flecs.h:1748
    [DllImport(LibraryName, EntryPoint = "ecs_delete_children", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_delete_children(ecs_world_t* world, ecs_entity_t parent);

    // FunctionExtern @ flecs.h:1770
    [DllImport(LibraryName, EntryPoint = "ecs_get_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_get_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // FunctionExtern @ flecs.h:1800
    [DllImport(LibraryName, EntryPoint = "ecs_get_ref_w_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_get_ref_w_id(ecs_world_t* world, ecs_ref_t* @ref, ecs_entity_t entity, ecs_id_t id);

    // FunctionExtern @ flecs.h:1828
    [DllImport(LibraryName, EntryPoint = "ecs_get_case", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_get_case(ecs_world_t* world, ecs_entity_t e, ecs_entity_t sw);

    // FunctionExtern @ flecs.h:1856
    [DllImport(LibraryName, EntryPoint = "ecs_get_mut_w_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_get_mut_w_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, bool* is_added);

    // FunctionExtern @ flecs.h:1885
    [DllImport(LibraryName, EntryPoint = "ecs_modified_w_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_modified_w_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // FunctionExtern @ flecs.h:1914
    [DllImport(LibraryName, EntryPoint = "ecs_set_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_set_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, ulong size, void* ptr);

    // FunctionExtern @ flecs.h:1989
    [DllImport(LibraryName, EntryPoint = "ecs_has_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_has_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // FunctionExtern @ flecs.h:2040
    [DllImport(LibraryName, EntryPoint = "ecs_is_valid", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_is_valid(ecs_world_t* world, ecs_entity_t e);

    // FunctionExtern @ flecs.h:2051
    [DllImport(LibraryName, EntryPoint = "ecs_is_alive", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_is_alive(ecs_world_t* world, ecs_entity_t e);

    // FunctionExtern @ flecs.h:2072
    [DllImport(LibraryName, EntryPoint = "ecs_get_alive", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_get_alive(ecs_world_t* world, ecs_entity_t e);

    // FunctionExtern @ flecs.h:2100
    [DllImport(LibraryName, EntryPoint = "ecs_ensure", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_ensure(ecs_world_t* world, ecs_entity_t e);

    // FunctionExtern @ flecs.h:2112
    [DllImport(LibraryName, EntryPoint = "ecs_exists", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_exists(ecs_world_t* world, ecs_entity_t e);

    // FunctionExtern @ flecs.h:2123
    [DllImport(LibraryName, EntryPoint = "ecs_get_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_type_t ecs_get_type(ecs_world_t* world, ecs_entity_t entity);

    // FunctionExtern @ flecs.h:2134
    [DllImport(LibraryName, EntryPoint = "ecs_get_typeid", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_get_typeid(ecs_world_t* world, ecs_entity_t e);

    // FunctionExtern @ flecs.h:2146
    [DllImport(LibraryName, EntryPoint = "ecs_get_name", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte* ecs_get_name(ecs_world_t* world, ecs_entity_t entity);

    // FunctionExtern @ flecs.h:2158
    [DllImport(LibraryName, EntryPoint = "ecs_role_str", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte* ecs_role_str(ecs_entity_t entity);

    // FunctionExtern @ flecs.h:2171
    [DllImport(LibraryName, EntryPoint = "ecs_id_str", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong ecs_id_str(ecs_world_t* world, ecs_id_t entity, sbyte* buffer, ulong buffer_len);

    // FunctionExtern @ flecs.h:2189
    [DllImport(LibraryName, EntryPoint = "ecs_get_object_w_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_get_object_w_id(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t rel, ecs_id_t id);

    // FunctionExtern @ flecs.h:2218
    [DllImport(LibraryName, EntryPoint = "ecs_enable", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_enable(ecs_world_t* world, ecs_entity_t entity, CBool enabled);

    // FunctionExtern @ flecs.h:2231
    [DllImport(LibraryName, EntryPoint = "ecs_count_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_count_id(ecs_world_t* world, ecs_id_t entity);

    // FunctionExtern @ flecs.h:2253
    [DllImport(LibraryName, EntryPoint = "ecs_count_filter", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_count_filter(ecs_world_t* world, ecs_filter_t* filter);

    // FunctionExtern @ flecs.h:2274
    [DllImport(LibraryName, EntryPoint = "ecs_lookup", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_lookup(ecs_world_t* world, sbyte* name);

    // FunctionExtern @ flecs.h:2288
    [DllImport(LibraryName, EntryPoint = "ecs_lookup_child", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_lookup_child(ecs_world_t* world, ecs_entity_t parent, sbyte* name);

    // FunctionExtern @ flecs.h:2312
    [DllImport(LibraryName, EntryPoint = "ecs_lookup_path_w_sep", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_lookup_path_w_sep(ecs_world_t* world, ecs_entity_t parent, sbyte* path, sbyte* sep, sbyte* prefix, CBool recursive);

    // FunctionExtern @ flecs.h:2353
    [DllImport(LibraryName, EntryPoint = "ecs_lookup_symbol", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_lookup_symbol(ecs_world_t* world, sbyte* name);

    // FunctionExtern @ flecs.h:2359
    [DllImport(LibraryName, EntryPoint = "ecs_use", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_use(ecs_world_t* world, ecs_entity_t entity, sbyte* name);

    // FunctionExtern @ flecs.h:2391
    [DllImport(LibraryName, EntryPoint = "ecs_get_path_w_sep", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte* ecs_get_path_w_sep(ecs_world_t* world, ecs_entity_t parent, ecs_entity_t child, ecs_entity_t component, sbyte* sep, sbyte* prefix);

    // FunctionExtern @ flecs.h:2440
    [DllImport(LibraryName, EntryPoint = "ecs_new_from_path_w_sep", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_new_from_path_w_sep(ecs_world_t* world, ecs_entity_t parent, sbyte* path, sbyte* sep, sbyte* prefix);

    // FunctionExtern @ flecs.h:2484
    [DllImport(LibraryName, EntryPoint = "ecs_add_path_w_sep", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_add_path_w_sep(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t parent, sbyte* path, sbyte* sep, sbyte* prefix);

    // FunctionExtern @ flecs.h:2531
    [DllImport(LibraryName, EntryPoint = "ecs_get_child_count", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_get_child_count(ecs_world_t* world, ecs_entity_t entity);

    // FunctionExtern @ flecs.h:2544
    [DllImport(LibraryName, EntryPoint = "ecs_scope_iter", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_iter_t ecs_scope_iter(ecs_world_t* world, ecs_entity_t parent);

    // FunctionExtern @ flecs.h:2556
    [DllImport(LibraryName, EntryPoint = "ecs_scope_iter_w_filter", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_iter_t ecs_scope_iter_w_filter(ecs_world_t* world, ecs_entity_t parent, ecs_filter_t* filter);

    // FunctionExtern @ flecs.h:2570
    [DllImport(LibraryName, EntryPoint = "ecs_scope_next", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_scope_next(ecs_iter_t* it);

    // FunctionExtern @ flecs.h:2585
    [DllImport(LibraryName, EntryPoint = "ecs_set_scope", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_set_scope(ecs_world_t* world, ecs_entity_t scope);

    // FunctionExtern @ flecs.h:2597
    [DllImport(LibraryName, EntryPoint = "ecs_get_scope", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_get_scope(ecs_world_t* world);

    // FunctionExtern @ flecs.h:2610
    [DllImport(LibraryName, EntryPoint = "ecs_set_name_prefix", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte* ecs_set_name_prefix(ecs_world_t* world, sbyte* prefix);

    // FunctionExtern @ flecs.h:2634
    [DllImport(LibraryName, EntryPoint = "ecs_term_is_set", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_term_is_set(ecs_term_t* term);

    // FunctionExtern @ flecs.h:2661
    [DllImport(LibraryName, EntryPoint = "ecs_term_is_trivial", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_term_is_trivial(ecs_term_t* term);

    // FunctionExtern @ flecs.h:2685
    [DllImport(LibraryName, EntryPoint = "ecs_term_finalize", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_term_finalize(ecs_world_t* world, sbyte* name, sbyte* expr, ecs_term_t* term);

    // FunctionExtern @ flecs.h:2700
    [DllImport(LibraryName, EntryPoint = "ecs_term_copy", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_term_t ecs_term_copy(ecs_term_t* src);

    // FunctionExtern @ flecs.h:2714
    [DllImport(LibraryName, EntryPoint = "ecs_term_move", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_term_t ecs_term_move(ecs_term_t* src);

    // FunctionExtern @ flecs.h:2724
    [DllImport(LibraryName, EntryPoint = "ecs_term_fini", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_term_fini(ecs_term_t* term);

    // FunctionExtern @ flecs.h:2735
    [DllImport(LibraryName, EntryPoint = "ecs_id_match", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_id_match(ecs_id_t id, ecs_id_t pattern);

    // FunctionExtern @ flecs.h:2768
    [DllImport(LibraryName, EntryPoint = "ecs_filter_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_filter_init(ecs_world_t* world, ecs_filter_t* filter_out, ecs_filter_desc_t* desc);

    // FunctionExtern @ flecs.h:2779
    [DllImport(LibraryName, EntryPoint = "ecs_filter_fini", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_filter_fini(ecs_filter_t* filter);

    // FunctionExtern @ flecs.h:2796
    [DllImport(LibraryName, EntryPoint = "ecs_filter_finalize", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_filter_finalize(ecs_world_t* world, ecs_filter_t* filter);

    // FunctionExtern @ flecs.h:2805
    [DllImport(LibraryName, EntryPoint = "ecs_filter_str", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte* ecs_filter_str(ecs_world_t* world, ecs_filter_t* filter);

    // FunctionExtern @ flecs.h:2825
    [DllImport(LibraryName, EntryPoint = "ecs_filter_match_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_filter_match_entity(ecs_world_t* world, ecs_filter_t* filter, ecs_entity_t e);

    // FunctionExtern @ flecs.h:2840
    [DllImport(LibraryName, EntryPoint = "ecs_filter_iter", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_iter_t ecs_filter_iter(ecs_world_t* world, ecs_filter_t* filter);

    // FunctionExtern @ flecs.h:2854
    [DllImport(LibraryName, EntryPoint = "ecs_filter_next", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_filter_next(ecs_iter_t* iter);

    // FunctionExtern @ flecs.h:2900
    [DllImport(LibraryName, EntryPoint = "ecs_query_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_query_t* ecs_query_init(ecs_world_t* world, ecs_query_desc_t* desc);

    // FunctionExtern @ flecs.h:2912
    [DllImport(LibraryName, EntryPoint = "ecs_query_fini", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_query_fini(ecs_query_t* query);

    // FunctionExtern @ flecs.h:2942
    [DllImport(LibraryName, EntryPoint = "ecs_query_iter", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_iter_t ecs_query_iter(ecs_query_t* query);

    // FunctionExtern @ flecs.h:2955
    [DllImport(LibraryName, EntryPoint = "ecs_query_iter_page", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_iter_t ecs_query_iter_page(ecs_query_t* query, int offset, int limit);

    // FunctionExtern @ flecs.h:2970
    [DllImport(LibraryName, EntryPoint = "ecs_query_next", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_query_next(ecs_iter_t* iter);

    // FunctionExtern @ flecs.h:2982
    [DllImport(LibraryName, EntryPoint = "ecs_query_next_w_filter", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_query_next_w_filter(ecs_iter_t* iter, ecs_filter_t* filter);

    // FunctionExtern @ flecs.h:3002
    [DllImport(LibraryName, EntryPoint = "ecs_query_next_worker", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_query_next_worker(ecs_iter_t* it, int stage_current, int stage_count);

    // FunctionExtern @ flecs.h:3018
    [DllImport(LibraryName, EntryPoint = "ecs_query_changed", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_query_changed(ecs_query_t* query);

    // FunctionExtern @ flecs.h:3030
    [DllImport(LibraryName, EntryPoint = "ecs_query_orphaned", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_query_orphaned(ecs_query_t* query);

    // FunctionExtern @ flecs.h:3055
    [DllImport(LibraryName, EntryPoint = "ecs_trigger_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_trigger_init(ecs_world_t* world, ecs_trigger_desc_t* desc);

    // FunctionExtern @ flecs.h:3068
    [DllImport(LibraryName, EntryPoint = "ecs_get_trigger_ctx", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_get_trigger_ctx(ecs_world_t* world, ecs_entity_t trigger);

    // FunctionExtern @ flecs.h:3104
    [DllImport(LibraryName, EntryPoint = "ecs_term_w_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_term_w_size(ecs_iter_t* it, ulong size, int index);

    // FunctionExtern @ flecs.h:3123
    [DllImport(LibraryName, EntryPoint = "ecs_term_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_id_t ecs_term_id(ecs_iter_t* it, int index);

    // FunctionExtern @ flecs.h:3141
    [DllImport(LibraryName, EntryPoint = "ecs_term_source", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_term_source(ecs_iter_t* it, int index);

    // FunctionExtern @ flecs.h:3153
    [DllImport(LibraryName, EntryPoint = "ecs_term_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong ecs_term_size(ecs_iter_t* it, int index);

    // FunctionExtern @ flecs.h:3166
    [DllImport(LibraryName, EntryPoint = "ecs_term_is_readonly", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_term_is_readonly(ecs_iter_t* it, int index);

    // FunctionExtern @ flecs.h:3180
    [DllImport(LibraryName, EntryPoint = "ecs_term_is_owned", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_term_is_owned(ecs_iter_t* it, int index);

    // FunctionExtern @ flecs.h:3192
    [DllImport(LibraryName, EntryPoint = "ecs_iter_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_type_t ecs_iter_type(ecs_iter_t* it);

    // FunctionExtern @ flecs.h:3215
    [DllImport(LibraryName, EntryPoint = "ecs_iter_find_column", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_iter_find_column(ecs_iter_t* it, ecs_id_t id);

    // FunctionExtern @ flecs.h:3247
    [DllImport(LibraryName, EntryPoint = "ecs_iter_column_w_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_iter_column_w_size(ecs_iter_t* it, ulong size, int index);

    // FunctionExtern @ flecs.h:3265
    [DllImport(LibraryName, EntryPoint = "ecs_iter_column_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong ecs_iter_column_size(ecs_iter_t* it, int index);

    // FunctionExtern @ flecs.h:3296
    [DllImport(LibraryName, EntryPoint = "ecs_frame_begin", CallingConvention = CallingConvention.Cdecl)]
    public static extern float ecs_frame_begin(ecs_world_t* world, float delta_time);

    // FunctionExtern @ flecs.h:3307
    [DllImport(LibraryName, EntryPoint = "ecs_frame_end", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_frame_end(ecs_world_t* world);

    // FunctionExtern @ flecs.h:3330
    [DllImport(LibraryName, EntryPoint = "ecs_staging_begin", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_staging_begin(ecs_world_t* world);

    // FunctionExtern @ flecs.h:3343
    [DllImport(LibraryName, EntryPoint = "ecs_staging_end", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_staging_end(ecs_world_t* world);

    // FunctionExtern @ flecs.h:3357
    [DllImport(LibraryName, EntryPoint = "ecs_merge", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_merge(ecs_world_t* world);

    // FunctionExtern @ flecs.h:3370
    [DllImport(LibraryName, EntryPoint = "ecs_defer_begin", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_defer_begin(ecs_world_t* world);

    // FunctionExtern @ flecs.h:3382
    [DllImport(LibraryName, EntryPoint = "ecs_defer_end", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_defer_end(ecs_world_t* world);

    // FunctionExtern @ flecs.h:3402
    [DllImport(LibraryName, EntryPoint = "ecs_set_automerge", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_set_automerge(ecs_world_t* world, CBool automerge);

    // FunctionExtern @ flecs.h:3420
    [DllImport(LibraryName, EntryPoint = "ecs_set_stages", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_set_stages(ecs_world_t* world, int stages);

    // FunctionExtern @ flecs.h:3431
    [DllImport(LibraryName, EntryPoint = "ecs_get_stage_count", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_get_stage_count(ecs_world_t* world);

    // FunctionExtern @ flecs.h:3442
    [DllImport(LibraryName, EntryPoint = "ecs_get_stage_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_get_stage_id(ecs_world_t* world);

    // FunctionExtern @ flecs.h:3461
    [DllImport(LibraryName, EntryPoint = "ecs_get_stage", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_world_t* ecs_get_stage(ecs_world_t* world, int stage_id);

    // FunctionExtern @ flecs.h:3470
    [DllImport(LibraryName, EntryPoint = "ecs_get_world", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_world_t* ecs_get_world(ecs_world_t* world);

    // FunctionExtern @ flecs.h:3481
    [DllImport(LibraryName, EntryPoint = "ecs_stage_is_readonly", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_stage_is_readonly(ecs_world_t* stage);

    // FunctionExtern @ flecs.h:3503
    [DllImport(LibraryName, EntryPoint = "ecs_async_stage_new", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_world_t* ecs_async_stage_new(ecs_world_t* world);

    // FunctionExtern @ flecs.h:3513
    [DllImport(LibraryName, EntryPoint = "ecs_async_stage_free", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_async_stage_free(ecs_world_t* stage);

    // FunctionExtern @ flecs.h:3523
    [DllImport(LibraryName, EntryPoint = "ecs_stage_is_async", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_stage_is_async(ecs_world_t* stage);

    // FunctionExtern @ flecs.h:3545
    [DllImport(LibraryName, EntryPoint = "ecs_table_from_str", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_table_t* ecs_table_from_str(ecs_world_t* world, sbyte* type);

    // FunctionExtern @ flecs.h:3557
    [DllImport(LibraryName, EntryPoint = "ecs_table_from_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_table_t* ecs_table_from_type(ecs_world_t* world, ecs_type_t type);

    // FunctionExtern @ flecs.h:3567
    [DllImport(LibraryName, EntryPoint = "ecs_table_get_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_type_t ecs_table_get_type(ecs_table_t* table);

    // FunctionExtern @ flecs.h:3593
    [DllImport(LibraryName, EntryPoint = "ecs_table_insert", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_record_t ecs_table_insert(ecs_world_t* world, ecs_table_t* table, ecs_entity_t entity, ecs_record_t* @record);

    // FunctionExtern @ flecs.h:3609
    [DllImport(LibraryName, EntryPoint = "ecs_table_count", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_table_count(ecs_table_t* table);

    // FunctionExtern @ log.h:40
    [DllImport(LibraryName, EntryPoint = "_ecs_trace", CallingConvention = CallingConvention.Cdecl)]
    public static extern void _ecs_trace(int level, sbyte* file, int line, sbyte* fmt);

    // FunctionExtern @ log.h:48
    [DllImport(LibraryName, EntryPoint = "_ecs_warn", CallingConvention = CallingConvention.Cdecl)]
    public static extern void _ecs_warn(sbyte* file, int line, sbyte* fmt);

    // FunctionExtern @ log.h:55
    [DllImport(LibraryName, EntryPoint = "_ecs_err", CallingConvention = CallingConvention.Cdecl)]
    public static extern void _ecs_err(sbyte* file, int line, sbyte* fmt);

    // FunctionExtern @ log.h:62
    [DllImport(LibraryName, EntryPoint = "_ecs_deprecated", CallingConvention = CallingConvention.Cdecl)]
    public static extern void _ecs_deprecated(sbyte* file, int line, sbyte* msg);

    // FunctionExtern @ log.h:68
    [DllImport(LibraryName, EntryPoint = "ecs_log_push", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_log_push();

    // FunctionExtern @ log.h:71
    [DllImport(LibraryName, EntryPoint = "ecs_log_pop", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_log_pop();

    // FunctionExtern @ log.h:125
    [DllImport(LibraryName, EntryPoint = "ecs_strerror", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte* ecs_strerror(int error_code);

    // FunctionExtern @ log.h:130
    [DllImport(LibraryName, EntryPoint = "_ecs_abort", CallingConvention = CallingConvention.Cdecl)]
    public static extern void _ecs_abort(int error_code, sbyte* param, sbyte* file, int line);

    // FunctionExtern @ log.h:141
    [DllImport(LibraryName, EntryPoint = "_ecs_assert", CallingConvention = CallingConvention.Cdecl)]
    public static extern void _ecs_assert(CBool condition, int error_code, sbyte* param, sbyte* condition_str, sbyte* file, int line);

    // FunctionExtern @ log.h:158
    [DllImport(LibraryName, EntryPoint = "_ecs_parser_error", CallingConvention = CallingConvention.Cdecl)]
    public static extern void _ecs_parser_error(sbyte* name, sbyte* expr, long column, sbyte* fmt);

    // FunctionExtern @ map.h:50
    [DllImport(LibraryName, EntryPoint = "_ecs_map_new", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_map_t* _ecs_map_new(ecs_size_t elem_size, ecs_size_t alignment, int elem_count);

    // FunctionExtern @ map.h:60
    [DllImport(LibraryName, EntryPoint = "_ecs_map_get", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* _ecs_map_get(ecs_map_t* map, ecs_size_t elem_size, ecs_map_key_t key);

    // FunctionExtern @ map.h:73
    [DllImport(LibraryName, EntryPoint = "_ecs_map_get_ptr", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* _ecs_map_get_ptr(ecs_map_t* map, ecs_map_key_t key);

    // FunctionExtern @ map.h:82
    [DllImport(LibraryName, EntryPoint = "_ecs_map_ensure", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* _ecs_map_ensure(ecs_map_t* map, ecs_size_t elem_size, ecs_map_key_t key);

    // FunctionExtern @ map.h:92
    [DllImport(LibraryName, EntryPoint = "_ecs_map_set", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* _ecs_map_set(ecs_map_t* map, ecs_size_t elem_size, ecs_map_key_t key, void* payload);

    // FunctionExtern @ map.h:103
    [DllImport(LibraryName, EntryPoint = "ecs_map_free", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_map_free(ecs_map_t* map);

    // FunctionExtern @ map.h:108
    [DllImport(LibraryName, EntryPoint = "ecs_map_remove", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_map_remove(ecs_map_t* map, ecs_map_key_t key);

    // FunctionExtern @ map.h:114
    [DllImport(LibraryName, EntryPoint = "ecs_map_clear", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_map_clear(ecs_map_t* map);

    // FunctionExtern @ map.h:119
    [DllImport(LibraryName, EntryPoint = "ecs_map_count", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_map_count(ecs_map_t* map);

    // FunctionExtern @ map.h:124
    [DllImport(LibraryName, EntryPoint = "ecs_map_bucket_count", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_map_bucket_count(ecs_map_t* map);

    // FunctionExtern @ map.h:129
    [DllImport(LibraryName, EntryPoint = "ecs_map_iter", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_map_iter_t ecs_map_iter(ecs_map_t* map);

    // FunctionExtern @ map.h:134
    [DllImport(LibraryName, EntryPoint = "_ecs_map_next", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* _ecs_map_next(ecs_map_iter_t* iter, ecs_size_t elem_size, ecs_map_key_t* key);

    // FunctionExtern @ map.h:144
    [DllImport(LibraryName, EntryPoint = "_ecs_map_next_ptr", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* _ecs_map_next_ptr(ecs_map_iter_t* iter, ecs_map_key_t* key);

    // FunctionExtern @ map.h:153
    [DllImport(LibraryName, EntryPoint = "ecs_map_grow", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_map_grow(ecs_map_t* map, int elem_count);

    // FunctionExtern @ map.h:159
    [DllImport(LibraryName, EntryPoint = "ecs_map_set_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_map_set_size(ecs_map_t* map, int elem_count);

    // FunctionExtern @ map.h:165
    [DllImport(LibraryName, EntryPoint = "ecs_map_memory", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_map_memory(ecs_map_t* map, int* allocd, int* used);

    // FunctionExtern @ module.h:42
    [DllImport(LibraryName, EntryPoint = "ecs_import", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_import(ecs_world_t* world, ecs_module_action_t module, sbyte* module_name, void* handles_out, ulong handles_size);

    // FunctionExtern @ module.h:69
    [DllImport(LibraryName, EntryPoint = "ecs_import_from_library", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_import_from_library(ecs_world_t* world, sbyte* library_name, sbyte* module_name);

    // FunctionExtern @ os_api.h:257
    [DllImport(LibraryName, EntryPoint = "ecs_os_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_os_init();

    // FunctionExtern @ os_api.h:260
    [DllImport(LibraryName, EntryPoint = "ecs_os_fini", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_os_fini();

    // FunctionExtern @ os_api.h:263
    [DllImport(LibraryName, EntryPoint = "ecs_os_set_api", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_os_set_api(ecs_os_api_t* os_api);

    // FunctionExtern @ os_api.h:267
    [DllImport(LibraryName, EntryPoint = "ecs_os_set_api_defaults", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_os_set_api_defaults();

    // FunctionExtern @ os_api.h:360
    [DllImport(LibraryName, EntryPoint = "ecs_os_log", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_os_log(sbyte* fmt);

    // FunctionExtern @ os_api.h:363
    [DllImport(LibraryName, EntryPoint = "ecs_os_warn", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_os_warn(sbyte* fmt);

    // FunctionExtern @ os_api.h:366
    [DllImport(LibraryName, EntryPoint = "ecs_os_err", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_os_err(sbyte* fmt);

    // FunctionExtern @ os_api.h:369
    [DllImport(LibraryName, EntryPoint = "ecs_os_dbg", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_os_dbg(sbyte* fmt);

    // FunctionExtern @ os_api.h:385
    [DllImport(LibraryName, EntryPoint = "ecs_sleepf", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_sleepf(double t);

    // FunctionExtern @ os_api.h:390
    [DllImport(LibraryName, EntryPoint = "ecs_time_measure", CallingConvention = CallingConvention.Cdecl)]
    public static extern double ecs_time_measure(ecs_time_t* start);

    // FunctionExtern @ os_api.h:395
    [DllImport(LibraryName, EntryPoint = "ecs_time_sub", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_time_t ecs_time_sub(ecs_time_t t1, ecs_time_t t2);

    // FunctionExtern @ os_api.h:401
    [DllImport(LibraryName, EntryPoint = "ecs_time_to_double", CallingConvention = CallingConvention.Cdecl)]
    public static extern double ecs_time_to_double(ecs_time_t t);

    // FunctionExtern @ os_api.h:405
    [DllImport(LibraryName, EntryPoint = "ecs_os_memdup", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_os_memdup(void* src, ecs_size_t size);

    // FunctionExtern @ os_api.h:411
    [DllImport(LibraryName, EntryPoint = "ecs_os_has_heap", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_os_has_heap();

    // FunctionExtern @ os_api.h:415
    [DllImport(LibraryName, EntryPoint = "ecs_os_has_threading", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_os_has_threading();

    // FunctionExtern @ os_api.h:419
    [DllImport(LibraryName, EntryPoint = "ecs_os_has_time", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_os_has_time();

    // FunctionExtern @ os_api.h:423
    [DllImport(LibraryName, EntryPoint = "ecs_os_has_logging", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_os_has_logging();

    // FunctionExtern @ os_api.h:427
    [DllImport(LibraryName, EntryPoint = "ecs_os_has_dl", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_os_has_dl();

    // FunctionExtern @ os_api.h:431
    [DllImport(LibraryName, EntryPoint = "ecs_os_has_modules", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_os_has_modules();

    // FunctionExtern @ parser.h:46
    [DllImport(LibraryName, EntryPoint = "ecs_parse_term", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte* ecs_parse_term(ecs_world_t* world, sbyte* name, sbyte* expr, sbyte* ptr, ecs_term_t* term_out);

    // FunctionExtern @ pipeline.h:49
    [DllImport(LibraryName, EntryPoint = "ecs_set_pipeline", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_set_pipeline(ecs_world_t* world, ecs_entity_t pipeline);

    // FunctionExtern @ pipeline.h:60
    [DllImport(LibraryName, EntryPoint = "ecs_get_pipeline", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_get_pipeline(ecs_world_t* world);

    // FunctionExtern @ pipeline.h:82
    [DllImport(LibraryName, EntryPoint = "ecs_progress", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_progress(ecs_world_t* world, float delta_time);

    // FunctionExtern @ pipeline.h:93
    [DllImport(LibraryName, EntryPoint = "ecs_set_time_scale", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_set_time_scale(ecs_world_t* world, float scale);

    // FunctionExtern @ pipeline.h:103
    [DllImport(LibraryName, EntryPoint = "ecs_reset_clock", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_reset_clock(ecs_world_t* world);

    // FunctionExtern @ pipeline.h:125
    [DllImport(LibraryName, EntryPoint = "ecs_pipeline_run", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_pipeline_run(ecs_world_t* world, ecs_entity_t pipeline, float delta_time);

    // FunctionExtern @ pipeline.h:141
    [DllImport(LibraryName, EntryPoint = "ecs_deactivate_systems", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_deactivate_systems(ecs_world_t* world);

    // FunctionExtern @ pipeline.h:155
    [DllImport(LibraryName, EntryPoint = "ecs_set_threads", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_set_threads(ecs_world_t* world, int threads);

    // FunctionExtern @ pipeline.h:169
    [DllImport(LibraryName, EntryPoint = "FlecsPipelineImport", CallingConvention = CallingConvention.Cdecl)]
    public static extern void FlecsPipelineImport(ecs_world_t* world);

    // FunctionExtern @ queue.h:21
    [DllImport(LibraryName, EntryPoint = "_ecs_queue_new", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_queue_t* _ecs_queue_new(ecs_size_t elem_size, short offset, int elem_count);

    // FunctionExtern @ queue.h:30
    [DllImport(LibraryName, EntryPoint = "_ecs_queue_from_array", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_queue_t* _ecs_queue_from_array(ecs_size_t elem_size, short offset, int elem_count, void* array);

    // FunctionExtern @ queue.h:40
    [DllImport(LibraryName, EntryPoint = "_ecs_queue_push", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* _ecs_queue_push(ecs_queue_t* queue, ecs_size_t elem_size, short offset);

    // FunctionExtern @ queue.h:49
    [DllImport(LibraryName, EntryPoint = "_ecs_queue_get", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* _ecs_queue_get(ecs_queue_t* queue, ecs_size_t elem_size, short offset, int index);

    // FunctionExtern @ queue.h:62
    [DllImport(LibraryName, EntryPoint = "_ecs_queue_last", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* _ecs_queue_last(ecs_queue_t* queue, ecs_size_t elem_size, short offset);

    // FunctionExtern @ queue.h:71
    [DllImport(LibraryName, EntryPoint = "ecs_queue_index", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_queue_index(ecs_queue_t* queue);

    // FunctionExtern @ queue.h:75
    [DllImport(LibraryName, EntryPoint = "ecs_queue_count", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_queue_count(ecs_queue_t* queue);

    // FunctionExtern @ queue.h:79
    [DllImport(LibraryName, EntryPoint = "ecs_queue_free", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_queue_free(ecs_queue_t* queue);

    // FunctionExtern @ reader_writer.h:138
    [DllImport(LibraryName, EntryPoint = "ecs_reader_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_reader_t ecs_reader_init(ecs_world_t* world);

    // FunctionExtern @ reader_writer.h:152
    [DllImport(LibraryName, EntryPoint = "ecs_reader_init_w_iter", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_reader_t ecs_reader_init_w_iter(ecs_iter_t* iter, ecs_iter_next_action_t next);

    // FunctionExtern @ reader_writer.h:171
    [DllImport(LibraryName, EntryPoint = "ecs_reader_read", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_reader_read(sbyte* buffer, int size, ecs_reader_t* reader);

    // FunctionExtern @ reader_writer.h:190
    [DllImport(LibraryName, EntryPoint = "ecs_writer_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_writer_t ecs_writer_init(ecs_world_t* world);

    // FunctionExtern @ reader_writer.h:213
    [DllImport(LibraryName, EntryPoint = "ecs_writer_write", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_writer_write(sbyte* buffer, int size, ecs_writer_t* writer);

    // FunctionExtern @ snapshot.h:33
    [DllImport(LibraryName, EntryPoint = "ecs_snapshot_take", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_snapshot_t* ecs_snapshot_take(ecs_world_t* world);

    // FunctionExtern @ snapshot.h:45
    [DllImport(LibraryName, EntryPoint = "ecs_snapshot_take_w_iter", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_snapshot_t* ecs_snapshot_take_w_iter(ecs_iter_t* iter, ecs_iter_next_action_t action);

    // FunctionExtern @ snapshot.h:64
    [DllImport(LibraryName, EntryPoint = "ecs_snapshot_restore", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_snapshot_restore(ecs_world_t* world, ecs_snapshot_t* snapshot);

    // FunctionExtern @ snapshot.h:73
    [DllImport(LibraryName, EntryPoint = "ecs_snapshot_iter", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_iter_t ecs_snapshot_iter(ecs_snapshot_t* snapshot, ecs_filter_t* filter);

    // FunctionExtern @ snapshot.h:83
    [DllImport(LibraryName, EntryPoint = "ecs_snapshot_next", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_snapshot_next(ecs_iter_t* iter);

    // FunctionExtern @ snapshot.h:94
    [DllImport(LibraryName, EntryPoint = "ecs_snapshot_free", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_snapshot_free(ecs_snapshot_t* snapshot);

    // FunctionExtern @ stats.h:121
    [DllImport(LibraryName, EntryPoint = "ecs_get_world_stats", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_get_world_stats(ecs_world_t* world, ecs_world_stats_t* stats);

    // FunctionExtern @ stats.h:132
    [DllImport(LibraryName, EntryPoint = "ecs_dump_world_stats", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_dump_world_stats(ecs_world_t* world, ecs_world_stats_t* stats);

    // FunctionExtern @ stats.h:143
    [DllImport(LibraryName, EntryPoint = "ecs_get_query_stats", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_get_query_stats(ecs_world_t* world, ecs_query_t* query, ecs_query_stats_t* s);

    // FunctionExtern @ stats.h:157
    [DllImport(LibraryName, EntryPoint = "ecs_get_system_stats", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_get_system_stats(ecs_world_t* world, ecs_entity_t system, ecs_system_stats_t* stats);

    // FunctionExtern @ stats.h:172
    [DllImport(LibraryName, EntryPoint = "ecs_get_pipeline_stats", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_get_pipeline_stats(ecs_world_t* world, ecs_entity_t pipeline, ecs_pipeline_stats_t* stats);

    // FunctionExtern @ stats.h:178
    [DllImport(LibraryName, EntryPoint = "ecs_gauge_reduce", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_gauge_reduce(ecs_gauge_t* dst, int t_dst, ecs_gauge_t* src, int t_src);

    // FunctionExtern @ strbuf.h:80
    [DllImport(LibraryName, EntryPoint = "ecs_strbuf_append", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_strbuf_append(ecs_strbuf_t* buffer, sbyte* fmt);

    // FunctionExtern @ strbuf.h:96
    [DllImport(LibraryName, EntryPoint = "ecs_strbuf_appendstr", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_strbuf_appendstr(ecs_strbuf_t* buffer, sbyte* str);

    // FunctionExtern @ strbuf.h:103
    [DllImport(LibraryName, EntryPoint = "ecs_strbuf_mergebuff", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_strbuf_mergebuff(ecs_strbuf_t* dst_buffer, ecs_strbuf_t* src_buffer);

    // FunctionExtern @ strbuf.h:110
    [DllImport(LibraryName, EntryPoint = "ecs_strbuf_appendstr_zerocpy", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_strbuf_appendstr_zerocpy(ecs_strbuf_t* buffer, sbyte* str);

    // FunctionExtern @ strbuf.h:117
    [DllImport(LibraryName, EntryPoint = "ecs_strbuf_appendstr_zerocpy_const", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_strbuf_appendstr_zerocpy_const(ecs_strbuf_t* buffer, sbyte* str);

    // FunctionExtern @ strbuf.h:124
    [DllImport(LibraryName, EntryPoint = "ecs_strbuf_appendstrn", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_strbuf_appendstrn(ecs_strbuf_t* buffer, sbyte* str, int n);

    // FunctionExtern @ strbuf.h:131
    [DllImport(LibraryName, EntryPoint = "ecs_strbuf_get", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte* ecs_strbuf_get(ecs_strbuf_t* buffer);

    // FunctionExtern @ strbuf.h:136
    [DllImport(LibraryName, EntryPoint = "ecs_strbuf_reset", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_strbuf_reset(ecs_strbuf_t* buffer);

    // FunctionExtern @ strbuf.h:141
    [DllImport(LibraryName, EntryPoint = "ecs_strbuf_list_push", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_strbuf_list_push(ecs_strbuf_t* buffer, sbyte* list_open, sbyte* separator);

    // FunctionExtern @ strbuf.h:148
    [DllImport(LibraryName, EntryPoint = "ecs_strbuf_list_pop", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_strbuf_list_pop(ecs_strbuf_t* buffer, sbyte* list_close);

    // FunctionExtern @ strbuf.h:154
    [DllImport(LibraryName, EntryPoint = "ecs_strbuf_list_next", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_strbuf_list_next(ecs_strbuf_t* buffer);

    // FunctionExtern @ strbuf.h:159
    [DllImport(LibraryName, EntryPoint = "ecs_strbuf_list_append", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_strbuf_list_append(ecs_strbuf_t* buffer, sbyte* fmt);

    // FunctionExtern @ strbuf.h:166
    [DllImport(LibraryName, EntryPoint = "ecs_strbuf_list_appendstr", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_strbuf_list_appendstr(ecs_strbuf_t* buffer, sbyte* str);

    // FunctionExtern @ system.h:125
    [DllImport(LibraryName, EntryPoint = "ecs_system_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_system_init(ecs_world_t* world, ecs_system_desc_t* desc);

    // FunctionExtern @ system.h:183
    [DllImport(LibraryName, EntryPoint = "ecs_run", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_run(ecs_world_t* world, ecs_entity_t system, float delta_time, void* param);

    // FunctionExtern @ system.h:200
    [DllImport(LibraryName, EntryPoint = "ecs_run_worker", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_run_worker(ecs_world_t* world, ecs_entity_t system, int stage_current, int stage_count, float delta_time, void* param);

    // FunctionExtern @ system.h:230
    [DllImport(LibraryName, EntryPoint = "ecs_run_w_filter", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_run_w_filter(ecs_world_t* world, ecs_entity_t system, float delta_time, int offset, int limit, ecs_filter_t* filter, void* param);

    // FunctionExtern @ system.h:249
    [DllImport(LibraryName, EntryPoint = "ecs_get_query", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_query_t* ecs_get_query(ecs_world_t* world, ecs_entity_t system);

    // FunctionExtern @ system.h:262
    [DllImport(LibraryName, EntryPoint = "ecs_get_system_ctx", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* ecs_get_system_ctx(ecs_world_t* world, ecs_entity_t system);

    // FunctionExtern @ system.h:280
    [DllImport(LibraryName, EntryPoint = "ecs_dbg_system", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_dbg_system(ecs_world_t* world, ecs_entity_t system, ecs_dbg_system_t* dbg_out);

    // FunctionExtern @ system.h:286
    [DllImport(LibraryName, EntryPoint = "ecs_dbg_get_active_table", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_table_t* ecs_dbg_get_active_table(ecs_world_t* world, ecs_dbg_system_t* dbg, int index);

    // FunctionExtern @ system.h:292
    [DllImport(LibraryName, EntryPoint = "ecs_dbg_get_inactive_table", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_table_t* ecs_dbg_get_inactive_table(ecs_world_t* world, ecs_dbg_system_t* dbg, int index);

    // FunctionExtern @ system.h:298
    [DllImport(LibraryName, EntryPoint = "ecs_dbg_get_column_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_type_t ecs_dbg_get_column_type(ecs_world_t* world, ecs_entity_t system, int column_index);

    // FunctionExtern @ system.h:304
    [DllImport(LibraryName, EntryPoint = "ecs_dbg_match_entity", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_dbg_match_entity(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t system, ecs_match_failure_t* failure_info_out);

    // FunctionExtern @ system.h:321
    [DllImport(LibraryName, EntryPoint = "FlecsSystemImport", CallingConvention = CallingConvention.Cdecl)]
    public static extern void FlecsSystemImport(ecs_world_t* world);

    // FunctionExtern @ timer.h:79
    [DllImport(LibraryName, EntryPoint = "ecs_set_timeout", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_set_timeout(ecs_world_t* world, ecs_entity_t tick_source, float timeout);

    // FunctionExtern @ timer.h:104
    [DllImport(LibraryName, EntryPoint = "ecs_get_timeout", CallingConvention = CallingConvention.Cdecl)]
    public static extern float ecs_get_timeout(ecs_world_t* world, ecs_entity_t tick_source);

    // FunctionExtern @ timer.h:126
    [DllImport(LibraryName, EntryPoint = "ecs_set_interval", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_set_interval(ecs_world_t* world, ecs_entity_t tick_source, float interval);

    // FunctionExtern @ timer.h:140
    [DllImport(LibraryName, EntryPoint = "ecs_get_interval", CallingConvention = CallingConvention.Cdecl)]
    public static extern float ecs_get_interval(ecs_world_t* world, ecs_entity_t tick_source);

    // FunctionExtern @ timer.h:154
    [DllImport(LibraryName, EntryPoint = "ecs_start_timer", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_start_timer(ecs_world_t* world, ecs_entity_t tick_source);

    // FunctionExtern @ timer.h:166
    [DllImport(LibraryName, EntryPoint = "ecs_stop_timer", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_stop_timer(ecs_world_t* world, ecs_entity_t tick_source);

    // FunctionExtern @ timer.h:201
    [DllImport(LibraryName, EntryPoint = "ecs_set_rate", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_set_rate(ecs_world_t* world, ecs_entity_t tick_source, int rate, ecs_entity_t source);

    // FunctionExtern @ timer.h:230
    [DllImport(LibraryName, EntryPoint = "ecs_set_tick_source", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_set_tick_source(ecs_world_t* world, ecs_entity_t system, ecs_entity_t tick_source);

    // FunctionExtern @ timer.h:246
    [DllImport(LibraryName, EntryPoint = "FlecsTimerImport", CallingConvention = CallingConvention.Cdecl)]
    public static extern void FlecsTimerImport(ecs_world_t* world);

    // FunctionExtern @ type.h:17
    [DllImport(LibraryName, EntryPoint = "ecs_type_from_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_type_t ecs_type_from_id(ecs_world_t* world, ecs_entity_t entity);

    // FunctionExtern @ type.h:22
    [DllImport(LibraryName, EntryPoint = "ecs_type_to_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_type_to_id(ecs_world_t* world, ecs_type_t type);

    // FunctionExtern @ type.h:27
    [DllImport(LibraryName, EntryPoint = "ecs_type_str", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte* ecs_type_str(ecs_world_t* world, ecs_type_t type);

    // FunctionExtern @ type.h:32
    [DllImport(LibraryName, EntryPoint = "ecs_type_from_str", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_type_t ecs_type_from_str(ecs_world_t* world, sbyte* expr);

    // FunctionExtern @ type.h:37
    [DllImport(LibraryName, EntryPoint = "ecs_type_find", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_type_t ecs_type_find(ecs_world_t* world, ecs_entity_t* array, int count);

    // FunctionExtern @ type.h:43
    [DllImport(LibraryName, EntryPoint = "ecs_type_merge", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_type_t ecs_type_merge(ecs_world_t* world, ecs_type_t type, ecs_type_t type_add, ecs_type_t type_remove);

    // FunctionExtern @ type.h:50
    [DllImport(LibraryName, EntryPoint = "ecs_type_add", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_type_t ecs_type_add(ecs_world_t* world, ecs_type_t type, ecs_entity_t entity);

    // FunctionExtern @ type.h:56
    [DllImport(LibraryName, EntryPoint = "ecs_type_remove", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_type_t ecs_type_remove(ecs_world_t* world, ecs_type_t type, ecs_entity_t entity);

    // FunctionExtern @ type.h:62
    [DllImport(LibraryName, EntryPoint = "ecs_type_has_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_type_has_id(ecs_world_t* world, ecs_type_t type, ecs_entity_t entity);

    // FunctionExtern @ type.h:68
    [DllImport(LibraryName, EntryPoint = "ecs_type_has_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_type_has_type(ecs_world_t* world, ecs_type_t type, ecs_type_t has);

    // FunctionExtern @ type.h:74
    [DllImport(LibraryName, EntryPoint = "ecs_type_owns_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_type_owns_id(ecs_world_t* world, ecs_type_t type, ecs_entity_t entity, CBool owned);

    // FunctionExtern @ type.h:81
    [DllImport(LibraryName, EntryPoint = "ecs_type_owns_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_type_owns_type(ecs_world_t* world, ecs_type_t type, ecs_type_t has, CBool owned);

    // FunctionExtern @ type.h:88
    [DllImport(LibraryName, EntryPoint = "ecs_type_find_id", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool ecs_type_find_id(ecs_world_t* world, ecs_type_t type, ecs_entity_t id, ecs_entity_t rel, int min_depth, int max_depth, ecs_entity_t* @out);

    // FunctionExtern @ type.h:98
    [DllImport(LibraryName, EntryPoint = "ecs_type_get_entity_for_xor", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_entity_t ecs_type_get_entity_for_xor(ecs_world_t* world, ecs_type_t type, ecs_entity_t xor_tag);

    // FunctionExtern @ type.h:104
    [DllImport(LibraryName, EntryPoint = "ecs_type_index_of", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_type_index_of(ecs_type_t type, ecs_entity_t component);

    // FunctionExtern @ type.h:109
    [DllImport(LibraryName, EntryPoint = "ecs_type_match", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_type_match(ecs_type_t type, int start_index, ecs_entity_t pair);

    // FunctionExtern @ vector.h:98
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_new", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_vector_t* _ecs_vector_new(ecs_size_t elem_size, short offset, int elem_count);

    // FunctionExtern @ vector.h:111
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_from_array", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_vector_t* _ecs_vector_from_array(ecs_size_t elem_size, short offset, int elem_count, void* array);

    // FunctionExtern @ vector.h:122
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_zero", CallingConvention = CallingConvention.Cdecl)]
    public static extern void _ecs_vector_zero(ecs_vector_t* vector, ecs_size_t elem_size, short offset);

    // FunctionExtern @ vector.h:132
    [DllImport(LibraryName, EntryPoint = "ecs_vector_free", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_vector_free(ecs_vector_t* vector);

    // FunctionExtern @ vector.h:137
    [DllImport(LibraryName, EntryPoint = "ecs_vector_clear", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_vector_clear(ecs_vector_t* vector);

    // FunctionExtern @ vector.h:142
    [DllImport(LibraryName, EntryPoint = "ecs_vector_assert_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_vector_assert_size(ecs_vector_t* vector_inout, ecs_size_t elem_size);

    // FunctionExtern @ vector.h:148
    [DllImport(LibraryName, EntryPoint = "ecs_vector_assert_alignment", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_vector_assert_alignment(ecs_vector_t* vector, ecs_size_t elem_alignment);

    // FunctionExtern @ vector.h:154
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_add", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* _ecs_vector_add(ecs_vector_t** array_inout, ecs_size_t elem_size, short offset);

    // FunctionExtern @ vector.h:167
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_addn", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* _ecs_vector_addn(ecs_vector_t** array_inout, ecs_size_t elem_size, short offset, int elem_count);

    // FunctionExtern @ vector.h:181
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_get", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* _ecs_vector_get(ecs_vector_t* vector, ecs_size_t elem_size, short offset, int index);

    // FunctionExtern @ vector.h:195
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_last", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* _ecs_vector_last(ecs_vector_t* vector, ecs_size_t elem_size, short offset);

    // FunctionExtern @ vector.h:206
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_set_min_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern int _ecs_vector_set_min_size(ecs_vector_t** array_inout, ecs_size_t elem_size, short offset, int elem_count);

    // FunctionExtern @ vector.h:218
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_set_min_count", CallingConvention = CallingConvention.Cdecl)]
    public static extern int _ecs_vector_set_min_count(ecs_vector_t** vector_inout, ecs_size_t elem_size, short offset, int elem_count);

    // FunctionExtern @ vector.h:229
    [DllImport(LibraryName, EntryPoint = "ecs_vector_remove_last", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ecs_vector_remove_last(ecs_vector_t* vector);

    // FunctionExtern @ vector.h:234
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_pop", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool _ecs_vector_pop(ecs_vector_t* vector, ecs_size_t elem_size, short offset, void* value);

    // FunctionExtern @ vector.h:245
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_move_index", CallingConvention = CallingConvention.Cdecl)]
    public static extern int _ecs_vector_move_index(ecs_vector_t** dst, ecs_vector_t* src, ecs_size_t elem_size, short offset, int index);

    // FunctionExtern @ vector.h:257
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_remove_index", CallingConvention = CallingConvention.Cdecl)]
    public static extern int _ecs_vector_remove_index(ecs_vector_t* vector, ecs_size_t elem_size, short offset, int index);

    // FunctionExtern @ vector.h:271
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_reclaim", CallingConvention = CallingConvention.Cdecl)]
    public static extern void _ecs_vector_reclaim(ecs_vector_t** vector, ecs_size_t elem_size, short offset);

    // FunctionExtern @ vector.h:281
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_grow", CallingConvention = CallingConvention.Cdecl)]
    public static extern int _ecs_vector_grow(ecs_vector_t** vector, ecs_size_t elem_size, short offset, int elem_count);

    // FunctionExtern @ vector.h:292
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_set_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern int _ecs_vector_set_size(ecs_vector_t** vector, ecs_size_t elem_size, short offset, int elem_count);

    // FunctionExtern @ vector.h:307
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_set_count", CallingConvention = CallingConvention.Cdecl)]
    public static extern int _ecs_vector_set_count(ecs_vector_t** vector, ecs_size_t elem_size, short offset, int elem_count);

    // FunctionExtern @ vector.h:321
    [DllImport(LibraryName, EntryPoint = "ecs_vector_count", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_vector_count(ecs_vector_t* vector);

    // FunctionExtern @ vector.h:326
    [DllImport(LibraryName, EntryPoint = "ecs_vector_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ecs_vector_size(ecs_vector_t* vector);

    // FunctionExtern @ vector.h:331
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_first", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* _ecs_vector_first(ecs_vector_t* vector, ecs_size_t elem_size, short offset);

    // FunctionExtern @ vector.h:344
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_sort", CallingConvention = CallingConvention.Cdecl)]
    public static extern void _ecs_vector_sort(ecs_vector_t* vector, ecs_size_t elem_size, short offset, ecs_comparator_t compare_action);

    // FunctionExtern @ vector.h:355
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_memory", CallingConvention = CallingConvention.Cdecl)]
    public static extern void _ecs_vector_memory(ecs_vector_t* vector, ecs_size_t elem_size, short offset, int* allocd, int* used);

    // FunctionExtern @ vector.h:370
    [DllImport(LibraryName, EntryPoint = "_ecs_vector_copy", CallingConvention = CallingConvention.Cdecl)]
    public static extern ecs_vector_t* _ecs_vector_copy(ecs_vector_t* src, ecs_size_t elem_size, short offset);

    // FunctionPointer @ api_types.h:209
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_xtor_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_entity_t*, void*, ulong, int, void*, void> Pointer;
    }

    // FunctionPointer @ api_types.h:219
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_copy_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_entity_t*, ecs_entity_t*, void*, void*, ulong, int, void*, void> Pointer;
    }

    // FunctionPointer @ api_types.h:231
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_move_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_entity_t*, ecs_entity_t*, void*, void*, ulong, int, void*, void> Pointer;
    }

    // FunctionPointer @ flecs.h:121
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_iter_action_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_iter_t*, void> Pointer;
    }

    // FunctionPointer @ flecs.h:124
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_iter_next_action_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_iter_t*, CBool> Pointer;
    }

    // FunctionPointer @ flecs.h:128
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_compare_action_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_entity_t, void*, ecs_entity_t, void*, int> Pointer;
    }

    // FunctionPointer @ flecs.h:135
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_rank_type_action_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_type_t, int> Pointer;
    }

    // FunctionPointer @ flecs.h:141
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_module_action_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_world_t*, void> Pointer;
    }

    // FunctionPointer @ flecs.h:145
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_fini_action_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_world_t*, void*, void> Pointer;
    }

    // FunctionPointer @ flecs.h:150
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_ctx_free_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ os_api.h:58
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_proc_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void> Pointer;
    }

    // FunctionPointer @ os_api.h:62
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_init_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void> Pointer;
    }

    // FunctionPointer @ os_api.h:66
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_fini_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void> Pointer;
    }

    // FunctionPointer @ os_api.h:70
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_malloc_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_size_t, ecs_os_api_malloc_t> Pointer;
    }

    // FunctionPointer @ os_api.h:74
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_free_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ os_api.h:78
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_realloc_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, ecs_size_t, ecs_os_api_realloc_t> Pointer;
    }

    // FunctionPointer @ os_api.h:83
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_calloc_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_size_t, ecs_os_api_calloc_t> Pointer;
    }

    // FunctionPointer @ os_api.h:87
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_strdup_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sbyte*, ecs_os_api_strdup_t> Pointer;
    }

    // FunctionPointer @ os_api.h:92
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_thread_callback_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, ecs_os_thread_callback_t> Pointer;
    }

    // FunctionPointer @ os_api.h:96
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_thread_new_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_os_thread_callback_t, void*, ecs_os_thread_t> Pointer;
    }

    // FunctionPointer @ os_api.h:101
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_thread_join_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_os_thread_t, ecs_os_api_thread_join_t> Pointer;
    }

    // FunctionPointer @ os_api.h:107
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_ainc_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<int*, int> Pointer;
    }

    // FunctionPointer @ os_api.h:113
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_mutex_new_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_os_mutex_t> Pointer;
    }

    // FunctionPointer @ os_api.h:117
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_mutex_lock_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_os_mutex_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:125
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_mutex_free_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_os_mutex_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:130
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_cond_new_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_os_cond_t> Pointer;
    }

    // FunctionPointer @ os_api.h:134
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_cond_free_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_os_cond_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:138
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_cond_signal_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_os_cond_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:142
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_cond_broadcast_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_os_cond_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:146
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_cond_wait_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_os_cond_t, ecs_os_mutex_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:151
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_sleep_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<int, int, void> Pointer;
    }

    // FunctionPointer @ os_api.h:156
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_get_time_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_time_t*, void> Pointer;
    }

    // FunctionPointer @ os_api.h:161
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_log_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void> Pointer;
    }

    // FunctionPointer @ os_api.h:167
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_abort_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void> Pointer;
    }

    // FunctionPointer @ os_api.h:172
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_dlopen_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sbyte*, ecs_os_dl_t> Pointer;
    }

    // FunctionPointer @ os_api.h:176
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_dlproc_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_os_dl_t, sbyte*, ecs_os_proc_t> Pointer;
    }

    // FunctionPointer @ os_api.h:181
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_dlclose_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_os_dl_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:185
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_api_module_to_path_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<sbyte*, ecs_os_api_module_to_path_t> Pointer;
    }

    // FunctionPointer @ system.h:77
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_system_status_action_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_system_status_t, void*, void> Pointer;
    }

    // FunctionPointer @ vector.h:92
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_comparator_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public delegate* unmanaged<void*, void*, int> Pointer;
    }

    // Record @ api_types.h:31
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct ecs_record_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_table_t* table;

        [FieldOffset(8)] // size = 4, padding = 4
        public int row;
    }

    // Record @ api_types.h:69
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct ecs_entities_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t* array;

        [FieldOffset(8)] // size = 4, padding = 4
        public int count;
    }

    // Record @ api_types.h:80
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct ecs_page_iter_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int offset;

        [FieldOffset(4)] // size = 4, padding = 0
        public int limit;

        [FieldOffset(8)] // size = 4, padding = 0
        public int remaining;
    }

    // Record @ api_types.h:90
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct ecs_iter_table_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public int* columns;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_table_t* table;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_data_t* data;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_entity_t* components;

        [FieldOffset(32)] // size = 8, padding = 0
        public ecs_type_t* types;

        [FieldOffset(40)] // size = 8, padding = 0
        public ecs_ref_t* references;
    }

    // Record @ api_types.h:98
    [StructLayout(LayoutKind.Explicit, Size = 144, Pack = 8)]
    public struct ecs_scope_iter_t
    {
        [FieldOffset(0)] // size = 56, padding = 0
        public ecs_filter_t filter;

        [FieldOffset(56)] // size = 32, padding = 0
        public ecs_map_iter_t tables;

        [FieldOffset(88)] // size = 4, padding = 4
        public int index;

        [FieldOffset(96)] // size = 48, padding = 0
        public ecs_iter_table_t table;
    }

    // Record @ api_types.h:106
    [StructLayout(LayoutKind.Explicit, Size = 120, Pack = 8)]
    public struct ecs_filter_iter_t
    {
        [FieldOffset(0)] // size = 56, padding = 0
        public ecs_filter_t filter;

        [FieldOffset(56)] // size = 8, padding = 0
        public ecs_sparse_t* tables;

        [FieldOffset(64)] // size = 4, padding = 4
        public int index;

        [FieldOffset(72)] // size = 48, padding = 0
        public ecs_iter_table_t table;
    }

    // Record @ api_types.h:123
    [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
    public struct ecs_query_iter_t
    {
        [FieldOffset(0)] // size = 12, padding = 0
        public ecs_page_iter_t page_iter;

        [FieldOffset(12)] // size = 4, padding = 0
        public int index;

        [FieldOffset(16)] // size = 4, padding = 0
        public int sparse_smallest;

        [FieldOffset(20)] // size = 4, padding = 0
        public int sparse_first;

        [FieldOffset(24)] // size = 4, padding = 0
        public int bitset_first;
    }

    // Record @ api_types.h:131
    [StructLayout(LayoutKind.Explicit, Size = 120, Pack = 8)]
    public struct ecs_snapshot_iter_t
    {
        [FieldOffset(0)] // size = 56, padding = 0
        public ecs_filter_t filter;

        [FieldOffset(56)] // size = 8, padding = 0
        public ecs_vector_t* tables;

        [FieldOffset(64)] // size = 4, padding = 4
        public int index;

        [FieldOffset(72)] // size = 48, padding = 0
        public ecs_iter_table_t table;
    }

    // Record @ api_types.h:202
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct ecs_match_failure_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public EcsMatchFailureReason reason;

        [FieldOffset(4)] // size = 4, padding = 0
        public int column;
    }

    // Record @ dbg.h:23
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct ecs_dbg_entity_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t entity;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_table_t* table;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_type_t type;

        [FieldOffset(24)] // size = 4, padding = 0
        public int row;

        [FieldOffset(28)] // size = 1, padding = 3
        public CBool is_watched;
    }

    // Record @ dbg.h:35
    [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
    public struct ecs_dbg_table_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_table_t* table;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_type_t type;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_type_t shared;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_type_t container;

        [FieldOffset(32)] // size = 8, padding = 0
        public ecs_type_t parent_entities;

        [FieldOffset(40)] // size = 8, padding = 0
        public ecs_type_t base_entities;

        [FieldOffset(48)] // size = 8, padding = 0
        public ecs_vector_t* systems_matched;

        [FieldOffset(56)] // size = 8, padding = 0
        public ecs_entity_t* entities;

        [FieldOffset(64)] // size = 4, padding = 4
        public int entities_count;
    }

    // Record @ flecs.h:89
    [StructLayout(LayoutKind.Explicit, Size = 304, Pack = 8)]
    public struct ecs_iter_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_world_t* world;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_world_t* real_world;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_entity_t system;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_entity_t @event;

        [FieldOffset(32)] // size = 4, padding = 4
        public ecs_query_iter_kind_t kind;

        [FieldOffset(40)] // size = 8, padding = 0
        public ecs_iter_table_t* table;

        [FieldOffset(48)] // size = 8, padding = 0
        public ecs_query_t* query;

        [FieldOffset(56)] // size = 4, padding = 0
        public int table_count;

        [FieldOffset(60)] // size = 4, padding = 0
        public int inactive_table_count;

        [FieldOffset(64)] // size = 4, padding = 4
        public int column_count;

        [FieldOffset(72)] // size = 8, padding = 0
        public void* table_columns;

        [FieldOffset(80)] // size = 8, padding = 0
        public ecs_entity_t* entities;

        [FieldOffset(88)] // size = 8, padding = 0
        public void* param;

        [FieldOffset(96)] // size = 8, padding = 0
        public void* ctx;

        [FieldOffset(104)] // size = 8, padding = 0
        public void* binding_ctx;

        [FieldOffset(112)] // size = 4, padding = 0
        public float delta_time;

        [FieldOffset(116)] // size = 4, padding = 0
        public float delta_system_time;

        [FieldOffset(120)] // size = 4, padding = 0
        public float world_time;

        [FieldOffset(124)] // size = 4, padding = 0
        public int frame_offset;

        [FieldOffset(128)] // size = 4, padding = 0
        public int offset;

        [FieldOffset(132)] // size = 4, padding = 0
        public int count;

        [FieldOffset(136)] // size = 4, padding = 4
        public int total_count;

        [FieldOffset(144)] // size = 8, padding = 0
        public ecs_entities_t* triggered_by;

        [FieldOffset(152)] // size = 8, padding = 0
        public ecs_entity_t interrupted_by;

        [FieldOffset(160)] // size = 144, padding = 0
        public Anonymous_Union_iter iter;


        // Record @ api_types.h:170
        [StructLayout(LayoutKind.Explicit, Size = 144, Pack = 8)]
        public struct Anonymous_Union_iter
        {
            [FieldOffset(0)] // size = 144, padding = 0
            public ecs_scope_iter_t parent;

            [FieldOffset(0)] // size = 120, padding = 0
            public ecs_filter_iter_t filter;

            [FieldOffset(0)] // size = 28, padding = 0
            public ecs_query_iter_t query;

            [FieldOffset(0)] // size = 120, padding = 24
            public ecs_snapshot_iter_t snapshot;
        }

    }

    // Record @ flecs.h:92
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct ecs_ref_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t entity;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_entity_t component;

        [FieldOffset(16)] // size = 8, padding = 0
        public void* table;

        [FieldOffset(24)] // size = 4, padding = 0
        public int row;

        [FieldOffset(28)] // size = 4, padding = 0
        public int alloc_count;

        [FieldOffset(32)] // size = 8, padding = 0
        public ecs_record_t* @record;

        [FieldOffset(40)] // size = 8, padding = 0
        public void* ptr;
    }

    // Record @ flecs.h:205
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct ecs_term_set_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t relation;

        [FieldOffset(8)] // size = 1, padding = 3
        public byte mask;

        [FieldOffset(12)] // size = 4, padding = 0
        public int min_depth;

        [FieldOffset(16)] // size = 4, padding = 4
        public int max_depth;
    }

    // Record @ flecs.h:214
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct ecs_term_id_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t entity;

        [FieldOffset(8)] // size = 8, padding = 0
        public sbyte* name;

        [FieldOffset(16)] // size = 4, padding = 4
        public ecs_var_kind_t var;

        [FieldOffset(24)] // size = 24, padding = 0
        public ecs_term_set_t set;
    }

    // Record @ flecs.h:236
    [StructLayout(LayoutKind.Explicit, Size = 192, Pack = 8)]
    public struct ecs_term_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_id_t id;

        [FieldOffset(8)] // size = 4, padding = 4
        public ecs_inout_kind_t inout;

        [FieldOffset(16)] // size = 48, padding = 0
        public ecs_term_id_t pred;

        [FieldOffset(64)] // size = 96, padding = 0
        public fixed ulong _args[96 / 8]; // original type is `ecs_term_id_t [2]`

        public ref ecs_term_id_t args(int index = 0)
        {
            fixed (ecs_term_t* @this = &this)
            {
                var pointer = (ecs_term_id_t*)&@this->_args[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(160)] // size = 4, padding = 4
        public ecs_oper_kind_t oper;

        [FieldOffset(168)] // size = 8, padding = 0
        public ecs_id_t role;

        [FieldOffset(176)] // size = 8, padding = 0
        public sbyte* name;

        [FieldOffset(184)] // size = 4, padding = 0
        public int index;

        [FieldOffset(188)] // size = 1, padding = 3
        public CBool move;
    }

    // Record @ flecs.h:261
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct ecs_filter_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_term_t* terms;

        [FieldOffset(8)] // size = 4, padding = 0
        public int term_count;

        [FieldOffset(12)] // size = 4, padding = 0
        public int term_count_actual;

        [FieldOffset(16)] // size = 8, padding = 0
        public sbyte* name;

        [FieldOffset(24)] // size = 8, padding = 0
        public sbyte* expr;

        [FieldOffset(32)] // size = 8, padding = 0
        public ecs_type_t include;

        [FieldOffset(40)] // size = 8, padding = 0
        public ecs_type_t exclude;

        [FieldOffset(48)] // size = 4, padding = 0
        public ecs_match_kind_t include_kind;

        [FieldOffset(52)] // size = 4, padding = 0
        public ecs_match_kind_t exclude_kind;
    }

    // Record @ flecs.h:332
    [StructLayout(LayoutKind.Explicit, Size = 568, Pack = 8)]
    public struct ecs_entity_desc_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t entity;

        [FieldOffset(8)] // size = 8, padding = 0
        public sbyte* name;

        [FieldOffset(16)] // size = 8, padding = 0
        public sbyte* sep;

        [FieldOffset(24)] // size = 8, padding = 0
        public sbyte* symbol;

        [FieldOffset(32)] // size = 1, padding = 7
        public CBool use_low_id;

        [FieldOffset(40)] // size = 256, padding = 0
        public fixed ulong _add[256 / 8]; // original type is `ecs_id_t [32]`

        public ref ecs_id_t add(int index = 0)
        {
            fixed (ecs_entity_desc_t* @this = &this)
            {
                var pointer = (ecs_id_t*)&@this->_add[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(296)] // size = 256, padding = 0
        public fixed ulong _remove[256 / 8]; // original type is `ecs_id_t [32]`

        public ref ecs_id_t remove(int index = 0)
        {
            fixed (ecs_entity_desc_t* @this = &this)
            {
                var pointer = (ecs_id_t*)&@this->_remove[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(552)] // size = 8, padding = 0
        public sbyte* add_expr;

        [FieldOffset(560)] // size = 8, padding = 0
        public sbyte* remove_expr;
    }

    // Record @ flecs.h:340
    [StructLayout(LayoutKind.Explicit, Size = 584, Pack = 8)]
    public struct ecs_component_desc_t
    {
        [FieldOffset(0)] // size = 568, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(568)] // size = 8, padding = 0
        public ulong size;

        [FieldOffset(576)] // size = 8, padding = 0
        public ulong alignment;
    }

    // Record @ flecs.h:348
    [StructLayout(LayoutKind.Explicit, Size = 832, Pack = 8)]
    public struct ecs_type_desc_t
    {
        [FieldOffset(0)] // size = 568, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(568)] // size = 256, padding = 0
        public fixed ulong _ids[256 / 8]; // original type is `ecs_id_t [32]`

        public ref ecs_id_t ids(int index = 0)
        {
            fixed (ecs_type_desc_t* @this = &this)
            {
                var pointer = (ecs_id_t*)&@this->_ids[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(824)] // size = 8, padding = 0
        public sbyte* ids_expr;
    }

    // Record @ flecs.h:371
    [StructLayout(LayoutKind.Explicit, Size = 3104, Pack = 8)]
    public struct ecs_filter_desc_t
    {
        [FieldOffset(0)] // size = 3072, padding = 0
        public fixed ulong _terms[3072 / 8]; // original type is `ecs_term_t [16]`

        public ref ecs_term_t terms(int index = 0)
        {
            fixed (ecs_filter_desc_t* @this = &this)
            {
                var pointer = (ecs_term_t*)&@this->_terms[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(3072)] // size = 8, padding = 0
        public ecs_term_t* terms_buffer;

        [FieldOffset(3080)] // size = 4, padding = 0
        public int terms_buffer_count;

        [FieldOffset(3084)] // size = 1, padding = 3
        public CBool substitute_default;

        [FieldOffset(3088)] // size = 8, padding = 0
        public sbyte* expr;

        [FieldOffset(3096)] // size = 8, padding = 0
        public sbyte* name;
    }

    // Record @ flecs.h:405
    [StructLayout(LayoutKind.Explicit, Size = 3152, Pack = 8)]
    public struct ecs_query_desc_t
    {
        [FieldOffset(0)] // size = 3104, padding = 0
        public ecs_filter_desc_t filter;

        [FieldOffset(3104)] // size = 8, padding = 0
        public ecs_id_t order_by_id;

        [FieldOffset(3112)] // size = 8, padding = 0
        public ecs_compare_action_t order_by;

        [FieldOffset(3120)] // size = 8, padding = 0
        public ecs_id_t group_by_id;

        [FieldOffset(3128)] // size = 8, padding = 0
        public ecs_rank_type_action_t group_by;

        [FieldOffset(3136)] // size = 8, padding = 0
        public ecs_query_t* parent;

        [FieldOffset(3144)] // size = 8, padding = 0
        public ecs_entity_t system;
    }

    // Record @ flecs.h:440
    [StructLayout(LayoutKind.Explicit, Size = 880, Pack = 8)]
    public struct ecs_trigger_desc_t
    {
        [FieldOffset(0)] // size = 568, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(568)] // size = 192, padding = 0
        public ecs_term_t term;

        [FieldOffset(760)] // size = 8, padding = 0
        public sbyte* name;

        [FieldOffset(768)] // size = 8, padding = 0
        public sbyte* expr;

        [FieldOffset(776)] // size = 64, padding = 0
        public fixed ulong _events[64 / 8]; // original type is `ecs_entity_t [8]`

        public ref ecs_entity_t events(int index = 0)
        {
            fixed (ecs_trigger_desc_t* @this = &this)
            {
                var pointer = (ecs_entity_t*)&@this->_events[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(840)] // size = 8, padding = 0
        public ecs_iter_action_t callback;

        [FieldOffset(848)] // size = 8, padding = 0
        public void* ctx;

        [FieldOffset(856)] // size = 8, padding = 0
        public void* binding_ctx;

        [FieldOffset(864)] // size = 8, padding = 0
        public ecs_ctx_free_t ctx_free;

        [FieldOffset(872)] // size = 8, padding = 0
        public ecs_ctx_free_t binding_ctx_free;
    }

    // Record @ flecs.h:479
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct EcsComponentLifecycle
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_xtor_t ctor;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_xtor_t dtor;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_copy_t copy;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_move_t move;

        [FieldOffset(32)] // size = 8, padding = 0
        public void* ctx;
    }

    // Record @ flecs.h:520
    [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
    public struct ecs_world_info_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t last_component_id;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_entity_t last_id;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_entity_t min_id;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_entity_t max_id;

        [FieldOffset(32)] // size = 4, padding = 0
        public float delta_time_raw;

        [FieldOffset(36)] // size = 4, padding = 0
        public float delta_time;

        [FieldOffset(40)] // size = 4, padding = 0
        public float time_scale;

        [FieldOffset(44)] // size = 4, padding = 0
        public float target_fps;

        [FieldOffset(48)] // size = 4, padding = 0
        public float frame_time_total;

        [FieldOffset(52)] // size = 4, padding = 0
        public float system_time_total;

        [FieldOffset(56)] // size = 4, padding = 0
        public float merge_time_total;

        [FieldOffset(60)] // size = 4, padding = 0
        public float world_time_total;

        [FieldOffset(64)] // size = 4, padding = 0
        public float world_time_total_raw;

        [FieldOffset(68)] // size = 4, padding = 0
        public int frame_count_total;

        [FieldOffset(72)] // size = 4, padding = 0
        public int merge_count_total;

        [FieldOffset(76)] // size = 4, padding = 0
        public int pipeline_build_count_total;

        [FieldOffset(80)] // size = 4, padding = 4
        public int systems_ran_frame;
    }

    // Record @ map.h:46
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct ecs_map_iter_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_map_t* map;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_bucket_t* bucket;

        [FieldOffset(16)] // size = 4, padding = 0
        public int bucket_index;

        [FieldOffset(20)] // size = 4, padding = 0
        public int element_index;

        [FieldOffset(24)] // size = 8, padding = 0
        public void* payload;
    }

    // Record @ os_api.h:43
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct ecs_time_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint sec;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint nanosec;
    }

    // Record @ os_api.h:251
    [StructLayout(LayoutKind.Explicit, Size = 256, Pack = 8)]
    public struct ecs_os_api_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_os_api_init_t init_;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_os_api_fini_t fini_;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_os_api_malloc_t malloc_;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_os_api_realloc_t realloc_;

        [FieldOffset(32)] // size = 8, padding = 0
        public ecs_os_api_calloc_t calloc_;

        [FieldOffset(40)] // size = 8, padding = 0
        public ecs_os_api_free_t free_;

        [FieldOffset(48)] // size = 8, padding = 0
        public ecs_os_api_strdup_t strdup_;

        [FieldOffset(56)] // size = 8, padding = 0
        public ecs_os_api_thread_new_t thread_new_;

        [FieldOffset(64)] // size = 8, padding = 0
        public ecs_os_api_thread_join_t thread_join_;

        [FieldOffset(72)] // size = 8, padding = 0
        public ecs_os_api_ainc_t ainc_;

        [FieldOffset(80)] // size = 8, padding = 0
        public ecs_os_api_ainc_t adec_;

        [FieldOffset(88)] // size = 8, padding = 0
        public ecs_os_api_mutex_new_t mutex_new_;

        [FieldOffset(96)] // size = 8, padding = 0
        public ecs_os_api_mutex_free_t mutex_free_;

        [FieldOffset(104)] // size = 8, padding = 0
        public ecs_os_api_mutex_lock_t mutex_lock_;

        [FieldOffset(112)] // size = 8, padding = 0
        public ecs_os_api_mutex_lock_t mutex_unlock_;

        [FieldOffset(120)] // size = 8, padding = 0
        public ecs_os_api_cond_new_t cond_new_;

        [FieldOffset(128)] // size = 8, padding = 0
        public ecs_os_api_cond_free_t cond_free_;

        [FieldOffset(136)] // size = 8, padding = 0
        public ecs_os_api_cond_signal_t cond_signal_;

        [FieldOffset(144)] // size = 8, padding = 0
        public ecs_os_api_cond_broadcast_t cond_broadcast_;

        [FieldOffset(152)] // size = 8, padding = 0
        public ecs_os_api_cond_wait_t cond_wait_;

        [FieldOffset(160)] // size = 8, padding = 0
        public ecs_os_api_sleep_t sleep_;

        [FieldOffset(168)] // size = 8, padding = 0
        public ecs_os_api_get_time_t get_time_;

        [FieldOffset(176)] // size = 8, padding = 0
        public ecs_os_api_log_t log_;

        [FieldOffset(184)] // size = 8, padding = 0
        public ecs_os_api_log_t log_error_;

        [FieldOffset(192)] // size = 8, padding = 0
        public ecs_os_api_log_t log_debug_;

        [FieldOffset(200)] // size = 8, padding = 0
        public ecs_os_api_log_t log_warning_;

        [FieldOffset(208)] // size = 8, padding = 0
        public ecs_os_api_abort_t abort_;

        [FieldOffset(216)] // size = 8, padding = 0
        public ecs_os_api_dlopen_t dlopen_;

        [FieldOffset(224)] // size = 8, padding = 0
        public ecs_os_api_dlproc_t dlproc_;

        [FieldOffset(232)] // size = 8, padding = 0
        public ecs_os_api_dlclose_t dlclose_;

        [FieldOffset(240)] // size = 8, padding = 0
        public ecs_os_api_module_to_path_t module_to_dl_;

        [FieldOffset(248)] // size = 8, padding = 0
        public ecs_os_api_module_to_path_t module_to_etc_;
    }

    // Record @ reader_writer.h:81
    [StructLayout(LayoutKind.Explicit, Size = 104, Pack = 8)]
    public struct ecs_table_reader_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public ecs_blob_header_kind_t state;

        [FieldOffset(4)] // size = 4, padding = 0
        public int table_index;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_table_t* table;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_data_t* data;

        [FieldOffset(24)] // size = 4, padding = 4
        public ecs_size_t type_written;

        [FieldOffset(32)] // size = 8, padding = 0
        public ecs_type_t type;

        [FieldOffset(40)] // size = 8, padding = 0
        public ecs_vector_t* column_vector;

        [FieldOffset(48)] // size = 4, padding = 0
        public int column_index;

        [FieldOffset(52)] // size = 4, padding = 0
        public int total_columns;

        [FieldOffset(56)] // size = 8, padding = 0
        public void* column_data;

        [FieldOffset(64)] // size = 2, padding = 0
        public short column_size;

        [FieldOffset(66)] // size = 2, padding = 0
        public short column_alignment;

        [FieldOffset(68)] // size = 4, padding = 0
        public ecs_size_t column_written;

        [FieldOffset(72)] // size = 4, padding = 0
        public int row_index;

        [FieldOffset(76)] // size = 4, padding = 0
        public int row_count;

        [FieldOffset(80)] // size = 8, padding = 0
        public sbyte* name;

        [FieldOffset(88)] // size = 4, padding = 0
        public ecs_size_t name_len;

        [FieldOffset(92)] // size = 4, padding = 0
        public ecs_size_t name_written;

        [FieldOffset(96)] // size = 1, padding = 7
        public CBool has_next_table;
    }

    // Record @ reader_writer.h:91
    [StructLayout(LayoutKind.Explicit, Size = 744, Pack = 8)]
    public struct ecs_reader_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_world_t* world;

        [FieldOffset(8)] // size = 4, padding = 4
        public ecs_blob_header_kind_t state;

        [FieldOffset(16)] // size = 304, padding = 0
        public ecs_iter_t data_iter;

        [FieldOffset(320)] // size = 8, padding = 0
        public ecs_iter_next_action_t data_next;

        [FieldOffset(328)] // size = 304, padding = 0
        public ecs_iter_t component_iter;

        [FieldOffset(632)] // size = 8, padding = 0
        public ecs_iter_next_action_t component_next;

        [FieldOffset(640)] // size = 104, padding = 0
        public ecs_table_reader_t table;
    }

    // Record @ reader_writer.h:98
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct ecs_name_writer_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public sbyte* name;

        [FieldOffset(8)] // size = 4, padding = 0
        public int written;

        [FieldOffset(12)] // size = 4, padding = 0
        public int len;

        [FieldOffset(16)] // size = 4, padding = 4
        public int max_len;
    }

    // Record @ reader_writer.h:121
    [StructLayout(LayoutKind.Explicit, Size = 104, Pack = 8)]
    public struct ecs_table_writer_t
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public ecs_blob_header_kind_t state;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_table_t* table;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_vector_t* column_vector;

        [FieldOffset(24)] // size = 4, padding = 0
        public int type_count;

        [FieldOffset(28)] // size = 4, padding = 0
        public int type_max_count;

        [FieldOffset(32)] // size = 4, padding = 4
        public ecs_size_t type_written;

        [FieldOffset(40)] // size = 8, padding = 0
        public ecs_entity_t* type_array;

        [FieldOffset(48)] // size = 4, padding = 0
        public int column_index;

        [FieldOffset(52)] // size = 2, padding = 0
        public short column_size;

        [FieldOffset(54)] // size = 2, padding = 0
        public short column_alignment;

        [FieldOffset(56)] // size = 4, padding = 4
        public ecs_size_t column_written;

        [FieldOffset(64)] // size = 8, padding = 0
        public void* column_data;

        [FieldOffset(72)] // size = 4, padding = 0
        public int row_count;

        [FieldOffset(76)] // size = 4, padding = 0
        public int row_index;

        [FieldOffset(80)] // size = 24, padding = 0
        public ecs_name_writer_t name;
    }

    // Record @ reader_writer.h:128
    [StructLayout(LayoutKind.Explicit, Size = 128, Pack = 8)]
    public struct ecs_writer_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_world_t* world;

        [FieldOffset(8)] // size = 4, padding = 4
        public ecs_blob_header_kind_t state;

        [FieldOffset(16)] // size = 104, padding = 0
        public ecs_table_writer_t table;

        [FieldOffset(120)] // size = 4, padding = 4
        public int error;
    }

    // Record @ stats.h:29
    [StructLayout(LayoutKind.Explicit, Size = 720, Pack = 4)]
    public struct ecs_gauge_t
    {
        [FieldOffset(0)] // size = 240, padding = 0
        public fixed float _avg[240 / 4]; // original type is `float [60]`

        [FieldOffset(240)] // size = 240, padding = 0
        public fixed float _min[240 / 4]; // original type is `float [60]`

        [FieldOffset(480)] // size = 240, padding = 0
        public fixed float _max[240 / 4]; // original type is `float [60]`
    }

    // Record @ stats.h:35
    [StructLayout(LayoutKind.Explicit, Size = 960, Pack = 4)]
    public struct ecs_counter_t
    {
        [FieldOffset(0)] // size = 720, padding = 0
        public ecs_gauge_t rate;

        [FieldOffset(720)] // size = 240, padding = 0
        public fixed float _value[240 / 4]; // original type is `float [60]`
    }

    // Record @ stats.h:78
    [StructLayout(LayoutKind.Explicit, Size = 24248, Pack = 4)]
    public struct ecs_world_stats_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int dummy_;

        [FieldOffset(4)] // size = 720, padding = 0
        public ecs_gauge_t entity_count;

        [FieldOffset(724)] // size = 720, padding = 0
        public ecs_gauge_t component_count;

        [FieldOffset(1444)] // size = 720, padding = 0
        public ecs_gauge_t query_count;

        [FieldOffset(2164)] // size = 720, padding = 0
        public ecs_gauge_t system_count;

        [FieldOffset(2884)] // size = 720, padding = 0
        public ecs_gauge_t table_count;

        [FieldOffset(3604)] // size = 720, padding = 0
        public ecs_gauge_t empty_table_count;

        [FieldOffset(4324)] // size = 720, padding = 0
        public ecs_gauge_t singleton_table_count;

        [FieldOffset(5044)] // size = 720, padding = 0
        public ecs_gauge_t matched_entity_count;

        [FieldOffset(5764)] // size = 720, padding = 0
        public ecs_gauge_t matched_table_count;

        [FieldOffset(6484)] // size = 960, padding = 0
        public ecs_counter_t new_count;

        [FieldOffset(7444)] // size = 960, padding = 0
        public ecs_counter_t bulk_new_count;

        [FieldOffset(8404)] // size = 960, padding = 0
        public ecs_counter_t delete_count;

        [FieldOffset(9364)] // size = 960, padding = 0
        public ecs_counter_t clear_count;

        [FieldOffset(10324)] // size = 960, padding = 0
        public ecs_counter_t add_count;

        [FieldOffset(11284)] // size = 960, padding = 0
        public ecs_counter_t remove_count;

        [FieldOffset(12244)] // size = 960, padding = 0
        public ecs_counter_t set_count;

        [FieldOffset(13204)] // size = 960, padding = 0
        public ecs_counter_t discard_count;

        [FieldOffset(14164)] // size = 960, padding = 0
        public ecs_counter_t world_time_total_raw;

        [FieldOffset(15124)] // size = 960, padding = 0
        public ecs_counter_t world_time_total;

        [FieldOffset(16084)] // size = 960, padding = 0
        public ecs_counter_t frame_time_total;

        [FieldOffset(17044)] // size = 960, padding = 0
        public ecs_counter_t system_time_total;

        [FieldOffset(18004)] // size = 960, padding = 0
        public ecs_counter_t merge_time_total;

        [FieldOffset(18964)] // size = 720, padding = 0
        public ecs_gauge_t fps;

        [FieldOffset(19684)] // size = 720, padding = 0
        public ecs_gauge_t delta_time;

        [FieldOffset(20404)] // size = 960, padding = 0
        public ecs_counter_t frame_count_total;

        [FieldOffset(21364)] // size = 960, padding = 0
        public ecs_counter_t merge_count_total;

        [FieldOffset(22324)] // size = 960, padding = 0
        public ecs_counter_t pipeline_build_count_total;

        [FieldOffset(23284)] // size = 960, padding = 0
        public ecs_counter_t systems_ran_frame;

        [FieldOffset(24244)] // size = 4, padding = 0
        public int t;
    }

    // Record @ stats.h:92
    [StructLayout(LayoutKind.Explicit, Size = 2164, Pack = 4)]
    public struct ecs_query_stats_t
    {
        [FieldOffset(0)] // size = 720, padding = 0
        public ecs_gauge_t matched_table_count;

        [FieldOffset(720)] // size = 720, padding = 0
        public ecs_gauge_t matched_empty_table_count;

        [FieldOffset(1440)] // size = 720, padding = 0
        public ecs_gauge_t matched_entity_count;

        [FieldOffset(2160)] // size = 4, padding = 0
        public int t;
    }

    // Record @ stats.h:101
    [StructLayout(LayoutKind.Explicit, Size = 5524, Pack = 4)]
    public struct ecs_system_stats_t
    {
        [FieldOffset(0)] // size = 2164, padding = 0
        public ecs_query_stats_t query_stats;

        [FieldOffset(2164)] // size = 960, padding = 0
        public ecs_counter_t time_spent;

        [FieldOffset(3124)] // size = 960, padding = 0
        public ecs_counter_t invoke_count;

        [FieldOffset(4084)] // size = 720, padding = 0
        public ecs_gauge_t active;

        [FieldOffset(4804)] // size = 720, padding = 0
        public ecs_gauge_t enabled;
    }

    // Record @ stats.h:112
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct ecs_pipeline_stats_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_vector_t* systems;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_map_t* system_stats;
    }

    // Record @ strbuf.h:35
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct ecs_strbuf_element
    {
        [FieldOffset(0)] // size = 1, padding = 3
        public CBool buffer_embedded;

        [FieldOffset(4)] // size = 4, padding = 0
        public int pos;

        [FieldOffset(8)] // size = 8, padding = 0
        public sbyte* buf;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_strbuf_element* next;
    }

    // Record @ strbuf.h:40
    [StructLayout(LayoutKind.Explicit, Size = 536, Pack = 8)]
    public struct ecs_strbuf_element_embedded
    {
        [FieldOffset(0)] // size = 24, padding = 0
        public ecs_strbuf_element super;

        [FieldOffset(24)] // size = 512, padding = 0
        public fixed sbyte _buf[512 / 1]; // original type is `char [512]`
    }

    // Record @ strbuf.h:50
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct ecs_strbuf_list_elem
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public int count;

        [FieldOffset(8)] // size = 8, padding = 0
        public sbyte* separator;
    }

    // Record @ strbuf.h:75
    [StructLayout(LayoutKind.Explicit, Size = 1088, Pack = 8)]
    public struct ecs_strbuf_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public sbyte* buf;

        [FieldOffset(8)] // size = 4, padding = 0
        public int max;

        [FieldOffset(12)] // size = 4, padding = 0
        public int size;

        [FieldOffset(16)] // size = 4, padding = 4
        public int elementCount;

        [FieldOffset(24)] // size = 536, padding = 0
        public ecs_strbuf_element_embedded firstElement;

        [FieldOffset(560)] // size = 8, padding = 0
        public ecs_strbuf_element* current;

        [FieldOffset(568)] // size = 512, padding = 0
        public fixed ulong _list_stack[512 / 8]; // original type is `ecs_strbuf_list_elem [32]`

        public ref ecs_strbuf_list_elem list_stack(int index = 0)
        {
            fixed (ecs_strbuf_t* @this = &this)
            {
                var pointer = (ecs_strbuf_list_elem*)&@this->_list_stack[0];
                var pointerOffset = index;
                return ref *(pointer + pointerOffset);
            }
        }

        [FieldOffset(1080)] // size = 4, padding = 4
        public int list_sp;
    }

    // Record @ system.h:121
    [StructLayout(LayoutKind.Explicit, Size = 3800, Pack = 8)]
    public struct ecs_system_desc_t
    {
        [FieldOffset(0)] // size = 568, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(568)] // size = 3152, padding = 0
        public ecs_query_desc_t query;

        [FieldOffset(3720)] // size = 8, padding = 0
        public ecs_iter_action_t callback;

        [FieldOffset(3728)] // size = 8, padding = 0
        public ecs_system_status_action_t status_callback;

        [FieldOffset(3736)] // size = 8, padding = 0
        public void* ctx;

        [FieldOffset(3744)] // size = 8, padding = 0
        public void* status_ctx;

        [FieldOffset(3752)] // size = 8, padding = 0
        public void* binding_ctx;

        [FieldOffset(3760)] // size = 8, padding = 0
        public ecs_ctx_free_t ctx_free;

        [FieldOffset(3768)] // size = 8, padding = 0
        public ecs_ctx_free_t status_ctx_free;

        [FieldOffset(3776)] // size = 8, padding = 0
        public ecs_ctx_free_t binding_ctx_free;

        [FieldOffset(3784)] // size = 4, padding = 0
        public float interval;

        [FieldOffset(3788)] // size = 4, padding = 0
        public int rate;

        [FieldOffset(3792)] // size = 8, padding = 0
        public ecs_entity_t tick_source;
    }

    // Record @ system.h:277
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct ecs_dbg_system_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t system;

        [FieldOffset(8)] // size = 4, padding = 0
        public int entities_matched_count;

        [FieldOffset(12)] // size = 4, padding = 0
        public int active_table_count;

        [FieldOffset(16)] // size = 4, padding = 0
        public int inactive_table_count;

        [FieldOffset(20)] // size = 1, padding = 3
        public CBool enabled;

        [FieldOffset(24)] // size = 8, padding = 0
        public void* system_data;
    }

    // Record @ vector.h:90
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct ecs_vector_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int count;

        [FieldOffset(4)] // size = 4, padding = 0
        public int size;

        [FieldOffset(8)] // size = 8, padding = 0
        public long elem_size;
    }

    // Typedef @ api_defines.h:67
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct ecs_size_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Alias;
    }

    // Typedef @ flecs.h:71
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_id_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong Alias;
    }

    // Typedef @ flecs.h:74
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_entity_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong Alias;
    }

    // Typedef @ flecs.h:77
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_type_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_vector_t* Alias;
    }

    // Typedef @ map.h:38
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_map_key_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong Alias;
    }

    // Typedef @ os_api.h:52
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_thread_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong Alias;
    }

    // Typedef @ os_api.h:53
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_cond_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong Alias;
    }

    // Typedef @ os_api.h:54
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_mutex_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong Alias;
    }

    // Typedef @ os_api.h:55
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_dl_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong Alias;
    }

    // OpaqueDataType @ api_types.h:28
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_table_t
    {
    }

    // OpaqueDataType @ api_types.h:37
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_data_t
    {
    }

    // OpaqueDataType @ api_types.h:40
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_sparse_t
    {
    }

    // OpaqueDataType @ flecs.h:80
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_world_t
    {
    }

    // OpaqueDataType @ flecs.h:83
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_query_t
    {
    }

    // OpaqueDataType @ flecs.h:905
    [StructLayout(LayoutKind.Sequential)]
    public struct argv
    {
    }

    // OpaqueDataType @ map.h:36
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_map_t
    {
    }

    // OpaqueDataType @ map.h:37
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_bucket_t
    {
    }

    // OpaqueDataType @ queue.h:18
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_queue_t
    {
    }

    // OpaqueDataType @ snapshot.h:23
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_snapshot_t
    {
    }

    // Enum @ api_types.h:114
    public enum ecs_query_iter_kind_t : uint
    {
        EcsQuerySimpleIter = 0U,
        EcsQueryPagedIter = 1U,
        EcsQuerySortedIter = 2U,
        EcsQuerySwitchIter = 3U
    }

    // Enum @ api_types.h:197
    public enum EcsMatchFailureReason : uint
    {
        EcsMatchOk = 0U,
        EcsMatchNotASystem = 1U,
        EcsMatchSystemIsATask = 2U,
        EcsMatchEntityIsDisabled = 3U,
        EcsMatchEntityIsPrefab = 4U,
        EcsMatchFromSelf = 5U,
        EcsMatchFromOwned = 6U,
        EcsMatchFromShared = 7U,
        EcsMatchFromContainer = 8U,
        EcsMatchFromEntity = 9U,
        EcsMatchOrFromSelf = 10U,
        EcsMatchOrFromOwned = 11U,
        EcsMatchOrFromShared = 12U,
        EcsMatchOrFromContainer = 13U,
        EcsMatchNotFromSelf = 14U,
        EcsMatchNotFromOwned = 15U,
        EcsMatchNotFromShared = 16U,
        EcsMatchNotFromContainer = 17U
    }

    // Enum @ flecs.h:176
    public enum ecs_inout_kind_t : uint
    {
        EcsInOutDefault = 0U,
        EcsInOut = 1U,
        EcsIn = 2U,
        EcsOut = 3U
    }

    // Enum @ flecs.h:183
    public enum ecs_var_kind_t : uint
    {
        EcsVarDefault = 0U,
        EcsVarIsEntity = 1U,
        EcsVarIsVariable = 2U
    }

    // Enum @ flecs.h:194
    public enum ecs_oper_kind_t : uint
    {
        EcsAnd = 0U,
        EcsOr = 1U,
        EcsNot = 2U,
        EcsOptional = 3U,
        EcsAndFrom = 4U,
        EcsOrFrom = 5U,
        EcsNotFrom = 6U
    }

    // Enum @ flecs.h:244
    public enum ecs_match_kind_t : uint
    {
        EcsMatchDefault = 0U,
        EcsMatchAll = 1U,
        EcsMatchAny = 2U,
        EcsMatchExact = 3U
    }

    // Enum @ reader_writer.h:47
    public enum ecs_blob_header_kind_t : uint
    {
        EcsStreamHeader = 0U,
        EcsTableSegment = 1U,
        EcsFooterSegment = 2U,
        EcsTableHeader = 3U,
        EcsTableTypeSize = 4U,
        EcsTableType = 5U,
        EcsTableSize = 6U,
        EcsTableColumn = 7U,
        EcsTableColumnHeader = 8U,
        EcsTableColumnSize = 9U,
        EcsTableColumnData = 10U,
        EcsTableColumnNameHeader = 11U,
        EcsTableColumnNameLength = 12U,
        EcsTableColumnName = 13U,
        EcsStreamFooter = 14U
    }

    // Enum @ system.h:52
    public enum ecs_system_status_t : uint
    {
        EcsSystemStatusNone = 0U,
        EcsSystemEnabled = 1U,
        EcsSystemDisabled = 2U,
        EcsSystemActivated = 3U,
        EcsSystemDeactivated = 4U
    }

    // Variable @ os_api.h:46
    private static IntPtr _ecs_os_api_malloc_count;
    public static long ecs_os_api_malloc_count
    {
        get
        {
            if (_ecs_os_api_malloc_count == IntPtr.Zero)
            {
                return default(long);
            }

            var value = NativeTools.MemoryRead<long>(_ecs_os_api_malloc_count);
            return value;
        }
    }

    // Variable @ os_api.h:47
    private static IntPtr _ecs_os_api_realloc_count;
    public static long ecs_os_api_realloc_count
    {
        get
        {
            if (_ecs_os_api_realloc_count == IntPtr.Zero)
            {
                return default(long);
            }

            var value = NativeTools.MemoryRead<long>(_ecs_os_api_realloc_count);
            return value;
        }
    }

    // Variable @ os_api.h:48
    private static IntPtr _ecs_os_api_calloc_count;
    public static long ecs_os_api_calloc_count
    {
        get
        {
            if (_ecs_os_api_calloc_count == IntPtr.Zero)
            {
                return default(long);
            }

            var value = NativeTools.MemoryRead<long>(_ecs_os_api_calloc_count);
            return value;
        }
    }

    // Variable @ os_api.h:49
    private static IntPtr _ecs_os_api_free_count;
    public static long ecs_os_api_free_count
    {
        get
        {
            if (_ecs_os_api_free_count == IntPtr.Zero)
            {
                return default(long);
            }

            var value = NativeTools.MemoryRead<long>(_ecs_os_api_free_count);
            return value;
        }
    }

    // Variable @ os_api.h:254
    private static IntPtr _ecs_os_api;
    public static ecs_os_api_t ecs_os_api
    {
        get
        {
            if (_ecs_os_api == IntPtr.Zero)
            {
                return default(ecs_os_api_t);
            }

            var value = NativeTools.MemoryRead<ecs_os_api_t>(_ecs_os_api);
            return value;
        }
    }

    // Variable @ api_support.h:37
    private static IntPtr _FLECS__TEcsComponent;
    public static ecs_type_t FLECS__TEcsComponent
    {
        get
        {
            if (_FLECS__TEcsComponent == IntPtr.Zero)
            {
                return default(ecs_type_t);
            }

            var value = NativeTools.MemoryRead<ecs_type_t>(_FLECS__TEcsComponent);
            return value;
        }
    }

    // Variable @ api_support.h:38
    private static IntPtr _FLECS__TEcsComponentLifecycle;
    public static ecs_type_t FLECS__TEcsComponentLifecycle
    {
        get
        {
            if (_FLECS__TEcsComponentLifecycle == IntPtr.Zero)
            {
                return default(ecs_type_t);
            }

            var value = NativeTools.MemoryRead<ecs_type_t>(_FLECS__TEcsComponentLifecycle);
            return value;
        }
    }

    // Variable @ api_support.h:39
    private static IntPtr _FLECS__TEcsType;
    public static ecs_type_t FLECS__TEcsType
    {
        get
        {
            if (_FLECS__TEcsType == IntPtr.Zero)
            {
                return default(ecs_type_t);
            }

            var value = NativeTools.MemoryRead<ecs_type_t>(_FLECS__TEcsType);
            return value;
        }
    }

    // Variable @ api_support.h:40
    private static IntPtr _FLECS__TEcsName;
    public static ecs_type_t FLECS__TEcsName
    {
        get
        {
            if (_FLECS__TEcsName == IntPtr.Zero)
            {
                return default(ecs_type_t);
            }

            var value = NativeTools.MemoryRead<ecs_type_t>(_FLECS__TEcsName);
            return value;
        }
    }

    // Variable @ flecs.h:552
    private static IntPtr _ECS_CASE;
    public static ecs_id_t ECS_CASE
    {
        get
        {
            if (_ECS_CASE == IntPtr.Zero)
            {
                return default(ecs_id_t);
            }

            var value = NativeTools.MemoryRead<ecs_id_t>(_ECS_CASE);
            return value;
        }
    }

    // Variable @ flecs.h:555
    private static IntPtr _ECS_SWITCH;
    public static ecs_id_t ECS_SWITCH
    {
        get
        {
            if (_ECS_SWITCH == IntPtr.Zero)
            {
                return default(ecs_id_t);
            }

            var value = NativeTools.MemoryRead<ecs_id_t>(_ECS_SWITCH);
            return value;
        }
    }

    // Variable @ flecs.h:558
    private static IntPtr _ECS_PAIR;
    public static ecs_id_t ECS_PAIR
    {
        get
        {
            if (_ECS_PAIR == IntPtr.Zero)
            {
                return default(ecs_id_t);
            }

            var value = NativeTools.MemoryRead<ecs_id_t>(_ECS_PAIR);
            return value;
        }
    }

    // Variable @ flecs.h:561
    private static IntPtr _ECS_OWNED;
    public static ecs_id_t ECS_OWNED
    {
        get
        {
            if (_ECS_OWNED == IntPtr.Zero)
            {
                return default(ecs_id_t);
            }

            var value = NativeTools.MemoryRead<ecs_id_t>(_ECS_OWNED);
            return value;
        }
    }

    // Variable @ flecs.h:564
    private static IntPtr _ECS_DISABLED;
    public static ecs_id_t ECS_DISABLED
    {
        get
        {
            if (_ECS_DISABLED == IntPtr.Zero)
            {
                return default(ecs_id_t);
            }

            var value = NativeTools.MemoryRead<ecs_id_t>(_ECS_DISABLED);
            return value;
        }
    }

    // Variable @ flecs.h:575
    private static IntPtr _EcsFlecs;
    public static ecs_entity_t EcsFlecs
    {
        get
        {
            if (_EcsFlecs == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsFlecs);
            return value;
        }
    }

    // Variable @ flecs.h:578
    private static IntPtr _EcsFlecsCore;
    public static ecs_entity_t EcsFlecsCore
    {
        get
        {
            if (_EcsFlecsCore == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsFlecsCore);
            return value;
        }
    }

    // Variable @ flecs.h:581
    private static IntPtr _EcsWorld;
    public static ecs_entity_t EcsWorld
    {
        get
        {
            if (_EcsWorld == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsWorld);
            return value;
        }
    }

    // Variable @ flecs.h:584
    private static IntPtr _EcsWildcard;
    public static ecs_entity_t EcsWildcard
    {
        get
        {
            if (_EcsWildcard == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsWildcard);
            return value;
        }
    }

    // Variable @ flecs.h:587
    private static IntPtr _EcsThis;
    public static ecs_entity_t EcsThis
    {
        get
        {
            if (_EcsThis == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsThis);
            return value;
        }
    }

    // Variable @ flecs.h:590
    private static IntPtr _EcsTransitive;
    public static ecs_entity_t EcsTransitive
    {
        get
        {
            if (_EcsTransitive == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsTransitive);
            return value;
        }
    }

    // Variable @ flecs.h:596
    private static IntPtr _EcsFinal;
    public static ecs_entity_t EcsFinal
    {
        get
        {
            if (_EcsFinal == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsFinal);
            return value;
        }
    }

    // Variable @ flecs.h:599
    private static IntPtr _EcsChildOf;
    public static ecs_entity_t EcsChildOf
    {
        get
        {
            if (_EcsChildOf == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsChildOf);
            return value;
        }
    }

    // Variable @ flecs.h:620
    private static IntPtr _EcsIsA;
    public static ecs_entity_t EcsIsA
    {
        get
        {
            if (_EcsIsA == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsIsA);
            return value;
        }
    }

    // Variable @ flecs.h:623
    private static IntPtr _EcsModule;
    public static ecs_entity_t EcsModule
    {
        get
        {
            if (_EcsModule == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsModule);
            return value;
        }
    }

    // Variable @ flecs.h:627
    private static IntPtr _EcsPrefab;
    public static ecs_entity_t EcsPrefab
    {
        get
        {
            if (_EcsPrefab == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsPrefab);
            return value;
        }
    }

    // Variable @ flecs.h:630
    private static IntPtr _EcsDisabled;
    public static ecs_entity_t EcsDisabled
    {
        get
        {
            if (_EcsDisabled == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsDisabled);
            return value;
        }
    }

    // Variable @ flecs.h:635
    private static IntPtr _EcsHidden;
    public static ecs_entity_t EcsHidden
    {
        get
        {
            if (_EcsHidden == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsHidden);
            return value;
        }
    }

    // Variable @ flecs.h:638
    private static IntPtr _EcsOnAdd;
    public static ecs_entity_t EcsOnAdd
    {
        get
        {
            if (_EcsOnAdd == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsOnAdd);
            return value;
        }
    }

    // Variable @ flecs.h:641
    private static IntPtr _EcsOnRemove;
    public static ecs_entity_t EcsOnRemove
    {
        get
        {
            if (_EcsOnRemove == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsOnRemove);
            return value;
        }
    }

    // Variable @ flecs.h:644
    private static IntPtr _EcsOnSet;
    public static ecs_entity_t EcsOnSet
    {
        get
        {
            if (_EcsOnSet == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsOnSet);
            return value;
        }
    }

    // Variable @ flecs.h:647
    private static IntPtr _EcsUnSet;
    public static ecs_entity_t EcsUnSet
    {
        get
        {
            if (_EcsUnSet == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsUnSet);
            return value;
        }
    }

    // Variable @ flecs.h:659
    private static IntPtr _EcsOnDelete;
    public static ecs_entity_t EcsOnDelete
    {
        get
        {
            if (_EcsOnDelete == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsOnDelete);
            return value;
        }
    }

    // Variable @ flecs.h:668
    private static IntPtr _EcsOnDeleteObject;
    public static ecs_entity_t EcsOnDeleteObject
    {
        get
        {
            if (_EcsOnDeleteObject == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsOnDeleteObject);
            return value;
        }
    }

    // Variable @ flecs.h:672
    private static IntPtr _EcsRemove;
    public static ecs_entity_t EcsRemove
    {
        get
        {
            if (_EcsRemove == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsRemove);
            return value;
        }
    }

    // Variable @ flecs.h:677
    private static IntPtr _EcsDelete;
    public static ecs_entity_t EcsDelete
    {
        get
        {
            if (_EcsDelete == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsDelete);
            return value;
        }
    }

    // Variable @ flecs.h:682
    private static IntPtr _EcsThrow;
    public static ecs_entity_t EcsThrow
    {
        get
        {
            if (_EcsThrow == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsThrow);
            return value;
        }
    }

    // Variable @ flecs.h:685
    private static IntPtr _EcsOnDemand;
    public static ecs_entity_t EcsOnDemand
    {
        get
        {
            if (_EcsOnDemand == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsOnDemand);
            return value;
        }
    }

    // Variable @ flecs.h:686
    private static IntPtr _EcsMonitor;
    public static ecs_entity_t EcsMonitor
    {
        get
        {
            if (_EcsMonitor == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsMonitor);
            return value;
        }
    }

    // Variable @ flecs.h:687
    private static IntPtr _EcsDisabledIntern;
    public static ecs_entity_t EcsDisabledIntern
    {
        get
        {
            if (_EcsDisabledIntern == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsDisabledIntern);
            return value;
        }
    }

    // Variable @ flecs.h:688
    private static IntPtr _EcsInactive;
    public static ecs_entity_t EcsInactive
    {
        get
        {
            if (_EcsInactive == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsInactive);
            return value;
        }
    }

    // Variable @ flecs.h:691
    private static IntPtr _EcsPipeline;
    public static ecs_entity_t EcsPipeline
    {
        get
        {
            if (_EcsPipeline == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsPipeline);
            return value;
        }
    }

    // Variable @ flecs.h:692
    private static IntPtr _EcsPreFrame;
    public static ecs_entity_t EcsPreFrame
    {
        get
        {
            if (_EcsPreFrame == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsPreFrame);
            return value;
        }
    }

    // Variable @ flecs.h:693
    private static IntPtr _EcsOnLoad;
    public static ecs_entity_t EcsOnLoad
    {
        get
        {
            if (_EcsOnLoad == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsOnLoad);
            return value;
        }
    }

    // Variable @ flecs.h:694
    private static IntPtr _EcsPostLoad;
    public static ecs_entity_t EcsPostLoad
    {
        get
        {
            if (_EcsPostLoad == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsPostLoad);
            return value;
        }
    }

    // Variable @ flecs.h:695
    private static IntPtr _EcsPreUpdate;
    public static ecs_entity_t EcsPreUpdate
    {
        get
        {
            if (_EcsPreUpdate == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsPreUpdate);
            return value;
        }
    }

    // Variable @ flecs.h:696
    private static IntPtr _EcsOnUpdate;
    public static ecs_entity_t EcsOnUpdate
    {
        get
        {
            if (_EcsOnUpdate == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsOnUpdate);
            return value;
        }
    }

    // Variable @ flecs.h:697
    private static IntPtr _EcsOnValidate;
    public static ecs_entity_t EcsOnValidate
    {
        get
        {
            if (_EcsOnValidate == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsOnValidate);
            return value;
        }
    }

    // Variable @ flecs.h:698
    private static IntPtr _EcsPostUpdate;
    public static ecs_entity_t EcsPostUpdate
    {
        get
        {
            if (_EcsPostUpdate == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsPostUpdate);
            return value;
        }
    }

    // Variable @ flecs.h:699
    private static IntPtr _EcsPreStore;
    public static ecs_entity_t EcsPreStore
    {
        get
        {
            if (_EcsPreStore == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsPreStore);
            return value;
        }
    }

    // Variable @ flecs.h:700
    private static IntPtr _EcsOnStore;
    public static ecs_entity_t EcsOnStore
    {
        get
        {
            if (_EcsOnStore == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsOnStore);
            return value;
        }
    }

    // Variable @ flecs.h:701
    private static IntPtr _EcsPostFrame;
    public static ecs_entity_t EcsPostFrame
    {
        get
        {
            if (_EcsPostFrame == IntPtr.Zero)
            {
                return default(ecs_entity_t);
            }

            var value = NativeTools.MemoryRead<ecs_entity_t>(_EcsPostFrame);
            return value;
        }
    }

    // Variable @ system.h:32
    private static IntPtr _FLECS__TEcsSystem;
    public static ecs_type_t FLECS__TEcsSystem
    {
        get
        {
            if (_FLECS__TEcsSystem == IntPtr.Zero)
            {
                return default(ecs_type_t);
            }

            var value = NativeTools.MemoryRead<ecs_type_t>(_FLECS__TEcsSystem);
            return value;
        }
    }

    // Variable @ system.h:33
    private static IntPtr _FLECS__TEcsTickSource;
    public static ecs_type_t FLECS__TEcsTickSource
    {
        get
        {
            if (_FLECS__TEcsTickSource == IntPtr.Zero)
            {
                return default(ecs_type_t);
            }

            var value = NativeTools.MemoryRead<ecs_type_t>(_FLECS__TEcsTickSource);
            return value;
        }
    }

    // Variable @ timer.h:35
    private static IntPtr _FLECS__TEcsTimer;
    public static ecs_type_t FLECS__TEcsTimer
    {
        get
        {
            if (_FLECS__TEcsTimer == IntPtr.Zero)
            {
                return default(ecs_type_t);
            }

            var value = NativeTools.MemoryRead<ecs_type_t>(_FLECS__TEcsTimer);
            return value;
        }
    }

    // Variable @ timer.h:36
    private static IntPtr _FLECS__TEcsRateFilter;
    public static ecs_type_t FLECS__TEcsRateFilter
    {
        get
        {
            if (_FLECS__TEcsRateFilter == IntPtr.Zero)
            {
                return default(ecs_type_t);
            }

            var value = NativeTools.MemoryRead<ecs_type_t>(_FLECS__TEcsRateFilter);
            return value;
        }
    }
}
