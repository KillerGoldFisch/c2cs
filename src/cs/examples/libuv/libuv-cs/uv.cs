
//-------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the following tool:
//        https://github.com/lithiumtoast/c2cs
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ReSharper disable All
//-------------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

#nullable enable

public static unsafe partial class uv
{
    private const string LibraryName = "uv";
    private static IntPtr _libraryHandle;

    public static void LoadApi(string? libraryFilePath = null)
    {
        UnloadApi();
        if (libraryFilePath == null)
        {
            var libraryFileNamePrefix = NativeRuntime.LibraryFileNamePrefix;
            var libraryFileNameExtension = NativeRuntime.LibraryFileNameExtension;
            libraryFilePath = $@"{libraryFileNamePrefix}{LibraryName}{libraryFileNameExtension}";
        }
        _libraryHandle = NativeRuntime.LibraryLoad(libraryFilePath);
        if (_libraryHandle == IntPtr.Zero)
            throw new Exception($"Failed to load library: {libraryFilePath}");
        LoadExports();
    }

    public static void UnloadApi()
    {
        if (_libraryHandle == IntPtr.Zero)
            return;
        UnloadExports();
        NativeRuntime.LibraryUnload(_libraryHandle);
    }

    private static void LoadExports()
    {

    }

    private static void UnloadExports()
    {

    }

    // Function @ uv.h:261
    [DllImport(LibraryName, EntryPoint = "uv_version", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint uv_version();

    // Function @ uv.h:262
    [DllImport(LibraryName, EntryPoint = "uv_version_string", CallingConvention = CallingConvention.Cdecl)]
    public static extern AnsiStringPtr uv_version_string();

    // Function @ uv.h:269
    [DllImport(LibraryName, EntryPoint = "uv_library_shutdown", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_library_shutdown();

    // Function @ uv.h:271
    [DllImport(LibraryName, EntryPoint = "uv_replace_allocator", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_replace_allocator(uv_malloc_func malloc_func, uv_realloc_func realloc_func, uv_calloc_func calloc_func, uv_free_func free_func);

    // Function @ uv.h:276
    [DllImport(LibraryName, EntryPoint = "uv_default_loop", CallingConvention = CallingConvention.Cdecl)]
    public static extern uv_loop_t* uv_default_loop();

    // Function @ uv.h:277
    [DllImport(LibraryName, EntryPoint = "uv_loop_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_loop_init(uv_loop_t* loop);

    // Function @ uv.h:278
    [DllImport(LibraryName, EntryPoint = "uv_loop_close", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_loop_close(uv_loop_t* loop);

    // Function @ uv.h:284
    [DllImport(LibraryName, EntryPoint = "uv_loop_new", CallingConvention = CallingConvention.Cdecl)]
    public static extern uv_loop_t* uv_loop_new();

    // Function @ uv.h:290
    [DllImport(LibraryName, EntryPoint = "uv_loop_delete", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_loop_delete(uv_loop_t* param);

    // Function @ uv.h:291
    [DllImport(LibraryName, EntryPoint = "uv_loop_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong uv_loop_size();

    // Function @ uv.h:292
    [DllImport(LibraryName, EntryPoint = "uv_loop_alive", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_loop_alive(uv_loop_t* loop);

    // Function @ uv.h:293
    [DllImport(LibraryName, EntryPoint = "uv_loop_configure", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_loop_configure(uv_loop_t* loop, uv_loop_option option);

    // Function @ uv.h:294
    [DllImport(LibraryName, EntryPoint = "uv_loop_fork", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_loop_fork(uv_loop_t* loop);

    // Function @ uv.h:296
    [DllImport(LibraryName, EntryPoint = "uv_run", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_run(uv_loop_t* param, uv_run_mode mode);

    // Function @ uv.h:297
    [DllImport(LibraryName, EntryPoint = "uv_stop", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_stop(uv_loop_t* param);

    // Function @ uv.h:299
    [DllImport(LibraryName, EntryPoint = "uv_ref", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_ref(uv_handle_t* param);

    // Function @ uv.h:300
    [DllImport(LibraryName, EntryPoint = "uv_unref", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_unref(uv_handle_t* param);

    // Function @ uv.h:301
    [DllImport(LibraryName, EntryPoint = "uv_has_ref", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_has_ref(uv_handle_t* param);

    // Function @ uv.h:303
    [DllImport(LibraryName, EntryPoint = "uv_update_time", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_update_time(uv_loop_t* param);

    // Function @ uv.h:304
    [DllImport(LibraryName, EntryPoint = "uv_now", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong uv_now(uv_loop_t* param);

    // Function @ uv.h:306
    [DllImport(LibraryName, EntryPoint = "uv_backend_fd", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_backend_fd(uv_loop_t* param);

    // Function @ uv.h:307
    [DllImport(LibraryName, EntryPoint = "uv_backend_timeout", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_backend_timeout(uv_loop_t* param);

    // Function @ uv.h:388
    [DllImport(LibraryName, EntryPoint = "uv_translate_sys_error", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_translate_sys_error(int sys_errno);

    // Function @ uv.h:390
    [DllImport(LibraryName, EntryPoint = "uv_strerror", CallingConvention = CallingConvention.Cdecl)]
    public static extern AnsiStringPtr uv_strerror(int err);

    // Function @ uv.h:391
    [DllImport(LibraryName, EntryPoint = "uv_strerror_r", CallingConvention = CallingConvention.Cdecl)]
    public static extern AnsiStringPtr uv_strerror_r(int err, AnsiStringPtr buf, ulong buflen);

    // Function @ uv.h:393
    [DllImport(LibraryName, EntryPoint = "uv_err_name", CallingConvention = CallingConvention.Cdecl)]
    public static extern AnsiStringPtr uv_err_name(int err);

    // Function @ uv.h:394
    [DllImport(LibraryName, EntryPoint = "uv_err_name_r", CallingConvention = CallingConvention.Cdecl)]
    public static extern AnsiStringPtr uv_err_name_r(int err, AnsiStringPtr buf, ulong buflen);

    // Function @ uv.h:416
    [DllImport(LibraryName, EntryPoint = "uv_shutdown", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_shutdown(uv_shutdown_t* req, uv_stream_t* handle, uv_shutdown_cb cb);

    // Function @ uv.h:448
    [DllImport(LibraryName, EntryPoint = "uv_handle_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong uv_handle_size(uv_handle_type type);

    // Function @ uv.h:449
    [DllImport(LibraryName, EntryPoint = "uv_handle_get_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern uv_handle_type uv_handle_get_type(uv_handle_t* handle);

    // Function @ uv.h:450
    [DllImport(LibraryName, EntryPoint = "uv_handle_type_name", CallingConvention = CallingConvention.Cdecl)]
    public static extern AnsiStringPtr uv_handle_type_name(uv_handle_type type);

    // Function @ uv.h:451
    [DllImport(LibraryName, EntryPoint = "uv_handle_get_data", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* uv_handle_get_data(uv_handle_t* handle);

    // Function @ uv.h:452
    [DllImport(LibraryName, EntryPoint = "uv_handle_get_loop", CallingConvention = CallingConvention.Cdecl)]
    public static extern uv_loop_t* uv_handle_get_loop(uv_handle_t* handle);

    // Function @ uv.h:453
    [DllImport(LibraryName, EntryPoint = "uv_handle_set_data", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_handle_set_data(uv_handle_t* handle, void* data);

    // Function @ uv.h:455
    [DllImport(LibraryName, EntryPoint = "uv_req_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong uv_req_size(uv_req_type type);

    // Function @ uv.h:456
    [DllImport(LibraryName, EntryPoint = "uv_req_get_data", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* uv_req_get_data(uv_req_t* req);

    // Function @ uv.h:457
    [DllImport(LibraryName, EntryPoint = "uv_req_set_data", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_req_set_data(uv_req_t* req, void* data);

    // Function @ uv.h:458
    [DllImport(LibraryName, EntryPoint = "uv_req_get_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern uv_req_type uv_req_get_type(uv_req_t* req);

    // Function @ uv.h:459
    [DllImport(LibraryName, EntryPoint = "uv_req_type_name", CallingConvention = CallingConvention.Cdecl)]
    public static extern AnsiStringPtr uv_req_type_name(uv_req_type type);

    // Function @ uv.h:461
    [DllImport(LibraryName, EntryPoint = "uv_is_active", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_is_active(uv_handle_t* handle);

    // Function @ uv.h:463
    [DllImport(LibraryName, EntryPoint = "uv_walk", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_walk(uv_loop_t* loop, uv_walk_cb walk_cb, void* arg);

    // Function @ uv.h:466
    [DllImport(LibraryName, EntryPoint = "uv_print_all_handles", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_print_all_handles(uv_loop_t* loop, FILE* stream);

    // Function @ uv.h:467
    [DllImport(LibraryName, EntryPoint = "uv_print_active_handles", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_print_active_handles(uv_loop_t* loop, FILE* stream);

    // Function @ uv.h:469
    [DllImport(LibraryName, EntryPoint = "uv_close", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_close(uv_handle_t* handle, uv_close_cb close_cb);

    // Function @ uv.h:471
    [DllImport(LibraryName, EntryPoint = "uv_send_buffer_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_send_buffer_size(uv_handle_t* handle, long* value);

    // Function @ uv.h:472
    [DllImport(LibraryName, EntryPoint = "uv_recv_buffer_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_recv_buffer_size(uv_handle_t* handle, long* value);

    // Function @ uv.h:474
    [DllImport(LibraryName, EntryPoint = "uv_fileno", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fileno(uv_handle_t* handle, uv_os_fd_t* fd);

    // Function @ uv.h:476
    [DllImport(LibraryName, EntryPoint = "uv_buf_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern uv_buf_t uv_buf_init(AnsiStringPtr @base, uint len);

    // Function @ uv.h:478
    [DllImport(LibraryName, EntryPoint = "uv_pipe", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_pipe(uv_file fds, int read_flags, int write_flags);

    // Function @ uv.h:479
    [DllImport(LibraryName, EntryPoint = "uv_socketpair", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_socketpair(int type, int protocol, uv_os_sock_t socket_vector, int flags0, int flags1);

    // Function @ uv.h:505
    [DllImport(LibraryName, EntryPoint = "uv_stream_get_write_queue_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong uv_stream_get_write_queue_size(uv_stream_t* stream);

    // Function @ uv.h:507
    [DllImport(LibraryName, EntryPoint = "uv_listen", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_listen(uv_stream_t* stream, int backlog, uv_connection_cb cb);

    // Function @ uv.h:508
    [DllImport(LibraryName, EntryPoint = "uv_accept", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_accept(uv_stream_t* server, uv_stream_t* client);

    // Function @ uv.h:510
    [DllImport(LibraryName, EntryPoint = "uv_read_start", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_read_start(uv_stream_t* param, uv_alloc_cb alloc_cb, uv_read_cb read_cb);

    // Function @ uv.h:513
    [DllImport(LibraryName, EntryPoint = "uv_read_stop", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_read_stop(uv_stream_t* param);

    // Function @ uv.h:515
    [DllImport(LibraryName, EntryPoint = "uv_write", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_write(uv_write_t* req, uv_stream_t* handle, uv_buf_t* bufs, uint nbufs, uv_write_cb cb);

    // Function @ uv.h:520
    [DllImport(LibraryName, EntryPoint = "uv_write2", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_write2(uv_write_t* req, uv_stream_t* handle, uv_buf_t* bufs, uint nbufs, uv_stream_t* send_handle, uv_write_cb cb);

    // Function @ uv.h:526
    [DllImport(LibraryName, EntryPoint = "uv_try_write", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_try_write(uv_stream_t* handle, uv_buf_t* bufs, uint nbufs);

    // Function @ uv.h:540
    [DllImport(LibraryName, EntryPoint = "uv_is_readable", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_is_readable(uv_stream_t* handle);

    // Function @ uv.h:541
    [DllImport(LibraryName, EntryPoint = "uv_is_writable", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_is_writable(uv_stream_t* handle);

    // Function @ uv.h:543
    [DllImport(LibraryName, EntryPoint = "uv_stream_set_blocking", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_stream_set_blocking(uv_stream_t* handle, int blocking);

    // Function @ uv.h:545
    [DllImport(LibraryName, EntryPoint = "uv_is_closing", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_is_closing(uv_handle_t* handle);

    // Function @ uv.h:559
    [DllImport(LibraryName, EntryPoint = "uv_tcp_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tcp_init(uv_loop_t* param, uv_tcp_t* handle);

    // Function @ uv.h:560
    [DllImport(LibraryName, EntryPoint = "uv_tcp_init_ex", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tcp_init_ex(uv_loop_t* param, uv_tcp_t* handle, uint flags);

    // Function @ uv.h:561
    [DllImport(LibraryName, EntryPoint = "uv_tcp_open", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tcp_open(uv_tcp_t* handle, uv_os_sock_t sock);

    // Function @ uv.h:562
    [DllImport(LibraryName, EntryPoint = "uv_tcp_nodelay", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tcp_nodelay(uv_tcp_t* handle, int enable);

    // Function @ uv.h:563
    [DllImport(LibraryName, EntryPoint = "uv_tcp_keepalive", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tcp_keepalive(uv_tcp_t* handle, int enable, uint delay);

    // Function @ uv.h:566
    [DllImport(LibraryName, EntryPoint = "uv_tcp_simultaneous_accepts", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tcp_simultaneous_accepts(uv_tcp_t* handle, int enable);

    // Function @ uv.h:573
    [DllImport(LibraryName, EntryPoint = "uv_tcp_bind", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tcp_bind(uv_tcp_t* handle, sockaddr* addr, uint flags);

    // Function @ uv.h:576
    [DllImport(LibraryName, EntryPoint = "uv_tcp_getsockname", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tcp_getsockname(uv_tcp_t* handle, sockaddr* name, long* namelen);

    // Function @ uv.h:579
    [DllImport(LibraryName, EntryPoint = "uv_tcp_getpeername", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tcp_getpeername(uv_tcp_t* handle, sockaddr* name, long* namelen);

    // Function @ uv.h:582
    [DllImport(LibraryName, EntryPoint = "uv_tcp_close_reset", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tcp_close_reset(uv_tcp_t* handle, uv_close_cb close_cb);

    // Function @ uv.h:583
    [DllImport(LibraryName, EntryPoint = "uv_tcp_connect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tcp_connect(uv_connect_t* req, uv_tcp_t* handle, sockaddr* addr, uv_connect_cb cb);

    // Function @ uv.h:674
    [DllImport(LibraryName, EntryPoint = "uv_udp_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_init(uv_loop_t* param, uv_udp_t* handle);

    // Function @ uv.h:675
    [DllImport(LibraryName, EntryPoint = "uv_udp_init_ex", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_init_ex(uv_loop_t* param, uv_udp_t* handle, uint flags);

    // Function @ uv.h:676
    [DllImport(LibraryName, EntryPoint = "uv_udp_open", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_open(uv_udp_t* handle, uv_os_sock_t sock);

    // Function @ uv.h:677
    [DllImport(LibraryName, EntryPoint = "uv_udp_bind", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_bind(uv_udp_t* handle, sockaddr* addr, uint flags);

    // Function @ uv.h:680
    [DllImport(LibraryName, EntryPoint = "uv_udp_connect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_connect(uv_udp_t* handle, sockaddr* addr);

    // Function @ uv.h:682
    [DllImport(LibraryName, EntryPoint = "uv_udp_getpeername", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_getpeername(uv_udp_t* handle, sockaddr* name, long* namelen);

    // Function @ uv.h:685
    [DllImport(LibraryName, EntryPoint = "uv_udp_getsockname", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_getsockname(uv_udp_t* handle, sockaddr* name, long* namelen);

    // Function @ uv.h:688
    [DllImport(LibraryName, EntryPoint = "uv_udp_set_membership", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_set_membership(uv_udp_t* handle, AnsiStringPtr multicast_addr, AnsiStringPtr interface_addr, uv_membership membership);

    // Function @ uv.h:692
    [DllImport(LibraryName, EntryPoint = "uv_udp_set_source_membership", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_set_source_membership(uv_udp_t* handle, AnsiStringPtr multicast_addr, AnsiStringPtr interface_addr, AnsiStringPtr source_addr, uv_membership membership);

    // Function @ uv.h:697
    [DllImport(LibraryName, EntryPoint = "uv_udp_set_multicast_loop", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_set_multicast_loop(uv_udp_t* handle, int on);

    // Function @ uv.h:698
    [DllImport(LibraryName, EntryPoint = "uv_udp_set_multicast_ttl", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl);

    // Function @ uv.h:699
    [DllImport(LibraryName, EntryPoint = "uv_udp_set_multicast_interface", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_set_multicast_interface(uv_udp_t* handle, AnsiStringPtr interface_addr);

    // Function @ uv.h:701
    [DllImport(LibraryName, EntryPoint = "uv_udp_set_broadcast", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_set_broadcast(uv_udp_t* handle, int on);

    // Function @ uv.h:702
    [DllImport(LibraryName, EntryPoint = "uv_udp_set_ttl", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_set_ttl(uv_udp_t* handle, int ttl);

    // Function @ uv.h:703
    [DllImport(LibraryName, EntryPoint = "uv_udp_send", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_send(uv_udp_send_t* req, uv_udp_t* handle, uv_buf_t* bufs, uint nbufs, sockaddr* addr, uv_udp_send_cb send_cb);

    // Function @ uv.h:709
    [DllImport(LibraryName, EntryPoint = "uv_udp_try_send", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_try_send(uv_udp_t* handle, uv_buf_t* bufs, uint nbufs, sockaddr* addr);

    // Function @ uv.h:713
    [DllImport(LibraryName, EntryPoint = "uv_udp_recv_start", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_recv_start(uv_udp_t* handle, uv_alloc_cb alloc_cb, uv_udp_recv_cb recv_cb);

    // Function @ uv.h:716
    [DllImport(LibraryName, EntryPoint = "uv_udp_using_recvmmsg", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_using_recvmmsg(uv_udp_t* handle);

    // Function @ uv.h:717
    [DllImport(LibraryName, EntryPoint = "uv_udp_recv_stop", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_udp_recv_stop(uv_udp_t* handle);

    // Function @ uv.h:718
    [DllImport(LibraryName, EntryPoint = "uv_udp_get_send_queue_size", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong uv_udp_get_send_queue_size(uv_udp_t* handle);

    // Function @ uv.h:719
    [DllImport(LibraryName, EntryPoint = "uv_udp_get_send_queue_count", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong uv_udp_get_send_queue_count(uv_udp_t* handle);

    // Function @ uv.h:755
    [DllImport(LibraryName, EntryPoint = "uv_tty_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tty_init(uv_loop_t* param, uv_tty_t* param2, uv_file fd, int readable);

    // Function @ uv.h:756
    [DllImport(LibraryName, EntryPoint = "uv_tty_set_mode", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tty_set_mode(uv_tty_t* param, uv_tty_mode_t mode);

    // Function @ uv.h:757
    [DllImport(LibraryName, EntryPoint = "uv_tty_reset_mode", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tty_reset_mode();

    // Function @ uv.h:758
    [DllImport(LibraryName, EntryPoint = "uv_tty_get_winsize", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tty_get_winsize(uv_tty_t* param, long* width, long* height);

    // Function @ uv.h:759
    [DllImport(LibraryName, EntryPoint = "uv_tty_set_vterm_state", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_tty_set_vterm_state(uv_tty_vtermstate_t state);

    // Function @ uv.h:760
    [DllImport(LibraryName, EntryPoint = "uv_tty_get_vterm_state", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_tty_get_vterm_state(uv_tty_vtermstate_t* state);

    // Function @ uv.h:772
    [DllImport(LibraryName, EntryPoint = "uv_guess_handle", CallingConvention = CallingConvention.Cdecl)]
    public static extern uv_handle_type uv_guess_handle(uv_file file);

    // Function @ uv.h:787
    [DllImport(LibraryName, EntryPoint = "uv_pipe_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_pipe_init(uv_loop_t* param, uv_pipe_t* handle, int ipc);

    // Function @ uv.h:788
    [DllImport(LibraryName, EntryPoint = "uv_pipe_open", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_pipe_open(uv_pipe_t* param, uv_file file);

    // Function @ uv.h:789
    [DllImport(LibraryName, EntryPoint = "uv_pipe_bind", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_pipe_bind(uv_pipe_t* handle, AnsiStringPtr name);

    // Function @ uv.h:790
    [DllImport(LibraryName, EntryPoint = "uv_pipe_connect", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_pipe_connect(uv_connect_t* req, uv_pipe_t* handle, AnsiStringPtr name, uv_connect_cb cb);

    // Function @ uv.h:794
    [DllImport(LibraryName, EntryPoint = "uv_pipe_getsockname", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_pipe_getsockname(uv_pipe_t* handle, AnsiStringPtr buffer, ulong* size);

    // Function @ uv.h:797
    [DllImport(LibraryName, EntryPoint = "uv_pipe_getpeername", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_pipe_getpeername(uv_pipe_t* handle, AnsiStringPtr buffer, ulong* size);

    // Function @ uv.h:800
    [DllImport(LibraryName, EntryPoint = "uv_pipe_pending_instances", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_pipe_pending_instances(uv_pipe_t* handle, int count);

    // Function @ uv.h:801
    [DllImport(LibraryName, EntryPoint = "uv_pipe_pending_count", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_pipe_pending_count(uv_pipe_t* handle);

    // Function @ uv.h:802
    [DllImport(LibraryName, EntryPoint = "uv_pipe_pending_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern uv_handle_type uv_pipe_pending_type(uv_pipe_t* handle);

    // Function @ uv.h:803
    [DllImport(LibraryName, EntryPoint = "uv_pipe_chmod", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_pipe_chmod(uv_pipe_t* handle, int flags);

    // Function @ uv.h:819
    [DllImport(LibraryName, EntryPoint = "uv_poll_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_poll_init(uv_loop_t* loop, uv_poll_t* handle, int fd);

    // Function @ uv.h:820
    [DllImport(LibraryName, EntryPoint = "uv_poll_init_socket", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_poll_init_socket(uv_loop_t* loop, uv_poll_t* handle, uv_os_sock_t socket);

    // Function @ uv.h:823
    [DllImport(LibraryName, EntryPoint = "uv_poll_start", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_poll_start(uv_poll_t* handle, int events, uv_poll_cb cb);

    // Function @ uv.h:824
    [DllImport(LibraryName, EntryPoint = "uv_poll_stop", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_poll_stop(uv_poll_t* handle);

    // Function @ uv.h:832
    [DllImport(LibraryName, EntryPoint = "uv_prepare_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_prepare_init(uv_loop_t* param, uv_prepare_t* prepare);

    // Function @ uv.h:833
    [DllImport(LibraryName, EntryPoint = "uv_prepare_start", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_prepare_start(uv_prepare_t* prepare, uv_prepare_cb cb);

    // Function @ uv.h:834
    [DllImport(LibraryName, EntryPoint = "uv_prepare_stop", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_prepare_stop(uv_prepare_t* prepare);

    // Function @ uv.h:842
    [DllImport(LibraryName, EntryPoint = "uv_check_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_check_init(uv_loop_t* param, uv_check_t* check);

    // Function @ uv.h:843
    [DllImport(LibraryName, EntryPoint = "uv_check_start", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_check_start(uv_check_t* check, uv_check_cb cb);

    // Function @ uv.h:844
    [DllImport(LibraryName, EntryPoint = "uv_check_stop", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_check_stop(uv_check_t* check);

    // Function @ uv.h:852
    [DllImport(LibraryName, EntryPoint = "uv_idle_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_idle_init(uv_loop_t* param, uv_idle_t* idle);

    // Function @ uv.h:853
    [DllImport(LibraryName, EntryPoint = "uv_idle_start", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_idle_start(uv_idle_t* idle, uv_idle_cb cb);

    // Function @ uv.h:854
    [DllImport(LibraryName, EntryPoint = "uv_idle_stop", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_idle_stop(uv_idle_t* idle);

    // Function @ uv.h:862
    [DllImport(LibraryName, EntryPoint = "uv_async_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_async_init(uv_loop_t* param, uv_async_t* async, uv_async_cb async_cb);

    // Function @ uv.h:865
    [DllImport(LibraryName, EntryPoint = "uv_async_send", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_async_send(uv_async_t* async);

    // Function @ uv.h:878
    [DllImport(LibraryName, EntryPoint = "uv_timer_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_timer_init(uv_loop_t* param, uv_timer_t* handle);

    // Function @ uv.h:879
    [DllImport(LibraryName, EntryPoint = "uv_timer_start", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_timer_start(uv_timer_t* handle, uv_timer_cb cb, ulong timeout, ulong repeat);

    // Function @ uv.h:883
    [DllImport(LibraryName, EntryPoint = "uv_timer_stop", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_timer_stop(uv_timer_t* handle);

    // Function @ uv.h:884
    [DllImport(LibraryName, EntryPoint = "uv_timer_again", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_timer_again(uv_timer_t* handle);

    // Function @ uv.h:885
    [DllImport(LibraryName, EntryPoint = "uv_timer_set_repeat", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_timer_set_repeat(uv_timer_t* handle, ulong repeat);

    // Function @ uv.h:886
    [DllImport(LibraryName, EntryPoint = "uv_timer_get_repeat", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong uv_timer_get_repeat(uv_timer_t* handle);

    // Function @ uv.h:887
    [DllImport(LibraryName, EntryPoint = "uv_timer_get_due_in", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong uv_timer_get_due_in(uv_timer_t* handle);

    // Function @ uv.h:904
    [DllImport(LibraryName, EntryPoint = "uv_getaddrinfo", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_getaddrinfo(uv_loop_t* loop, uv_getaddrinfo_t* req, uv_getaddrinfo_cb getaddrinfo_cb, AnsiStringPtr node, AnsiStringPtr service, addrinfo* hints);

    // Function @ uv.h:910
    [DllImport(LibraryName, EntryPoint = "uv_freeaddrinfo", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_freeaddrinfo(addrinfo* ai);

    // Function @ uv.h:926
    [DllImport(LibraryName, EntryPoint = "uv_getnameinfo", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_getnameinfo(uv_loop_t* loop, uv_getnameinfo_t* req, uv_getnameinfo_cb getnameinfo_cb, sockaddr* addr, int flags);

    // Function @ uv.h:1071
    [DllImport(LibraryName, EntryPoint = "uv_spawn", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_spawn(uv_loop_t* loop, uv_process_t* handle, uv_process_options_t* options);

    // Function @ uv.h:1074
    [DllImport(LibraryName, EntryPoint = "uv_process_kill", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_process_kill(uv_process_t* param, int signum);

    // Function @ uv.h:1075
    [DllImport(LibraryName, EntryPoint = "uv_kill", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_kill(int pid, int signum);

    // Function @ uv.h:1076
    [DllImport(LibraryName, EntryPoint = "uv_process_get_pid", CallingConvention = CallingConvention.Cdecl)]
    public static extern uv_pid_t uv_process_get_pid(uv_process_t* param);

    // Function @ uv.h:1090
    [DllImport(LibraryName, EntryPoint = "uv_queue_work", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_queue_work(uv_loop_t* loop, uv_work_t* req, uv_work_cb work_cb, uv_after_work_cb after_work_cb);

    // Function @ uv.h:1095
    [DllImport(LibraryName, EntryPoint = "uv_cancel", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_cancel(uv_req_t* req);

    // Function @ uv.h:1171
    [DllImport(LibraryName, EntryPoint = "uv_setup_args", CallingConvention = CallingConvention.Cdecl)]
    public static extern AnsiStringPtr* uv_setup_args(int argc, AnsiStringPtr* argv);

    // Function @ uv.h:1172
    [DllImport(LibraryName, EntryPoint = "uv_get_process_title", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_get_process_title(AnsiStringPtr buffer, ulong size);

    // Function @ uv.h:1173
    [DllImport(LibraryName, EntryPoint = "uv_set_process_title", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_set_process_title(AnsiStringPtr title);

    // Function @ uv.h:1174
    [DllImport(LibraryName, EntryPoint = "uv_resident_set_memory", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_resident_set_memory(ulong* rss);

    // Function @ uv.h:1175
    [DllImport(LibraryName, EntryPoint = "uv_uptime", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_uptime(double* uptime);

    // Function @ uv.h:1176
    [DllImport(LibraryName, EntryPoint = "uv_get_osfhandle", CallingConvention = CallingConvention.Cdecl)]
    public static extern uv_os_fd_t uv_get_osfhandle(int fd);

    // Function @ uv.h:1177
    [DllImport(LibraryName, EntryPoint = "uv_open_osfhandle", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_open_osfhandle(uv_os_fd_t os_fd);

    // Function @ uv.h:1208
    [DllImport(LibraryName, EntryPoint = "uv_getrusage", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_getrusage(uv_rusage_t* rusage);

    // Function @ uv.h:1210
    [DllImport(LibraryName, EntryPoint = "uv_os_homedir", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_os_homedir(AnsiStringPtr buffer, ulong* size);

    // Function @ uv.h:1211
    [DllImport(LibraryName, EntryPoint = "uv_os_tmpdir", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_os_tmpdir(AnsiStringPtr buffer, ulong* size);

    // Function @ uv.h:1212
    [DllImport(LibraryName, EntryPoint = "uv_os_get_passwd", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_os_get_passwd(uv_passwd_t* pwd);

    // Function @ uv.h:1213
    [DllImport(LibraryName, EntryPoint = "uv_os_free_passwd", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_os_free_passwd(uv_passwd_t* pwd);

    // Function @ uv.h:1214
    [DllImport(LibraryName, EntryPoint = "uv_os_getpid", CallingConvention = CallingConvention.Cdecl)]
    public static extern uv_pid_t uv_os_getpid();

    // Function @ uv.h:1215
    [DllImport(LibraryName, EntryPoint = "uv_os_getppid", CallingConvention = CallingConvention.Cdecl)]
    public static extern uv_pid_t uv_os_getppid();

    // Function @ uv.h:1234
    [DllImport(LibraryName, EntryPoint = "uv_os_getpriority", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_os_getpriority(uv_pid_t pid, long* priority);

    // Function @ uv.h:1235
    [DllImport(LibraryName, EntryPoint = "uv_os_setpriority", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_os_setpriority(uv_pid_t pid, int priority);

    // Function @ uv.h:1237
    [DllImport(LibraryName, EntryPoint = "uv_cpu_info", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_cpu_info(uv_cpu_info_t** cpu_infos, long* count);

    // Function @ uv.h:1238
    [DllImport(LibraryName, EntryPoint = "uv_free_cpu_info", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_free_cpu_info(uv_cpu_info_t* cpu_infos, int count);

    // Function @ uv.h:1240
    [DllImport(LibraryName, EntryPoint = "uv_interface_addresses", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_interface_addresses(uv_interface_address_t** addresses, long* count);

    // Function @ uv.h:1242
    [DllImport(LibraryName, EntryPoint = "uv_free_interface_addresses", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_free_interface_addresses(uv_interface_address_t* addresses, int count);

    // Function @ uv.h:1250
    [DllImport(LibraryName, EntryPoint = "uv_os_environ", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_os_environ(uv_env_item_t** envitems, long* count);

    // Function @ uv.h:1251
    [DllImport(LibraryName, EntryPoint = "uv_os_free_environ", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_os_free_environ(uv_env_item_t* envitems, int count);

    // Function @ uv.h:1252
    [DllImport(LibraryName, EntryPoint = "uv_os_getenv", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_os_getenv(AnsiStringPtr name, AnsiStringPtr buffer, ulong* size);

    // Function @ uv.h:1253
    [DllImport(LibraryName, EntryPoint = "uv_os_setenv", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_os_setenv(AnsiStringPtr name, AnsiStringPtr value);

    // Function @ uv.h:1254
    [DllImport(LibraryName, EntryPoint = "uv_os_unsetenv", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_os_unsetenv(AnsiStringPtr name);

    // Function @ uv.h:1267
    [DllImport(LibraryName, EntryPoint = "uv_os_gethostname", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_os_gethostname(AnsiStringPtr buffer, ulong* size);

    // Function @ uv.h:1269
    [DllImport(LibraryName, EntryPoint = "uv_os_uname", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_os_uname(uv_utsname_t* buffer);

    // Function @ uv.h:1271
    [DllImport(LibraryName, EntryPoint = "uv_metrics_idle_time", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong uv_metrics_idle_time(uv_loop_t* loop);

    // Function @ uv.h:1334
    [DllImport(LibraryName, EntryPoint = "uv_fs_get_type", CallingConvention = CallingConvention.Cdecl)]
    public static extern uv_fs_type uv_fs_get_type(uv_fs_t* param);

    // Function @ uv.h:1335
    [DllImport(LibraryName, EntryPoint = "uv_fs_get_result", CallingConvention = CallingConvention.Cdecl)]
    public static extern long uv_fs_get_result(uv_fs_t* param);

    // Function @ uv.h:1336
    [DllImport(LibraryName, EntryPoint = "uv_fs_get_system_error", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_get_system_error(uv_fs_t* param);

    // Function @ uv.h:1337
    [DllImport(LibraryName, EntryPoint = "uv_fs_get_ptr", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* uv_fs_get_ptr(uv_fs_t* param);

    // Function @ uv.h:1338
    [DllImport(LibraryName, EntryPoint = "uv_fs_get_path", CallingConvention = CallingConvention.Cdecl)]
    public static extern AnsiStringPtr uv_fs_get_path(uv_fs_t* param);

    // Function @ uv.h:1339
    [DllImport(LibraryName, EntryPoint = "uv_fs_get_statbuf", CallingConvention = CallingConvention.Cdecl)]
    public static extern uv_stat_t* uv_fs_get_statbuf(uv_fs_t* param);

    // Function @ uv.h:1341
    [DllImport(LibraryName, EntryPoint = "uv_fs_req_cleanup", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_fs_req_cleanup(uv_fs_t* req);

    // Function @ uv.h:1342
    [DllImport(LibraryName, EntryPoint = "uv_fs_close", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_close(uv_loop_t* loop, uv_fs_t* req, uv_file file, uv_fs_cb cb);

    // Function @ uv.h:1346
    [DllImport(LibraryName, EntryPoint = "uv_fs_open", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_open(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, int flags, int mode, uv_fs_cb cb);

    // Function @ uv.h:1352
    [DllImport(LibraryName, EntryPoint = "uv_fs_read", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_read(uv_loop_t* loop, uv_fs_t* req, uv_file file, uv_buf_t* bufs, uint nbufs, long offset, uv_fs_cb cb);

    // Function @ uv.h:1359
    [DllImport(LibraryName, EntryPoint = "uv_fs_unlink", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_unlink(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, uv_fs_cb cb);

    // Function @ uv.h:1363
    [DllImport(LibraryName, EntryPoint = "uv_fs_write", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_write(uv_loop_t* loop, uv_fs_t* req, uv_file file, uv_buf_t* bufs, uint nbufs, long offset, uv_fs_cb cb);

    // Function @ uv.h:1388
    [DllImport(LibraryName, EntryPoint = "uv_fs_copyfile", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_copyfile(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, AnsiStringPtr new_path, int flags, uv_fs_cb cb);

    // Function @ uv.h:1394
    [DllImport(LibraryName, EntryPoint = "uv_fs_mkdir", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_mkdir(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, int mode, uv_fs_cb cb);

    // Function @ uv.h:1399
    [DllImport(LibraryName, EntryPoint = "uv_fs_mkdtemp", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_mkdtemp(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr tpl, uv_fs_cb cb);

    // Function @ uv.h:1403
    [DllImport(LibraryName, EntryPoint = "uv_fs_mkstemp", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_mkstemp(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr tpl, uv_fs_cb cb);

    // Function @ uv.h:1407
    [DllImport(LibraryName, EntryPoint = "uv_fs_rmdir", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_rmdir(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, uv_fs_cb cb);

    // Function @ uv.h:1411
    [DllImport(LibraryName, EntryPoint = "uv_fs_scandir", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_scandir(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, int flags, uv_fs_cb cb);

    // Function @ uv.h:1416
    [DllImport(LibraryName, EntryPoint = "uv_fs_scandir_next", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_scandir_next(uv_fs_t* req, uv_dirent_t* ent);

    // Function @ uv.h:1418
    [DllImport(LibraryName, EntryPoint = "uv_fs_opendir", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_opendir(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, uv_fs_cb cb);

    // Function @ uv.h:1422
    [DllImport(LibraryName, EntryPoint = "uv_fs_readdir", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_readdir(uv_loop_t* loop, uv_fs_t* req, uv_dir_t* dir, uv_fs_cb cb);

    // Function @ uv.h:1426
    [DllImport(LibraryName, EntryPoint = "uv_fs_closedir", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_closedir(uv_loop_t* loop, uv_fs_t* req, uv_dir_t* dir, uv_fs_cb cb);

    // Function @ uv.h:1430
    [DllImport(LibraryName, EntryPoint = "uv_fs_stat", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_stat(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, uv_fs_cb cb);

    // Function @ uv.h:1434
    [DllImport(LibraryName, EntryPoint = "uv_fs_fstat", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_fstat(uv_loop_t* loop, uv_fs_t* req, uv_file file, uv_fs_cb cb);

    // Function @ uv.h:1438
    [DllImport(LibraryName, EntryPoint = "uv_fs_rename", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_rename(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, AnsiStringPtr new_path, uv_fs_cb cb);

    // Function @ uv.h:1443
    [DllImport(LibraryName, EntryPoint = "uv_fs_fsync", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_fsync(uv_loop_t* loop, uv_fs_t* req, uv_file file, uv_fs_cb cb);

    // Function @ uv.h:1447
    [DllImport(LibraryName, EntryPoint = "uv_fs_fdatasync", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_fdatasync(uv_loop_t* loop, uv_fs_t* req, uv_file file, uv_fs_cb cb);

    // Function @ uv.h:1451
    [DllImport(LibraryName, EntryPoint = "uv_fs_ftruncate", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_ftruncate(uv_loop_t* loop, uv_fs_t* req, uv_file file, long offset, uv_fs_cb cb);

    // Function @ uv.h:1456
    [DllImport(LibraryName, EntryPoint = "uv_fs_sendfile", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_sendfile(uv_loop_t* loop, uv_fs_t* req, uv_file out_fd, uv_file in_fd, long in_offset, ulong length, uv_fs_cb cb);

    // Function @ uv.h:1463
    [DllImport(LibraryName, EntryPoint = "uv_fs_access", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_access(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, int mode, uv_fs_cb cb);

    // Function @ uv.h:1468
    [DllImport(LibraryName, EntryPoint = "uv_fs_chmod", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_chmod(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, int mode, uv_fs_cb cb);

    // Function @ uv.h:1473
    [DllImport(LibraryName, EntryPoint = "uv_fs_utime", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_utime(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, double atime, double mtime, uv_fs_cb cb);

    // Function @ uv.h:1479
    [DllImport(LibraryName, EntryPoint = "uv_fs_futime", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_futime(uv_loop_t* loop, uv_fs_t* req, uv_file file, double atime, double mtime, uv_fs_cb cb);

    // Function @ uv.h:1485
    [DllImport(LibraryName, EntryPoint = "uv_fs_lutime", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_lutime(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, double atime, double mtime, uv_fs_cb cb);

    // Function @ uv.h:1491
    [DllImport(LibraryName, EntryPoint = "uv_fs_lstat", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_lstat(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, uv_fs_cb cb);

    // Function @ uv.h:1495
    [DllImport(LibraryName, EntryPoint = "uv_fs_link", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_link(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, AnsiStringPtr new_path, uv_fs_cb cb);

    // Function @ uv.h:1513
    [DllImport(LibraryName, EntryPoint = "uv_fs_symlink", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_symlink(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, AnsiStringPtr new_path, int flags, uv_fs_cb cb);

    // Function @ uv.h:1519
    [DllImport(LibraryName, EntryPoint = "uv_fs_readlink", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_readlink(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, uv_fs_cb cb);

    // Function @ uv.h:1523
    [DllImport(LibraryName, EntryPoint = "uv_fs_realpath", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_realpath(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, uv_fs_cb cb);

    // Function @ uv.h:1527
    [DllImport(LibraryName, EntryPoint = "uv_fs_fchmod", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_fchmod(uv_loop_t* loop, uv_fs_t* req, uv_file file, int mode, uv_fs_cb cb);

    // Function @ uv.h:1532
    [DllImport(LibraryName, EntryPoint = "uv_fs_chown", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_chown(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, uv_uid_t uid, uv_gid_t gid, uv_fs_cb cb);

    // Function @ uv.h:1538
    [DllImport(LibraryName, EntryPoint = "uv_fs_fchown", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_fchown(uv_loop_t* loop, uv_fs_t* req, uv_file file, uv_uid_t uid, uv_gid_t gid, uv_fs_cb cb);

    // Function @ uv.h:1544
    [DllImport(LibraryName, EntryPoint = "uv_fs_lchown", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_lchown(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, uv_uid_t uid, uv_gid_t gid, uv_fs_cb cb);

    // Function @ uv.h:1550
    [DllImport(LibraryName, EntryPoint = "uv_fs_statfs", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_statfs(uv_loop_t* loop, uv_fs_t* req, AnsiStringPtr path, uv_fs_cb cb);

    // Function @ uv.h:1579
    [DllImport(LibraryName, EntryPoint = "uv_fs_poll_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_poll_init(uv_loop_t* loop, uv_fs_poll_t* handle);

    // Function @ uv.h:1580
    [DllImport(LibraryName, EntryPoint = "uv_fs_poll_start", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_poll_start(uv_fs_poll_t* handle, uv_fs_poll_cb poll_cb, AnsiStringPtr path, uint interval);

    // Function @ uv.h:1584
    [DllImport(LibraryName, EntryPoint = "uv_fs_poll_stop", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_poll_stop(uv_fs_poll_t* handle);

    // Function @ uv.h:1585
    [DllImport(LibraryName, EntryPoint = "uv_fs_poll_getpath", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_poll_getpath(uv_fs_poll_t* handle, AnsiStringPtr buffer, ulong* size);

    // Function @ uv.h:1597
    [DllImport(LibraryName, EntryPoint = "uv_signal_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_signal_init(uv_loop_t* loop, uv_signal_t* handle);

    // Function @ uv.h:1598
    [DllImport(LibraryName, EntryPoint = "uv_signal_start", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_signal_start(uv_signal_t* handle, uv_signal_cb signal_cb, int signum);

    // Function @ uv.h:1601
    [DllImport(LibraryName, EntryPoint = "uv_signal_start_oneshot", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_signal_start_oneshot(uv_signal_t* handle, uv_signal_cb signal_cb, int signum);

    // Function @ uv.h:1604
    [DllImport(LibraryName, EntryPoint = "uv_signal_stop", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_signal_stop(uv_signal_t* handle);

    // Function @ uv.h:1606
    [DllImport(LibraryName, EntryPoint = "uv_loadavg", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_loadavg(double avg);

    // Function @ uv.h:1640
    [DllImport(LibraryName, EntryPoint = "uv_fs_event_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle);

    // Function @ uv.h:1641
    [DllImport(LibraryName, EntryPoint = "uv_fs_event_start", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_event_start(uv_fs_event_t* handle, uv_fs_event_cb cb, AnsiStringPtr path, uint flags);

    // Function @ uv.h:1645
    [DllImport(LibraryName, EntryPoint = "uv_fs_event_stop", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_event_stop(uv_fs_event_t* handle);

    // Function @ uv.h:1646
    [DllImport(LibraryName, EntryPoint = "uv_fs_event_getpath", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_fs_event_getpath(uv_fs_event_t* handle, AnsiStringPtr buffer, ulong* size);

    // Function @ uv.h:1650
    [DllImport(LibraryName, EntryPoint = "uv_ip4_addr", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_ip4_addr(AnsiStringPtr ip, int port, sockaddr_in* addr);

    // Function @ uv.h:1651
    [DllImport(LibraryName, EntryPoint = "uv_ip6_addr", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_ip6_addr(AnsiStringPtr ip, int port, sockaddr_in6* addr);

    // Function @ uv.h:1653
    [DllImport(LibraryName, EntryPoint = "uv_ip4_name", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_ip4_name(sockaddr_in* src, AnsiStringPtr dst, ulong size);

    // Function @ uv.h:1654
    [DllImport(LibraryName, EntryPoint = "uv_ip6_name", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_ip6_name(sockaddr_in6* src, AnsiStringPtr dst, ulong size);

    // Function @ uv.h:1656
    [DllImport(LibraryName, EntryPoint = "uv_inet_ntop", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_inet_ntop(int af, void* src, AnsiStringPtr dst, ulong size);

    // Function @ uv.h:1657
    [DllImport(LibraryName, EntryPoint = "uv_inet_pton", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_inet_pton(int af, AnsiStringPtr src, void* dst);

    // Function @ uv.h:1672
    [DllImport(LibraryName, EntryPoint = "uv_random", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_random(uv_loop_t* loop, uv_random_t* req, void* buf, ulong buflen, uint flags, uv_random_cb cb);

    // Function @ uv.h:1687
    [DllImport(LibraryName, EntryPoint = "uv_if_indextoname", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_if_indextoname(uint ifindex, AnsiStringPtr buffer, ulong* size);

    // Function @ uv.h:1690
    [DllImport(LibraryName, EntryPoint = "uv_if_indextoiid", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_if_indextoiid(uint ifindex, AnsiStringPtr buffer, ulong* size);

    // Function @ uv.h:1694
    [DllImport(LibraryName, EntryPoint = "uv_exepath", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_exepath(AnsiStringPtr buffer, ulong* size);

    // Function @ uv.h:1696
    [DllImport(LibraryName, EntryPoint = "uv_cwd", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_cwd(AnsiStringPtr buffer, ulong* size);

    // Function @ uv.h:1698
    [DllImport(LibraryName, EntryPoint = "uv_chdir", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_chdir(AnsiStringPtr dir);

    // Function @ uv.h:1700
    [DllImport(LibraryName, EntryPoint = "uv_get_free_memory", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong uv_get_free_memory();

    // Function @ uv.h:1701
    [DllImport(LibraryName, EntryPoint = "uv_get_total_memory", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong uv_get_total_memory();

    // Function @ uv.h:1702
    [DllImport(LibraryName, EntryPoint = "uv_get_constrained_memory", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong uv_get_constrained_memory();

    // Function @ uv.h:1704
    [DllImport(LibraryName, EntryPoint = "uv_hrtime", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong uv_hrtime();

    // Function @ uv.h:1705
    [DllImport(LibraryName, EntryPoint = "uv_sleep", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_sleep(uint msec);

    // Function @ uv.h:1707
    [DllImport(LibraryName, EntryPoint = "uv_disable_stdio_inheritance", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_disable_stdio_inheritance();

    // Function @ uv.h:1709
    [DllImport(LibraryName, EntryPoint = "uv_dlopen", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_dlopen(AnsiStringPtr filename, uv_lib_t* lib);

    // Function @ uv.h:1710
    [DllImport(LibraryName, EntryPoint = "uv_dlclose", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_dlclose(uv_lib_t* lib);

    // Function @ uv.h:1711
    [DllImport(LibraryName, EntryPoint = "uv_dlsym", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_dlsym(uv_lib_t* lib, AnsiStringPtr name, void** ptr);

    // Function @ uv.h:1712
    [DllImport(LibraryName, EntryPoint = "uv_dlerror", CallingConvention = CallingConvention.Cdecl)]
    public static extern AnsiStringPtr uv_dlerror(uv_lib_t* lib);

    // Function @ uv.h:1714
    [DllImport(LibraryName, EntryPoint = "uv_mutex_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_mutex_init(uv_mutex_t* handle);

    // Function @ uv.h:1715
    [DllImport(LibraryName, EntryPoint = "uv_mutex_init_recursive", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_mutex_init_recursive(uv_mutex_t* handle);

    // Function @ uv.h:1716
    [DllImport(LibraryName, EntryPoint = "uv_mutex_destroy", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_mutex_destroy(uv_mutex_t* handle);

    // Function @ uv.h:1717
    [DllImport(LibraryName, EntryPoint = "uv_mutex_lock", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_mutex_lock(uv_mutex_t* handle);

    // Function @ uv.h:1718
    [DllImport(LibraryName, EntryPoint = "uv_mutex_trylock", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_mutex_trylock(uv_mutex_t* handle);

    // Function @ uv.h:1719
    [DllImport(LibraryName, EntryPoint = "uv_mutex_unlock", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_mutex_unlock(uv_mutex_t* handle);

    // Function @ uv.h:1721
    [DllImport(LibraryName, EntryPoint = "uv_rwlock_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_rwlock_init(uv_rwlock_t* rwlock);

    // Function @ uv.h:1722
    [DllImport(LibraryName, EntryPoint = "uv_rwlock_destroy", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_rwlock_destroy(uv_rwlock_t* rwlock);

    // Function @ uv.h:1723
    [DllImport(LibraryName, EntryPoint = "uv_rwlock_rdlock", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_rwlock_rdlock(uv_rwlock_t* rwlock);

    // Function @ uv.h:1724
    [DllImport(LibraryName, EntryPoint = "uv_rwlock_tryrdlock", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_rwlock_tryrdlock(uv_rwlock_t* rwlock);

    // Function @ uv.h:1725
    [DllImport(LibraryName, EntryPoint = "uv_rwlock_rdunlock", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_rwlock_rdunlock(uv_rwlock_t* rwlock);

    // Function @ uv.h:1726
    [DllImport(LibraryName, EntryPoint = "uv_rwlock_wrlock", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_rwlock_wrlock(uv_rwlock_t* rwlock);

    // Function @ uv.h:1727
    [DllImport(LibraryName, EntryPoint = "uv_rwlock_trywrlock", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_rwlock_trywrlock(uv_rwlock_t* rwlock);

    // Function @ uv.h:1728
    [DllImport(LibraryName, EntryPoint = "uv_rwlock_wrunlock", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_rwlock_wrunlock(uv_rwlock_t* rwlock);

    // Function @ uv.h:1730
    [DllImport(LibraryName, EntryPoint = "uv_sem_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_sem_init(uv_sem_t* sem, uint value);

    // Function @ uv.h:1731
    [DllImport(LibraryName, EntryPoint = "uv_sem_destroy", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_sem_destroy(uv_sem_t* sem);

    // Function @ uv.h:1732
    [DllImport(LibraryName, EntryPoint = "uv_sem_post", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_sem_post(uv_sem_t* sem);

    // Function @ uv.h:1733
    [DllImport(LibraryName, EntryPoint = "uv_sem_wait", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_sem_wait(uv_sem_t* sem);

    // Function @ uv.h:1734
    [DllImport(LibraryName, EntryPoint = "uv_sem_trywait", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_sem_trywait(uv_sem_t* sem);

    // Function @ uv.h:1736
    [DllImport(LibraryName, EntryPoint = "uv_cond_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_cond_init(uv_cond_t* cond);

    // Function @ uv.h:1737
    [DllImport(LibraryName, EntryPoint = "uv_cond_destroy", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_cond_destroy(uv_cond_t* cond);

    // Function @ uv.h:1738
    [DllImport(LibraryName, EntryPoint = "uv_cond_signal", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_cond_signal(uv_cond_t* cond);

    // Function @ uv.h:1739
    [DllImport(LibraryName, EntryPoint = "uv_cond_broadcast", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_cond_broadcast(uv_cond_t* cond);

    // Function @ uv.h:1741
    [DllImport(LibraryName, EntryPoint = "uv_barrier_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_barrier_init(uv_barrier_t* barrier, uint count);

    // Function @ uv.h:1742
    [DllImport(LibraryName, EntryPoint = "uv_barrier_destroy", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_barrier_destroy(uv_barrier_t* barrier);

    // Function @ uv.h:1743
    [DllImport(LibraryName, EntryPoint = "uv_barrier_wait", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_barrier_wait(uv_barrier_t* barrier);

    // Function @ uv.h:1745
    [DllImport(LibraryName, EntryPoint = "uv_cond_wait", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_cond_wait(uv_cond_t* cond, uv_mutex_t* mutex);

    // Function @ uv.h:1746
    [DllImport(LibraryName, EntryPoint = "uv_cond_timedwait", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_cond_timedwait(uv_cond_t* cond, uv_mutex_t* mutex, ulong timeout);

    // Function @ uv.h:1750
    [DllImport(LibraryName, EntryPoint = "uv_once", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_once(uv_once_t* guard, NativeCallbackVoid callback);

    // Function @ uv.h:1752
    [DllImport(LibraryName, EntryPoint = "uv_key_create", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_key_create(uv_key_t* key);

    // Function @ uv.h:1753
    [DllImport(LibraryName, EntryPoint = "uv_key_delete", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_key_delete(uv_key_t* key);

    // Function @ uv.h:1754
    [DllImport(LibraryName, EntryPoint = "uv_key_get", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* uv_key_get(uv_key_t* key);

    // Function @ uv.h:1755
    [DllImport(LibraryName, EntryPoint = "uv_key_set", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_key_set(uv_key_t* key, void* value);

    // Function @ uv.h:1757
    [DllImport(LibraryName, EntryPoint = "uv_gettimeofday", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_gettimeofday(uv_timeval64_t* tv);

    // Function @ uv.h:1761
    [DllImport(LibraryName, EntryPoint = "uv_thread_create", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_thread_create(uv_thread_t* tid, uv_thread_cb entry, void* arg);

    // Function @ uv.h:1776
    [DllImport(LibraryName, EntryPoint = "uv_thread_create_ex", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_thread_create_ex(uv_thread_t* tid, uv_thread_options_t* @params, uv_thread_cb entry, void* arg);

    // Function @ uv.h:1780
    [DllImport(LibraryName, EntryPoint = "uv_thread_self", CallingConvention = CallingConvention.Cdecl)]
    public static extern uv_thread_t uv_thread_self();

    // Function @ uv.h:1781
    [DllImport(LibraryName, EntryPoint = "uv_thread_join", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_thread_join(uv_thread_t* tid);

    // Function @ uv.h:1782
    [DllImport(LibraryName, EntryPoint = "uv_thread_equal", CallingConvention = CallingConvention.Cdecl)]
    public static extern int uv_thread_equal(uv_thread_t* t1, uv_thread_t* t2);

    // Function @ uv.h:1813
    [DllImport(LibraryName, EntryPoint = "uv_loop_get_data", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* uv_loop_get_data(uv_loop_t* param);

    // Function @ uv.h:1814
    [DllImport(LibraryName, EntryPoint = "uv_loop_set_data", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uv_loop_set_data(uv_loop_t* param, void* data);

    // PointerFunction @ uv.h:264
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_malloc_func
    {
        public delegate* unmanaged<ulong, void*> Pointer;
    }

    // PointerFunction @ uv.h:265
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_realloc_func
    {
        public delegate* unmanaged<void*, ulong, void*> Pointer;
    }

    // PointerFunction @ uv.h:266
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_calloc_func
    {
        public delegate* unmanaged<ulong, ulong, void*> Pointer;
    }

    // PointerFunction @ uv.h:267
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_free_func
    {
        public delegate* unmanaged<void*, void> Pointer;
    }

    // PointerFunction @ uv.h:317
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_shutdown_cb
    {
        public delegate* unmanaged<uv_shutdown_t*, int, void> Pointer;
    }

    // PointerFunction @ uv.h:327
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_walk_cb
    {
        public delegate* unmanaged<uv_handle_t*, void*, void> Pointer;
    }

    // PointerFunction @ uv.h:319
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_close_cb
    {
        public delegate* unmanaged<uv_handle_t*, void> Pointer;
    }

    // PointerFunction @ uv.h:318
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_connection_cb
    {
        public delegate* unmanaged<uv_stream_t*, int, void> Pointer;
    }

    // PointerFunction @ uv.h:309
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_alloc_cb
    {
        public delegate* unmanaged<uv_handle_t*, ulong, uv_buf_t*, void> Pointer;
    }

    // PointerFunction @ uv.h:312
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_read_cb
    {
        public delegate* unmanaged<uv_stream_t*, long, uv_buf_t*, void> Pointer;
    }

    // PointerFunction @ uv.h:315
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_write_cb
    {
        public delegate* unmanaged<uv_write_t*, int, void> Pointer;
    }

    // PointerFunction @ uv.h:316
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_connect_cb
    {
        public delegate* unmanaged<uv_connect_t*, int, void> Pointer;
    }

    // PointerFunction @ uv.h:643
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_udp_send_cb
    {
        public delegate* unmanaged<uv_udp_send_t*, int, void> Pointer;
    }

    // PointerFunction @ uv.h:644
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_udp_recv_cb
    {
        public delegate* unmanaged<uv_udp_t*, long, uv_buf_t*, sockaddr*, uint, void> Pointer;
    }

    // PointerFunction @ uv.h:320
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_poll_cb
    {
        public delegate* unmanaged<uv_poll_t*, int, int, void> Pointer;
    }

    // PointerFunction @ uv.h:323
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_prepare_cb
    {
        public delegate* unmanaged<uv_prepare_t*, void> Pointer;
    }

    // PointerFunction @ uv.h:324
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_check_cb
    {
        public delegate* unmanaged<uv_check_t*, void> Pointer;
    }

    // PointerFunction @ uv.h:325
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_idle_cb
    {
        public delegate* unmanaged<uv_idle_t*, void> Pointer;
    }

    // PointerFunction @ uv.h:322
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_async_cb
    {
        public delegate* unmanaged<uv_async_t*, void> Pointer;
    }

    // PointerFunction @ uv.h:321
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_timer_cb
    {
        public delegate* unmanaged<uv_timer_t*, void> Pointer;
    }

    // PointerFunction @ uv.h:331
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_getaddrinfo_cb
    {
        public delegate* unmanaged<uv_getaddrinfo_t*, int, addrinfo*, void> Pointer;
    }

    // PointerFunction @ uv.h:334
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_getnameinfo_cb
    {
        public delegate* unmanaged<uv_getnameinfo_t*, int, AnsiStringPtr, AnsiStringPtr, void> Pointer;
    }

    // PointerFunction @ uv.h:326
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_exit_cb
    {
        public delegate* unmanaged<uv_process_t*, long, int, void> Pointer;
    }

    // PointerFunction @ uv.h:329
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_work_cb
    {
        public delegate* unmanaged<uv_work_t*, void> Pointer;
    }

    // PointerFunction @ uv.h:330
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_after_work_cb
    {
        public delegate* unmanaged<uv_work_t*, int, void> Pointer;
    }

    // PointerFunction @ uv.h:328
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_fs_cb
    {
        public delegate* unmanaged<uv_fs_t*, void> Pointer;
    }

    // PointerFunction @ uv.h:374
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_fs_poll_cb
    {
        public delegate* unmanaged<uv_fs_poll_t*, int, uv_stat_t*, uv_stat_t*, void> Pointer;
    }

    // PointerFunction @ uv.h:379
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_signal_cb
    {
        public delegate* unmanaged<uv_signal_t*, int, void> Pointer;
    }

    // PointerFunction @ uv.h:369
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_fs_event_cb
    {
        public delegate* unmanaged<uv_fs_event_t*, AnsiStringPtr, int, int, void> Pointer;
    }

    // PointerFunction @ uv.h:338
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_random_cb
    {
        public delegate* unmanaged<uv_random_t*, int, void*, ulong, void> Pointer;
    }

    // PointerFunction @ uv.h:1759
    [StructLayout(LayoutKind.Sequential)]
    public struct uv_thread_cb
    {
        public delegate* unmanaged<void*, void> Pointer;
    }

    // Record @ unix.h:123
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct uv_buf_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public AnsiStringPtr @base;

        [FieldOffset(8)] // size = 8, padding = 0
        public ulong len;
    }

    // Record @ uv.h:958
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct uv_stdio_container_t
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uv_stdio_flags flags;

        [FieldOffset(8)] // size = 8, padding = 0
        public AnonymousUnion_data data;

        // Record @ uv.h:961
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct AnonymousUnion_data
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public uv_stream_t* stream;

            [FieldOffset(0)] // size = 4, padding = 4
            public int fd;
        }
    }

    // Record @ uv.h:967
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct uv_process_options_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public uv_exit_cb exit_cb;

        [FieldOffset(8)] // size = 8, padding = 0
        public AnsiStringPtr file;

        [FieldOffset(16)] // size = 8, padding = 0
        public AnsiStringPtr* args;

        [FieldOffset(24)] // size = 8, padding = 0
        public AnsiStringPtr* env;

        [FieldOffset(32)] // size = 8, padding = 0
        public AnsiStringPtr cwd;

        [FieldOffset(40)] // size = 4, padding = 0
        public uint flags;

        [FieldOffset(44)] // size = 4, padding = 0
        public int stdio_count;

        [FieldOffset(48)] // size = 8, padding = 0
        public uv_stdio_container_t* stdio;

        [FieldOffset(56)] // size = 4, padding = 0
        public uv_uid_t uid;

        [FieldOffset(60)] // size = 4, padding = 0
        public uv_gid_t gid;
    }

    // Record @ uv.h:1179
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct uv_timeval_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public long tv_sec;

        [FieldOffset(8)] // size = 8, padding = 0
        public long tv_usec;
    }

    // Record @ uv.h:1189
    [StructLayout(LayoutKind.Explicit, Size = 144, Pack = 8)]
    public struct uv_rusage_t
    {
        [FieldOffset(0)] // size = 16, padding = 0
        public uv_timeval_t ru_utime;

        [FieldOffset(16)] // size = 16, padding = 0
        public uv_timeval_t ru_stime;

        [FieldOffset(32)] // size = 8, padding = 0
        public ulong ru_maxrss;

        [FieldOffset(40)] // size = 8, padding = 0
        public ulong ru_ixrss;

        [FieldOffset(48)] // size = 8, padding = 0
        public ulong ru_idrss;

        [FieldOffset(56)] // size = 8, padding = 0
        public ulong ru_isrss;

        [FieldOffset(64)] // size = 8, padding = 0
        public ulong ru_minflt;

        [FieldOffset(72)] // size = 8, padding = 0
        public ulong ru_majflt;

        [FieldOffset(80)] // size = 8, padding = 0
        public ulong ru_nswap;

        [FieldOffset(88)] // size = 8, padding = 0
        public ulong ru_inblock;

        [FieldOffset(96)] // size = 8, padding = 0
        public ulong ru_oublock;

        [FieldOffset(104)] // size = 8, padding = 0
        public ulong ru_msgsnd;

        [FieldOffset(112)] // size = 8, padding = 0
        public ulong ru_msgrcv;

        [FieldOffset(120)] // size = 8, padding = 0
        public ulong ru_nsignals;

        [FieldOffset(128)] // size = 8, padding = 0
        public ulong ru_nvcsw;

        [FieldOffset(136)] // size = 8, padding = 0
        public ulong ru_nivcsw;
    }

    // Record @ uv.h:1126
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct uv_passwd_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public AnsiStringPtr username;

        [FieldOffset(8)] // size = 8, padding = 0
        public long uid;

        [FieldOffset(16)] // size = 8, padding = 0
        public long gid;

        [FieldOffset(24)] // size = 8, padding = 0
        public AnsiStringPtr shell;

        [FieldOffset(32)] // size = 8, padding = 0
        public AnsiStringPtr homedir;
    }

    // Record @ uv.h:1098
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct uv_cpu_times_s
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong user;

        [FieldOffset(8)] // size = 8, padding = 0
        public ulong nice;

        [FieldOffset(16)] // size = 8, padding = 0
        public ulong sys;

        [FieldOffset(24)] // size = 8, padding = 0
        public ulong idle;

        [FieldOffset(32)] // size = 8, padding = 0
        public ulong irq;
    }

    // Record @ uv.h:1106
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct uv_cpu_info_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public AnsiStringPtr model;

        [FieldOffset(8)] // size = 4, padding = 4
        public int speed;

        [FieldOffset(16)] // size = 40, padding = 0
        public uv_cpu_times_s cpu_times;
    }

    // Record @ uv.h:1112
    [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
    public struct uv_interface_address_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public AnsiStringPtr name;

        [FieldOffset(8)] // size = 6, padding = 2
        public fixed byte _phys_addr[6 / 1]; // char [6]

        public Span<byte> phys_addr
        {
            get
            {
                fixed (uv_interface_address_t* @this = &this)
                {
                    var pointer = &@this->_phys_addr[0];
                    var span = new Span<byte>(pointer, 6);
                    return span;
                }
            }
        }

        [FieldOffset(16)] // size = 4, padding = 0
        public int is_internal;

        [FieldOffset(20)] // size = 28, padding = 0
        public AnonymousUnion_address address;

        [FieldOffset(48)] // size = 28, padding = 4
        public AnonymousUnion_netmask netmask;

        // Record @ uv.h:1116
        [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
        public struct AnonymousUnion_address
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public sockaddr_in address4;

            [FieldOffset(0)] // size = 28, padding = 0
            public sockaddr_in6 address6;
        }

        // Record @ uv.h:1120
        [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
        public struct AnonymousUnion_netmask
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public sockaddr_in netmask4;

            [FieldOffset(0)] // size = 28, padding = 0
            public sockaddr_in6 netmask6;
        }
    }

    // Record @ uv.h:1245
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct uv_env_item_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public AnsiStringPtr name;

        [FieldOffset(8)] // size = 8, padding = 0
        public AnsiStringPtr value;
    }

    // Record @ uv.h:1134
    [StructLayout(LayoutKind.Explicit, Size = 1024, Pack = 1)]
    public struct uv_utsname_t
    {
        [FieldOffset(0)] // size = 256, padding = 0
        public fixed byte _sysname[256 / 1]; // char [256]

        public Span<byte> sysname
        {
            get
            {
                fixed (uv_utsname_t* @this = &this)
                {
                    var pointer = &@this->_sysname[0];
                    var span = new Span<byte>(pointer, 256);
                    return span;
                }
            }
        }

        [FieldOffset(256)] // size = 256, padding = 0
        public fixed byte _release[256 / 1]; // char [256]

        public Span<byte> release
        {
            get
            {
                fixed (uv_utsname_t* @this = &this)
                {
                    var pointer = &@this->_release[0];
                    var span = new Span<byte>(pointer, 256);
                    return span;
                }
            }
        }

        [FieldOffset(512)] // size = 256, padding = 0
        public fixed byte _version[256 / 1]; // char [256]

        public Span<byte> version
        {
            get
            {
                fixed (uv_utsname_t* @this = &this)
                {
                    var pointer = &@this->_version[0];
                    var span = new Span<byte>(pointer, 256);
                    return span;
                }
            }
        }

        [FieldOffset(768)] // size = 256, padding = 0
        public fixed byte _machine[256 / 1]; // char [256]

        public Span<byte> machine
        {
            get
            {
                fixed (uv_utsname_t* @this = &this)
                {
                    var pointer = &@this->_machine[0];
                    var span = new Span<byte>(pointer, 256);
                    return span;
                }
            }
        }
    }

    // Record @ uv.h:343
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct uv_timespec_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public long tv_sec;

        [FieldOffset(8)] // size = 8, padding = 0
        public long tv_nsec;
    }

    // Record @ uv.h:349
    [StructLayout(LayoutKind.Explicit, Size = 160, Pack = 8)]
    public struct uv_stat_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong st_dev;

        [FieldOffset(8)] // size = 8, padding = 0
        public ulong st_mode;

        [FieldOffset(16)] // size = 8, padding = 0
        public ulong st_nlink;

        [FieldOffset(24)] // size = 8, padding = 0
        public ulong st_uid;

        [FieldOffset(32)] // size = 8, padding = 0
        public ulong st_gid;

        [FieldOffset(40)] // size = 8, padding = 0
        public ulong st_rdev;

        [FieldOffset(48)] // size = 8, padding = 0
        public ulong st_ino;

        [FieldOffset(56)] // size = 8, padding = 0
        public ulong st_size;

        [FieldOffset(64)] // size = 8, padding = 0
        public ulong st_blksize;

        [FieldOffset(72)] // size = 8, padding = 0
        public ulong st_blocks;

        [FieldOffset(80)] // size = 8, padding = 0
        public ulong st_flags;

        [FieldOffset(88)] // size = 8, padding = 0
        public ulong st_gen;

        [FieldOffset(96)] // size = 16, padding = 0
        public uv_timespec_t st_atim;

        [FieldOffset(112)] // size = 16, padding = 0
        public uv_timespec_t st_mtim;

        [FieldOffset(128)] // size = 16, padding = 0
        public uv_timespec_t st_ctim;

        [FieldOffset(144)] // size = 16, padding = 0
        public uv_timespec_t st_birthtim;
    }

    // Record @ uv.h:1166
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct uv_dirent_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public AnsiStringPtr name;

        [FieldOffset(8)] // size = 4, padding = 4
        public uv_dirent_type_t type;
    }

    // Record @ unix.h:218
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct uv_lib_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public void* handle;

        [FieldOffset(8)] // size = 8, padding = 0
        public AnsiStringPtr errmsg;
    }

    // Record @ uv.h:1184
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct uv_timeval64_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public long tv_sec;

        [FieldOffset(8)] // size = 4, padding = 4
        public int tv_usec;
    }

    // Record @ uv.h:1768
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct uv_thread_options_t
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint flags;

        [FieldOffset(8)] // size = 8, padding = 0
        public ulong stack_size;
    }

    // OpaqueType @ uv.h:209
    [StructLayout(LayoutKind.Explicit, Size = 1072, Pack = 8)]
    public struct uv_loop_t
    {
        [FieldOffset(0)]
        public fixed byte Data[1072];
    }

    // OpaqueType @ uv.h:210
    [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
    public struct uv_handle_t
    {
        [FieldOffset(0)]
        public fixed byte Data[96];
    }

    // OpaqueType @ uv.h:232
    [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
    public struct uv_shutdown_t
    {
        [FieldOffset(0)]
        public fixed byte Data[80];
    }

    // OpaqueType @ uv.h:212
    [StructLayout(LayoutKind.Explicit, Size = 264, Pack = 8)]
    public struct uv_stream_t
    {
        [FieldOffset(0)]
        public fixed byte Data[264];
    }

    // OpaqueType @ uv.h:229
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct uv_req_t
    {
        [FieldOffset(0)]
        public fixed byte Data[64];
    }

    // OpaqueType @ uv.h:233
    [StructLayout(LayoutKind.Explicit, Size = 192, Pack = 8)]
    public struct uv_write_t
    {
        [FieldOffset(0)]
        public fixed byte Data[192];
    }

    // OpaqueType @ uv.h:213
    [StructLayout(LayoutKind.Explicit, Size = 264, Pack = 8)]
    public struct uv_tcp_t
    {
        [FieldOffset(0)]
        public fixed byte Data[264];
    }

    // OpaqueType @ uv.h:234
    [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
    public struct uv_connect_t
    {
        [FieldOffset(0)]
        public fixed byte Data[96];
    }

    // OpaqueType @ uv.h:214
    [StructLayout(LayoutKind.Explicit, Size = 224, Pack = 8)]
    public struct uv_udp_t
    {
        [FieldOffset(0)]
        public fixed byte Data[224];
    }

    // OpaqueType @ uv.h:235
    [StructLayout(LayoutKind.Explicit, Size = 320, Pack = 8)]
    public struct uv_udp_send_t
    {
        [FieldOffset(0)]
        public fixed byte Data[320];
    }

    // OpaqueType @ uv.h:216
    [StructLayout(LayoutKind.Explicit, Size = 344, Pack = 8)]
    public struct uv_tty_t
    {
        [FieldOffset(0)]
        public fixed byte Data[344];
    }

    // OpaqueType @ uv.h:215
    [StructLayout(LayoutKind.Explicit, Size = 280, Pack = 8)]
    public struct uv_pipe_t
    {
        [FieldOffset(0)]
        public fixed byte Data[280];
    }

    // OpaqueType @ uv.h:217
    [StructLayout(LayoutKind.Explicit, Size = 168, Pack = 8)]
    public struct uv_poll_t
    {
        [FieldOffset(0)]
        public fixed byte Data[168];
    }

    // OpaqueType @ uv.h:219
    [StructLayout(LayoutKind.Explicit, Size = 120, Pack = 8)]
    public struct uv_prepare_t
    {
        [FieldOffset(0)]
        public fixed byte Data[120];
    }

    // OpaqueType @ uv.h:220
    [StructLayout(LayoutKind.Explicit, Size = 120, Pack = 8)]
    public struct uv_check_t
    {
        [FieldOffset(0)]
        public fixed byte Data[120];
    }

    // OpaqueType @ uv.h:221
    [StructLayout(LayoutKind.Explicit, Size = 120, Pack = 8)]
    public struct uv_idle_t
    {
        [FieldOffset(0)]
        public fixed byte Data[120];
    }

    // OpaqueType @ uv.h:222
    [StructLayout(LayoutKind.Explicit, Size = 128, Pack = 8)]
    public struct uv_async_t
    {
        [FieldOffset(0)]
        public fixed byte Data[128];
    }

    // OpaqueType @ uv.h:218
    [StructLayout(LayoutKind.Explicit, Size = 152, Pack = 8)]
    public struct uv_timer_t
    {
        [FieldOffset(0)]
        public fixed byte Data[152];
    }

    // OpaqueType @ uv.h:230
    [StructLayout(LayoutKind.Explicit, Size = 160, Pack = 8)]
    public struct uv_getaddrinfo_t
    {
        [FieldOffset(0)]
        public fixed byte Data[160];
    }

    // OpaqueType @ uv.h:231
    [StructLayout(LayoutKind.Explicit, Size = 1320, Pack = 8)]
    public struct uv_getnameinfo_t
    {
        [FieldOffset(0)]
        public fixed byte Data[1320];
    }

    // OpaqueType @ uv.h:223
    [StructLayout(LayoutKind.Explicit, Size = 136, Pack = 8)]
    public struct uv_process_t
    {
        [FieldOffset(0)]
        public fixed byte Data[136];
    }

    // OpaqueType @ uv.h:237
    [StructLayout(LayoutKind.Explicit, Size = 128, Pack = 8)]
    public struct uv_work_t
    {
        [FieldOffset(0)]
        public fixed byte Data[128];
    }

    // OpaqueType @ uv.h:236
    [StructLayout(LayoutKind.Explicit, Size = 440, Pack = 8)]
    public struct uv_fs_t
    {
        [FieldOffset(0)]
        public fixed byte Data[440];
    }

    // OpaqueType @ uv.h:211
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct uv_dir_t
    {
        [FieldOffset(0)]
        public fixed byte Data[56];
    }

    // OpaqueType @ uv.h:225
    [StructLayout(LayoutKind.Explicit, Size = 104, Pack = 8)]
    public struct uv_fs_poll_t
    {
        [FieldOffset(0)]
        public fixed byte Data[104];
    }

    // OpaqueType @ uv.h:226
    [StructLayout(LayoutKind.Explicit, Size = 152, Pack = 8)]
    public struct uv_signal_t
    {
        [FieldOffset(0)]
        public fixed byte Data[152];
    }

    // OpaqueType @ uv.h:224
    [StructLayout(LayoutKind.Explicit, Size = 304, Pack = 8)]
    public struct uv_fs_event_t
    {
        [FieldOffset(0)]
        public fixed byte Data[304];
    }

    // OpaqueType @ uv.h:238
    [StructLayout(LayoutKind.Explicit, Size = 144, Pack = 8)]
    public struct uv_random_t
    {
        [FieldOffset(0)]
        public fixed byte Data[144];
    }

    // OpaqueType @ unix.h:137
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct uv_mutex_t
    {
        [FieldOffset(0)]
        public fixed byte Data[64];
    }

    // OpaqueType @ unix.h:138
    [StructLayout(LayoutKind.Explicit, Size = 200, Pack = 8)]
    public struct uv_rwlock_t
    {
        [FieldOffset(0)]
        public fixed byte Data[200];
    }

    // OpaqueType @ unix.h:139
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct uv_sem_t
    {
        [FieldOffset(0)]
        public fixed byte Data[4];
    }

    // OpaqueType @ unix.h:140
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct uv_cond_t
    {
        [FieldOffset(0)]
        public fixed byte Data[48];
    }

    // OpaqueType @ unix.h:162
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct uv_barrier_t
    {
        [FieldOffset(0)]
        public fixed byte Data[8];
    }

    // OpaqueType @ unix.h:135
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct uv_once_t
    {
        [FieldOffset(0)]
        public fixed byte Data[16];
    }

    // OpaqueType @ unix.h:141
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct uv_key_t
    {
        [FieldOffset(0)]
        public fixed byte Data[8];
    }

    // Typedef @ unix.h:130
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct uv_os_fd_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Data;

        public static implicit operator int(uv_os_fd_t data) => data.Data;
        public static implicit operator uv_os_fd_t(int data) => new() { Data = data };
    }

    // Typedef @ unix.h:128
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct uv_file
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Data;

        public static implicit operator int(uv_file data) => data.Data;
        public static implicit operator uv_file(int data) => new() { Data = data };
    }

    // Typedef @ unix.h:129
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct uv_os_sock_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Data;

        public static implicit operator int(uv_os_sock_t data) => data.Data;
        public static implicit operator uv_os_sock_t(int data) => new() { Data = data };
    }

    // Typedef @ unix.h:169
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct uv_uid_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uid_t Data;

        public static implicit operator uid_t(uv_uid_t data) => data.Data;
        public static implicit operator uv_uid_t(uid_t data) => new() { Data = data };
    }

    // Typedef @ unix.h:168
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct uv_gid_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public gid_t Data;

        public static implicit operator gid_t(uv_gid_t data) => data.Data;
        public static implicit operator uv_gid_t(gid_t data) => new() { Data = data };
    }

    // Typedef @ unix.h:131
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct uv_pid_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public pid_t Data;

        public static implicit operator pid_t(uv_pid_t data) => data.Data;
        public static implicit operator uv_pid_t(pid_t data) => new() { Data = data };
    }

    // Typedef @ unix.h:136
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct uv_thread_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public pthread_t Data;

        public static implicit operator pthread_t(uv_thread_t data) => data.Data;
        public static implicit operator uv_thread_t(pthread_t data) => new() { Data = data };
    }

    // Enum @ uv.h:249
    public enum uv_loop_option : uint
    {
        UV_LOOP_BLOCK_SIGNAL = 0U,
        UV_METRICS_IDLE_TIME = 1U
    }

    // Enum @ uv.h:254
    public enum uv_run_mode : uint
    {
        UV_RUN_DEFAULT = 0U,
        UV_RUN_ONCE = 1U,
        UV_RUN_NOWAIT = 2U
    }

    // Enum @ uv.h:189
    public enum uv_handle_type : uint
    {
        UV_UNKNOWN_HANDLE = 0U,
        UV_ASYNC = 1U,
        UV_CHECK = 2U,
        UV_FS_EVENT = 3U,
        UV_FS_POLL = 4U,
        UV_HANDLE = 5U,
        UV_IDLE = 6U,
        UV_NAMED_PIPE = 7U,
        UV_POLL = 8U,
        UV_PREPARE = 9U,
        UV_PROCESS = 10U,
        UV_STREAM = 11U,
        UV_TCP = 12U,
        UV_TIMER = 13U,
        UV_TTY = 14U,
        UV_UDP = 15U,
        UV_SIGNAL = 16U,
        UV_FILE = 17U,
        UV_HANDLE_TYPE_MAX = 18U
    }

    // Enum @ uv.h:198
    public enum uv_req_type : uint
    {
        UV_UNKNOWN_REQ = 0U,
        UV_REQ = 1U,
        UV_CONNECT = 2U,
        UV_WRITE = 3U,
        UV_SHUTDOWN = 4U,
        UV_UDP_SEND = 5U,
        UV_FS = 6U,
        UV_WORK = 7U,
        UV_GETADDRINFO = 8U,
        UV_GETNAMEINFO = 9U,
        UV_RANDOM = 10U,
        UV_REQ_TYPE_MAX = 11U
    }

    // Enum @ uv.h:382
    public enum uv_membership : uint
    {
        UV_LEAVE_GROUP = 0U,
        UV_JOIN_GROUP = 1U
    }

    // Enum @ uv.h:733
    public enum uv_tty_mode_t : uint
    {
        UV_TTY_MODE_NORMAL = 0U,
        UV_TTY_MODE_RAW = 1U,
        UV_TTY_MODE_IO = 2U
    }

    // Enum @ uv.h:742
    public enum uv_tty_vtermstate_t : uint
    {
        UV_TTY_SUPPORTED = 0U,
        UV_TTY_UNSUPPORTED = 1U
    }

    // Enum @ uv.h:934
    public enum uv_stdio_flags : uint
    {
        UV_IGNORE = 0U,
        UV_CREATE_PIPE = 1U,
        UV_INHERIT_FD = 2U,
        UV_INHERIT_STREAM = 4U,
        UV_READABLE_PIPE = 16U,
        UV_WRITABLE_PIPE = 32U,
        UV_NONBLOCK_PIPE = 64U,
        UV_OVERLAPPED_PIPE = 64U
    }

    // Enum @ uv.h:1273
    public enum uv_fs_type : int
    {
        UV_FS_UNKNOWN = -1,
        UV_FS_CUSTOM = 0,
        UV_FS_OPEN = 1,
        UV_FS_CLOSE = 2,
        UV_FS_READ = 3,
        UV_FS_WRITE = 4,
        UV_FS_SENDFILE = 5,
        UV_FS_STAT = 6,
        UV_FS_LSTAT = 7,
        UV_FS_FSTAT = 8,
        UV_FS_FTRUNCATE = 9,
        UV_FS_UTIME = 10,
        UV_FS_FUTIME = 11,
        UV_FS_ACCESS = 12,
        UV_FS_CHMOD = 13,
        UV_FS_FCHMOD = 14,
        UV_FS_FSYNC = 15,
        UV_FS_FDATASYNC = 16,
        UV_FS_UNLINK = 17,
        UV_FS_RMDIR = 18,
        UV_FS_MKDIR = 19,
        UV_FS_MKDTEMP = 20,
        UV_FS_RENAME = 21,
        UV_FS_SCANDIR = 22,
        UV_FS_LINK = 23,
        UV_FS_SYMLINK = 24,
        UV_FS_READLINK = 25,
        UV_FS_CHOWN = 26,
        UV_FS_FCHOWN = 27,
        UV_FS_REALPATH = 28,
        UV_FS_COPYFILE = 29,
        UV_FS_LCHOWN = 30,
        UV_FS_OPENDIR = 31,
        UV_FS_READDIR = 32,
        UV_FS_CLOSEDIR = 33,
        UV_FS_STATFS = 34,
        UV_FS_MKSTEMP = 35,
        UV_FS_LUTIME = 36
    }

    // Enum @ uv.h:1155
    public enum uv_dirent_type_t : uint
    {
        UV_DIRENT_UNKNOWN = 0U,
        UV_DIRENT_FILE = 1U,
        UV_DIRENT_DIR = 2U,
        UV_DIRENT_LINK = 3U,
        UV_DIRENT_FIFO = 4U,
        UV_DIRENT_SOCKET = 5U,
        UV_DIRENT_CHAR = 6U,
        UV_DIRENT_BLOCK = 7U
    }
}
